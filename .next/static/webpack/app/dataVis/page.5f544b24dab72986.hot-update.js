"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dataVis/page",{

/***/ "(app-pages-browser)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"7f9c63b82d59\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyJFOlxcV3BpXFxSZWd1bGFybHlcXENvdXJzZXNcXFNyXFwyMDI0X0NfVGVybVxcQ1M0MjQxXFxIV1xcZmluYWwtcHJvamVjdC1rZXJtaXQtdGhlLWZyb2dcXHNyY1xcYXBwXFxnbG9iYWxzLmNzcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjdmOWM2M2I4MmQ1OVwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/dataVis/TrendAnaIndex.js":
/*!******************************************!*\
  !*** ./src/app/dataVis/TrendAnaIndex.js ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SolveTimeTrend)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _TrendAnaTime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TrendAnaTime */ \"(app-pages-browser)/./src/app/dataVis/TrendAnaTime.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_TrendAnaTime__WEBPACK_IMPORTED_MODULE_2__]);\n_TrendAnaTime__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\nconst d3 = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_d3_src_index_js\").then(__webpack_require__.bind(__webpack_require__, /*! d3 */ \"(app-pages-browser)/./node_modules/d3/src/index.js\"));\n\nfunction SolveTimeTrend(param) {\n    let { solves } = param;\n    _s();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [showIndexView, setShowIndexView] = useState(false);\n    if (showIndexView) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(SolveTimeTrend, {\n            solves: solves\n        }, void 0, false, {\n            fileName: \"E:\\\\Wpi\\\\Regularly\\\\Courses\\\\Sr\\\\2024_C_Term\\\\CS4241\\\\HW\\\\final-project-kermit-the-frog\\\\src\\\\app\\\\dataVis\\\\TrendAnaIndex.js\",\n            lineNumber: 13,\n            columnNumber: 16\n        }, this);\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"SolveTimeTrend.useEffect\": ()=>{\n            if (!solves || !Array.isArray(solves) || solves.length === 0) return; // 🔥 Ensure solves is valid\n            if (containerRef.current) {\n                drawSolveTimeTrend(solves);\n                window.addEventListener('resize', handleResize);\n            }\n            return ({\n                \"SolveTimeTrend.useEffect\": ()=>window.removeEventListener('resize', handleResize)\n            })[\"SolveTimeTrend.useEffect\"];\n        }\n    }[\"SolveTimeTrend.useEffect\"], [\n        solves\n    ]);\n    function handleResize() {\n        if (containerRef.current) {\n            drawSolveTimeTrend(solves);\n        }\n    }\n    function computeRollingAverage(data, windowSize) {\n        const rollingAvg = data.map((_, i, arr)=>{\n            if (i < windowSize - 1) return null;\n            const subset = arr.slice(i - (windowSize - 1), i + 1);\n            return subset.reduce((sum, val)=>sum + val, 0) / subset.length;\n        });\n        console.log(\"Window Size: \".concat(windowSize));\n        console.log(\"Original Data Length: \".concat(data.length));\n        console.log(\"Rolling Average (\".concat(windowSize, \") Length: \").concat(rollingAvg.length));\n        console.log(\"First Values:\", rollingAvg.slice(0, 15)); // Check first few values\n        console.log(\"Last Values:\", rollingAvg.slice(-15)); // Check last few values\n        return rollingAvg;\n    }\n    function drawSolveTimeTrend(data) {\n        if (!containerRef.current) return;\n        const container = d3.select(containerRef.current);\n        container.selectAll('*').remove();\n        const width = containerRef.current.clientWidth || 800;\n        const height = containerRef.current.clientHeight || 500;\n        const svg = container.append('svg').attr('width', '100%').attr('height', '100%').attr('viewBox', \"0 0 \".concat(width, \" \").concat(height)).attr('preserveAspectRatio', 'xMidYMid meet');\n        const times = data.map((solve)=>solve.time / 1000);\n        const ao5 = computeRollingAverage(times, 5);\n        const ao12 = computeRollingAverage(times, 12);\n        let xScale = d3.scaleLinear().domain([\n            0,\n            times.length - 1\n        ]).range([\n            50,\n            width - 50\n        ]);\n        let yScale = d3.scaleLinear().domain([\n            d3.max(times),\n            d3.min(times)\n        ]) // Flip domain to match SVG coords\n        .range([\n            50,\n            height - 50\n        ]); // Ensure bottom is lower on the screen\n        const xAxis = svg.append('g').attr('class', 'x-axis').attr('transform', \"translate(0, \".concat(height - 50, \")\")).call(d3.axisBottom(xScale));\n        const yAxis = svg.append('g').attr('class', 'y-axis').attr('transform', \"translate(50, 0)\").call(d3.axisLeft(yScale));\n        const gridGroup = svg.append('g').attr('class', 'grid');\n        function drawGrid(xScale, yScale) {\n            gridGroup.selectAll('*').remove();\n            // Horizontal grid lines\n            gridGroup.selectAll('.horizontal-grid').data(yScale.ticks(10)).enter().append('line').attr('class', 'horizontal-grid').attr('x1', 50).attr('x2', width - 50).attr('y1', (d)=>yScale(d)).attr('y2', (d)=>yScale(d)).attr('stroke', '#ccc').attr('stroke-dasharray', '4,4');\n            // Vertical grid lines\n            gridGroup.selectAll('.vertical-grid').data(xScale.ticks(10)).enter().append('line').attr('class', 'vertical-grid').attr('x1', (d)=>xScale(d)).attr('x2', (d)=>xScale(d)).attr('y1', 50).attr('y2', height - 50).attr('stroke', '#ccc').attr('stroke-dasharray', '4,4');\n        }\n        drawGrid(xScale, yScale);\n        const zoom = d3.zoom().scaleExtent([\n            0.5,\n            5\n        ]).translateExtent([\n            [\n                0,\n                0\n            ],\n            [\n                width,\n                height\n            ]\n        ]).on('zoom', (event)=>{\n            const transform = event.transform;\n            const newXScale = transform.rescaleX(xScale);\n            const newYScale = transform.rescaleY(yScale);\n            // Update all plots\n            updatePlot(newXScale, newYScale);\n            // Update axes\n            xAxis.call(d3.axisBottom(newXScale));\n            yAxis.call(d3.axisLeft(newYScale));\n            // Update grid with new scales\n            drawGrid(newXScale, newYScale);\n        });\n        svg.call(zoom);\n        // ✅ Add Legends (Below Autoscale Button)\n        const legend = svg.append('g').attr('transform', \"translate(\".concat(width - 120, \", 80)\")); // ⬇ Moves legend lower under button\n        const legendItems = [\n            {\n                color: 'blue',\n                label: 'Single'\n            },\n            {\n                color: 'green',\n                label: 'AO5'\n            },\n            {\n                color: 'red',\n                label: 'AO12'\n            }\n        ];\n        legendItems.forEach((item, i)=>{\n            legend.append('rect').attr('x', 0).attr('y', i * 20).attr('width', 15).attr('height', 15).attr('fill', item.color);\n            legend.append('text').attr('x', 20).attr('y', i * 20 + 12).attr('fill', 'black').attr('font-size', '12px').text(item.label);\n        });\n        function autoscale(event) {\n            event.preventDefault(); // Stop default zoom behavior\n            event.stopPropagation(); // Prevent further event propagation\n            svg.transition().duration(500).call(zoom.transform, d3.zoomIdentity); // Reset to original zoom state\n        }\n        // Ensure event is passed to autoscale\n        svg.on('dblclick', (event)=>autoscale(event));\n        // Also explicitly disable zoom on double-click to prevent zooming in\n        svg.call(zoom).on(\"dblclick.zoom\", null);\n        function updatePlot(newXScale, newYScale) {\n            console.log(\"🔄 Updating Plot with New Scales:\");\n            console.log(\"🟢 New X Scale Domain:\", newXScale.domain());\n            console.log(\"🟢 New Y Scale Domain:\", newYScale.domain());\n            // ✅ Ensure that the AO5 and AO12 points are correctly bound\n            const ao5Selection = svg.selectAll('.point-ao5').data(ao5.map((val, i)=>({\n                    x: i,\n                    y: val\n                })), (d)=>d.x); // Ensure unique key binding\n            const ao12Selection = svg.selectAll('.point-ao12').data(ao12.map((val, i)=>({\n                    x: i,\n                    y: val\n                })), (d)=>d.x); // Ensure unique key binding\n            console.log(\"✔ Total AO5 Points Selected: \".concat(ao5Selection.size(), \" (Expected: \").concat(ao5.length, \")\"));\n            console.log(\"✔ Total AO12 Points Selected: \".concat(ao12Selection.size(), \" (Expected: \").concat(ao12.length, \")\"));\n            if (ao5Selection.size() === 0) console.warn(\"⚠️ No AO5 points found in updatePlot!\");\n            if (ao12Selection.size() === 0) console.warn(\"⚠️ No AO12 points found in updatePlot!\");\n            // ✅ Update all AO5 points\n            ao5Selection.attr('cx', (d)=>newXScale(d.x)).attr('cy', (d)=>newYScale(d.y));\n            // ✅ Update all AO12 points\n            ao12Selection.attr('cx', (d)=>newXScale(d.x)).attr('cy', (d)=>newYScale(d.y));\n            // ✅ Debugging: Ensure last AO5 & AO12 points update correctly\n            ao5Selection.each(function(d, i) {\n                if (i >= ao5.length - 4) {\n                    console.log(\"\\uD83D\\uDFE2 AO5 Point \".concat(i, \": x=\").concat(newXScale(d.x), \", y=\").concat(newYScale(d.y)));\n                }\n            });\n            ao12Selection.each(function(d, i) {\n                if (i >= ao12.length - 12) {\n                    console.log(\"\\uD83D\\uDD34 AO12 Point \".concat(i, \": x=\").concat(newXScale(d.x), \", y=\").concat(newYScale(d.y)));\n                }\n            });\n            // ✅ Update single solve points\n            svg.selectAll('.point-single').attr('cx', (_, i)=>newXScale(i)).attr('cy', (_, i)=>newYScale(times[i]));\n            // ✅ Update single solve line\n            svg.selectAll('.line-single').attr('d', d3.line().curve(d3.curveMonotoneX).x((_, i)=>newXScale(i)).y((_, i)=>newYScale(times[i])));\n            // ✅ Ensure AO5 line aligns dynamically\n            svg.selectAll('.line-ao5').attr('d', d3.line().curve(d3.curveMonotoneX).defined((_, i)=>i >= 4 && ao5[i] !== null).x((_, i)=>newXScale(i)).y((_, i)=>newYScale(ao5[i])));\n            // ✅ Ensure AO12 line aligns dynamically\n            svg.selectAll('.line-ao12').attr('d', d3.line().curve(d3.curveMonotoneX).defined((_, i)=>i >= 11 && ao12[i] !== null).x((_, i)=>newXScale(i)).y((_, i)=>newYScale(ao12[i])));\n        }\n        svg.append('path').datum(times).attr('class', 'line line-single').attr('stroke', 'blue').attr('fill', 'none').attr('stroke-width', 2);\n        svg.append('path').datum(ao5).attr('class', 'line line-ao5').attr('stroke', 'green').attr('fill', 'none').attr('stroke-width', 2);\n        svg.append('path').datum(ao12).attr('class', 'line line-ao12').attr('stroke', 'red').attr('fill', 'none').attr('stroke-width', 2);\n        const tooltip = d3.select(containerRef.current).append('div').attr('class', 'absolute bg-white p-2 border rounded shadow text-sm').style('visibility', 'hidden').style('position', 'absolute');\n        function showTooltip(event, i) {\n            var _times_i, _ao5_i, _ao12_i;\n            const singleTime = (_times_i = times[i]) === null || _times_i === void 0 ? void 0 : _times_i.toFixed(2);\n            const ao5Time = ao5[i] !== null ? (_ao5_i = ao5[i]) === null || _ao5_i === void 0 ? void 0 : _ao5_i.toFixed(2) : '-';\n            const ao12Time = ao12[i] !== null ? (_ao12_i = ao12[i]) === null || _ao12_i === void 0 ? void 0 : _ao12_i.toFixed(2) : '-';\n            tooltip.html(\"\\n                <div><strong>Single:</strong> \".concat(singleTime, \"s</div>\\n                <div><strong>AO5:</strong> \").concat(ao5Time, \"s</div>\\n                <div><strong>AO12:</strong> \").concat(ao12Time, \"s</div>\\n            \")).style('visibility', 'visible').style('position', 'fixed').style('background', 'white').style('padding', '6px').style('border', '1px solid #ccc').style('border-radius', '5px').style('box-shadow', '2px 2px 10px rgba(0, 0, 0, 0.1)').style('font-size', '12px').style('pointer-events', 'none').style('z-index', '1000').style('transform', 'translate(0, -50%)');\n            tooltip.style('left', \"\".concat(event.pageX + 12, \"px\")).style('top', \"\".concat(event.pageY, \"px\"));\n        }\n        function hideTooltip() {\n            tooltip.style('visibility', 'hidden');\n        }\n        setTimeout(()=>{\n            updatePlot(xScale, yScale); // ✅ Force render after initialization\n        }, 100);\n        function addPoints(data, color, className, valueAccessor, minIndex, label) {\n            // ✅ Ensure that we correctly iterate over the full dataset\n            const validPoints = data.map((val, i)=>({\n                    x: i,\n                    y: valueAccessor(i)\n                })).filter((d)=>d.y !== null && d.x >= minIndex); // ✅ Removed x < times.length constraint\n            console.log(\"\\n\\uD83D\\uDFE2 Adding Points for \".concat(label, \" | Class: \").concat(className, \" | MinIndex: \").concat(minIndex));\n            console.log(\"✔ Valid Points Count: \".concat(validPoints.length));\n            console.log(\"\\uD83D\\uDCCD First 5 Points:\", validPoints.slice(0, 5));\n            console.log(\"\\uD83D\\uDCCD Last 5 Points:\", validPoints.slice(-5));\n            validPoints.forEach((point, i)=>{\n                console.log(\"\\uD83D\\uDD35 \".concat(label, \" Point \").concat(i + minIndex, \": RawX=\").concat(point.x, \", ScaledX=\").concat(xScale(point.x), \", \") + \"RawY=\".concat(point.y.toFixed(3), \", ScaledY=\").concat(yScale(point.y).toFixed(2)));\n            });\n            // Ensure data binding is done correctly\n            svg.selectAll(\".\".concat(className)).data(validPoints, (d)=>d.x) // Ensure unique key binding\n            .join(\"circle\") // Ensure proper binding\n            .attr('class', \"point \".concat(className)).attr('cx', (d)=>xScale(d.x)).attr('cy', (d)=>yScale(d.y)).attr('r', 5).attr('fill', color).on('mouseover', (event, d)=>showTooltip(event, d.x)).on('mouseout', hideTooltip);\n        }\n        // ✅ Ensure AO5 & AO12 points are fully added before updating\n        addPoints(times, 'blue', 'point-single', (i)=>times[i], 0, \"Single\");\n        addPoints(ao5, 'green', 'point-ao5', (i)=>ao5[i], 4, \"AO5\");\n        addPoints(ao12, 'red', 'point-ao12', (i)=>ao12[i], 11, \"AO12\");\n        const controls = d3.select(containerRef.current).append('div').attr('class', 'absolute top-2 right-2 bg-white p-2 rounded shadow');\n        controls.append('button').text('Autoscale').style('margin-right', '5px').on('click', autoscale);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: containerRef,\n        className: \"w-screen h-[calc(100vh-100px)] bg-white relative\"\n    }, void 0, false, {\n        fileName: \"E:\\\\Wpi\\\\Regularly\\\\Courses\\\\Sr\\\\2024_C_Term\\\\CS4241\\\\HW\\\\final-project-kermit-the-frog\\\\src\\\\app\\\\dataVis\\\\TrendAnaIndex.js\",\n        lineNumber: 359,\n        columnNumber: 9\n    }, this);\n}\n_s(SolveTimeTrend, \"cb8EW0/KlcsXOY9aljtB9hyEhOs=\");\n_c = SolveTimeTrend;\nvar _c;\n$RefreshReg$(_c, \"SolveTimeTrend\");\n\n\n;\r\n    // Wrapped in an IIFE to avoid polluting the global scope\r\n    ;\r\n    (function () {\r\n        var _a, _b;\r\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\r\n        // to extract CSS. For backwards compatibility, we need to check we're in a\r\n        // browser context before continuing.\r\n        if (typeof self !== 'undefined' &&\r\n            // AMP / No-JS mode does not inject these helpers:\r\n            '$RefreshHelpers$' in self) {\r\n            // @ts-ignore __webpack_module__ is global\r\n            var currentExports = module.exports;\r\n            // @ts-ignore __webpack_module__ is global\r\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\r\n            // This cannot happen in MainTemplate because the exports mismatch between\r\n            // templating and execution.\r\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\r\n            // A module can be accepted automatically based on its exports, e.g. when\r\n            // it is a Refresh Boundary.\r\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\r\n                // Save the previous exports signature on update so we can compare the boundary\r\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\r\n                module.hot.dispose(function (data) {\r\n                    data.prevSignature =\r\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\r\n                });\r\n                // Unconditionally accept an update to this module, we'll check if it's\r\n                // still a Refresh Boundary later.\r\n                // @ts-ignore importMeta is replaced in the loader\r\n                module.hot.accept();\r\n                // This field is set when the previous version of this module was a\r\n                // Refresh Boundary, letting us know we need to check for invalidation or\r\n                // enqueue an update.\r\n                if (prevSignature !== null) {\r\n                    // A boundary can become ineligible if its exports are incompatible\r\n                    // with the previous exports.\r\n                    //\r\n                    // For example, if you add/remove/change exports, we'll want to\r\n                    // re-execute the importing modules, and force those components to\r\n                    // re-render. Similarly, if you convert a class component to a\r\n                    // function, we want to invalidate the boundary.\r\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\r\n                        module.hot.invalidate();\r\n                    }\r\n                    else {\r\n                        self.$RefreshHelpers$.scheduleUpdate();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Since we just executed the code for the module, it's possible that the\r\n                // new exports made it ineligible for being a boundary.\r\n                // We only care about the case when we were _previously_ a boundary,\r\n                // because we already accepted this update (accidental side effect).\r\n                var isNoLongerABoundary = prevSignature !== null;\r\n                if (isNoLongerABoundary) {\r\n                    module.hot.invalidate();\r\n                }\r\n            }\r\n        }\r\n    })();\r\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZGF0YVZpcy9UcmVuZEFuYUluZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFFMEM7QUFDMUMsTUFBTUUsS0FBSyxNQUFNLDRNQUFZO0FBQ2E7QUFFM0IsU0FBU0UsZUFBZSxLQUFVO1FBQVYsRUFBRUMsTUFBTSxFQUFFLEdBQVY7O0lBQ25DLE1BQU1DLGVBQWVMLDZDQUFNQSxDQUFDO0lBRTVCLE1BQU0sQ0FBQ00sZUFBZUMsaUJBQWlCLEdBQUdDLFNBQVM7SUFFbkQsSUFBSUYsZUFBZTtRQUNmLHFCQUFPLDhEQUFDSDtZQUFlQyxRQUFRQTs7Ozs7O0lBQ25DO0lBRUFMLGdEQUFTQTtvQ0FBQztZQUNOLElBQUksQ0FBQ0ssVUFBVSxDQUFDSyxNQUFNQyxPQUFPLENBQUNOLFdBQVdBLE9BQU9PLE1BQU0sS0FBSyxHQUFHLFFBQVEsNEJBQTRCO1lBQ2xHLElBQUlOLGFBQWFPLE9BQU8sRUFBRTtnQkFDdEJDLG1CQUFtQlQ7Z0JBQ25CVSxPQUFPQyxnQkFBZ0IsQ0FBQyxVQUFVQztZQUN0QztZQUVBOzRDQUFPLElBQU1GLE9BQU9HLG1CQUFtQixDQUFDLFVBQVVEOztRQUN0RDttQ0FBRztRQUFDWjtLQUFPO0lBRVgsU0FBU1k7UUFDTCxJQUFJWCxhQUFhTyxPQUFPLEVBQUU7WUFDdEJDLG1CQUFtQlQ7UUFDdkI7SUFDSjtJQUVBLFNBQVNjLHNCQUFzQkMsSUFBSSxFQUFFQyxVQUFVO1FBQzNDLE1BQU1DLGFBQWFGLEtBQUtHLEdBQUcsQ0FBQyxDQUFDQyxHQUFHQyxHQUFHQztZQUMvQixJQUFJRCxJQUFJSixhQUFhLEdBQUcsT0FBTztZQUMvQixNQUFNTSxTQUFTRCxJQUFJRSxLQUFLLENBQUNILElBQUtKLENBQUFBLGFBQWEsSUFBSUksSUFBSTtZQUNuRCxPQUFPRSxPQUFPRSxNQUFNLENBQUMsQ0FBQ0MsS0FBS0MsTUFBUUQsTUFBTUMsS0FBSyxLQUFLSixPQUFPZixNQUFNO1FBQ3BFO1FBRUFv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V3BpXFxSZWd1bGFybHlcXENvdXJzZXNcXFNyXFwyMDI0X0NfVGVybVxcQ1M0MjQxXFxIV1xcZmluYWwtcHJvamVjdC1rZXJtaXQtdGhlLWZyb2dcXHNyY1xcYXBwXFxkYXRhVmlzXFxUcmVuZEFuYUluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcclxuXHJcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xyXG5jb25zdCBkMyA9IGF3YWl0IGltcG9ydCgnZDMnKTtcclxuaW1wb3J0IFRyZW5kQW5hVGltZSBmcm9tICcuL1RyZW5kQW5hVGltZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTb2x2ZVRpbWVUcmVuZCh7IHNvbHZlcyB9KSB7XHJcbiAgICBjb25zdCBjb250YWluZXJSZWYgPSB1c2VSZWYobnVsbCk7XHJcblxyXG4gICAgY29uc3QgW3Nob3dJbmRleFZpZXcsIHNldFNob3dJbmRleFZpZXddID0gdXNlU3RhdGUoZmFsc2UpO1xyXG5cclxuICAgIGlmIChzaG93SW5kZXhWaWV3KSB7XHJcbiAgICAgICAgcmV0dXJuIDxTb2x2ZVRpbWVUcmVuZCBzb2x2ZXM9e3NvbHZlc30gLz47XHJcbiAgICB9XHJcblxyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBpZiAoIXNvbHZlcyB8fCAhQXJyYXkuaXNBcnJheShzb2x2ZXMpIHx8IHNvbHZlcy5sZW5ndGggPT09IDApIHJldHVybjsgLy8g8J+UpSBFbnN1cmUgc29sdmVzIGlzIHZhbGlkXHJcbiAgICAgICAgaWYgKGNvbnRhaW5lclJlZi5jdXJyZW50KSB7XHJcbiAgICAgICAgICAgIGRyYXdTb2x2ZVRpbWVUcmVuZChzb2x2ZXMpO1xyXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoKSA9PiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcclxuICAgIH0sIFtzb2x2ZXNdKTtcclxuXHJcbiAgICBmdW5jdGlvbiBoYW5kbGVSZXNpemUoKSB7XHJcbiAgICAgICAgaWYgKGNvbnRhaW5lclJlZi5jdXJyZW50KSB7XHJcbiAgICAgICAgICAgIGRyYXdTb2x2ZVRpbWVUcmVuZChzb2x2ZXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjb21wdXRlUm9sbGluZ0F2ZXJhZ2UoZGF0YSwgd2luZG93U2l6ZSkge1xyXG4gICAgICAgIGNvbnN0IHJvbGxpbmdBdmcgPSBkYXRhLm1hcCgoXywgaSwgYXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpIDwgd2luZG93U2l6ZSAtIDEpIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICBjb25zdCBzdWJzZXQgPSBhcnIuc2xpY2UoaSAtICh3aW5kb3dTaXplIC0gMSksIGkgKyAxKTtcclxuICAgICAgICAgICAgcmV0dXJuIHN1YnNldC5yZWR1Y2UoKHN1bSwgdmFsKSA9PiBzdW0gKyB2YWwsIDApIC8gc3Vic2V0Lmxlbmd0aDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coYFdpbmRvdyBTaXplOiAke3dpbmRvd1NpemV9YCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coYE9yaWdpbmFsIERhdGEgTGVuZ3RoOiAke2RhdGEubGVuZ3RofWApO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBSb2xsaW5nIEF2ZXJhZ2UgKCR7d2luZG93U2l6ZX0pIExlbmd0aDogJHtyb2xsaW5nQXZnLmxlbmd0aH1gKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhgRmlyc3QgVmFsdWVzOmAsIHJvbGxpbmdBdmcuc2xpY2UoMCwgMTUpKTsgLy8gQ2hlY2sgZmlyc3QgZmV3IHZhbHVlc1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGBMYXN0IFZhbHVlczpgLCByb2xsaW5nQXZnLnNsaWNlKC0xNSkpOyAvLyBDaGVjayBsYXN0IGZldyB2YWx1ZXNcclxuXHJcbiAgICAgICAgcmV0dXJuIHJvbGxpbmdBdmc7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZHJhd1NvbHZlVGltZVRyZW5kKGRhdGEpIHtcclxuICAgICAgICBpZiAoIWNvbnRhaW5lclJlZi5jdXJyZW50KSByZXR1cm47XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGQzLnNlbGVjdChjb250YWluZXJSZWYuY3VycmVudCk7XHJcbiAgICAgICAgY29udGFpbmVyLnNlbGVjdEFsbCgnKicpLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICBjb25zdCB3aWR0aCA9IGNvbnRhaW5lclJlZi5jdXJyZW50LmNsaWVudFdpZHRoIHx8IDgwMDtcclxuICAgICAgICBjb25zdCBoZWlnaHQgPSBjb250YWluZXJSZWYuY3VycmVudC5jbGllbnRIZWlnaHQgfHwgNTAwO1xyXG5cclxuICAgICAgICBjb25zdCBzdmcgPSBjb250YWluZXIuYXBwZW5kKCdzdmcnKVxyXG4gICAgICAgICAgICAuYXR0cignd2lkdGgnLCAnMTAwJScpXHJcbiAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCAnMTAwJScpXHJcbiAgICAgICAgICAgIC5hdHRyKCd2aWV3Qm94JywgYDAgMCAke3dpZHRofSAke2hlaWdodH1gKVxyXG4gICAgICAgICAgICAuYXR0cigncHJlc2VydmVBc3BlY3RSYXRpbycsICd4TWlkWU1pZCBtZWV0Jyk7XHJcblxyXG4gICAgICAgIGNvbnN0IHRpbWVzID0gZGF0YS5tYXAoKHNvbHZlKSA9PiBzb2x2ZS50aW1lIC8gMTAwMCk7XHJcbiAgICAgICAgY29uc3QgYW81ID0gY29tcHV0ZVJvbGxpbmdBdmVyYWdlKHRpbWVzLCA1KTtcclxuICAgICAgICBjb25zdCBhbzEyID0gY29tcHV0ZVJvbGxpbmdBdmVyYWdlKHRpbWVzLCAxMik7XHJcblxyXG4gICAgICAgIGxldCB4U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpXHJcbiAgICAgICAgICAgIC5kb21haW4oWzAsIHRpbWVzLmxlbmd0aCAtIDFdKVxyXG4gICAgICAgICAgICAucmFuZ2UoWzUwLCB3aWR0aCAtIDUwXSk7XHJcblxyXG4gICAgICAgIGxldCB5U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpXHJcbiAgICAgICAgICAgIC5kb21haW4oW2QzLm1heCh0aW1lcyksIGQzLm1pbih0aW1lcyldKSAgLy8gRmxpcCBkb21haW4gdG8gbWF0Y2ggU1ZHIGNvb3Jkc1xyXG4gICAgICAgICAgICAucmFuZ2UoWzUwLCBoZWlnaHQgLSA1MF0pOyAvLyBFbnN1cmUgYm90dG9tIGlzIGxvd2VyIG9uIHRoZSBzY3JlZW5cclxuXHJcbiAgICAgICAgY29uc3QgeEF4aXMgPSBzdmcuYXBwZW5kKCdnJylcclxuICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3gtYXhpcycpXHJcbiAgICAgICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKDAsICR7aGVpZ2h0IC0gNTB9KWApXHJcbiAgICAgICAgICAgIC5jYWxsKGQzLmF4aXNCb3R0b20oeFNjYWxlKSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHlBeGlzID0gc3ZnLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd5LWF4aXMnKVxyXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSg1MCwgMClgKVxyXG4gICAgICAgICAgICAuY2FsbChkMy5heGlzTGVmdCh5U2NhbGUpKTtcclxuXHJcbiAgICAgICAgY29uc3QgZ3JpZEdyb3VwID0gc3ZnLmFwcGVuZCgnZycpLmF0dHIoJ2NsYXNzJywgJ2dyaWQnKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZHJhd0dyaWQoeFNjYWxlLCB5U2NhbGUpIHtcclxuICAgICAgICAgICAgZ3JpZEdyb3VwLnNlbGVjdEFsbCgnKicpLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgLy8gSG9yaXpvbnRhbCBncmlkIGxpbmVzXHJcbiAgICAgICAgICAgIGdyaWRHcm91cC5zZWxlY3RBbGwoJy5ob3Jpem9udGFsLWdyaWQnKVxyXG4gICAgICAgICAgICAgICAgLmRhdGEoeVNjYWxlLnRpY2tzKDEwKSlcclxuICAgICAgICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKCdsaW5lJylcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdob3Jpem9udGFsLWdyaWQnKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3gxJywgNTApXHJcbiAgICAgICAgICAgICAgICAuYXR0cigneDInLCB3aWR0aCAtIDUwKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3kxJywgZCA9PiB5U2NhbGUoZCkpXHJcbiAgICAgICAgICAgICAgICAuYXR0cigneTInLCBkID0+IHlTY2FsZShkKSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdzdHJva2UnLCAnI2NjYycpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignc3Ryb2tlLWRhc2hhcnJheScsICc0LDQnKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFZlcnRpY2FsIGdyaWQgbGluZXNcclxuICAgICAgICAgICAgZ3JpZEdyb3VwLnNlbGVjdEFsbCgnLnZlcnRpY2FsLWdyaWQnKVxyXG4gICAgICAgICAgICAgICAgLmRhdGEoeFNjYWxlLnRpY2tzKDEwKSlcclxuICAgICAgICAgICAgICAgIC5lbnRlcigpXHJcbiAgICAgICAgICAgICAgICAuYXBwZW5kKCdsaW5lJylcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd2ZXJ0aWNhbC1ncmlkJylcclxuICAgICAgICAgICAgICAgIC5hdHRyKCd4MScsIGQgPT4geFNjYWxlKGQpKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3gyJywgZCA9PiB4U2NhbGUoZCkpXHJcbiAgICAgICAgICAgICAgICAuYXR0cigneTEnLCA1MClcclxuICAgICAgICAgICAgICAgIC5hdHRyKCd5MicsIGhlaWdodCAtIDUwKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3N0cm9rZScsICcjY2NjJylcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdzdHJva2UtZGFzaGFycmF5JywgJzQsNCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZHJhd0dyaWQoeFNjYWxlLCB5U2NhbGUpO1xyXG5cclxuICAgICAgICBjb25zdCB6b29tID0gZDMuem9vbSgpXHJcbiAgICAgICAgICAgIC5zY2FsZUV4dGVudChbMC41LCA1XSlcclxuICAgICAgICAgICAgLnRyYW5zbGF0ZUV4dGVudChbWzAsIDBdLCBbd2lkdGgsIGhlaWdodF1dKVxyXG4gICAgICAgICAgICAub24oJ3pvb20nLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRyYW5zZm9ybSA9IGV2ZW50LnRyYW5zZm9ybTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1hTY2FsZSA9IHRyYW5zZm9ybS5yZXNjYWxlWCh4U2NhbGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV3WVNjYWxlID0gdHJhbnNmb3JtLnJlc2NhbGVZKHlTY2FsZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGFsbCBwbG90c1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlUGxvdChuZXdYU2NhbGUsIG5ld1lTY2FsZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGF4ZXNcclxuICAgICAgICAgICAgICAgIHhBeGlzLmNhbGwoZDMuYXhpc0JvdHRvbShuZXdYU2NhbGUpKTtcclxuICAgICAgICAgICAgICAgIHlBeGlzLmNhbGwoZDMuYXhpc0xlZnQobmV3WVNjYWxlKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIGdyaWQgd2l0aCBuZXcgc2NhbGVzXHJcbiAgICAgICAgICAgICAgICBkcmF3R3JpZChuZXdYU2NhbGUsIG5ld1lTY2FsZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICBzdmcuY2FsbCh6b29tKTtcclxuXHJcbiAgICAgICAgLy8g4pyFIEFkZCBMZWdlbmRzIChCZWxvdyBBdXRvc2NhbGUgQnV0dG9uKVxyXG4gICAgICAgIGNvbnN0IGxlZ2VuZCA9IHN2Zy5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3dpZHRoIC0gMTIwfSwgODApYCk7IC8vIOKshyBNb3ZlcyBsZWdlbmQgbG93ZXIgdW5kZXIgYnV0dG9uXHJcblxyXG4gICAgICAgIGNvbnN0IGxlZ2VuZEl0ZW1zID0gW1xyXG4gICAgICAgICAgICB7IGNvbG9yOiAnYmx1ZScsIGxhYmVsOiAnU2luZ2xlJyB9LFxyXG4gICAgICAgICAgICB7IGNvbG9yOiAnZ3JlZW4nLCBsYWJlbDogJ0FPNScgfSxcclxuICAgICAgICAgICAgeyBjb2xvcjogJ3JlZCcsIGxhYmVsOiAnQU8xMicgfVxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIGxlZ2VuZEl0ZW1zLmZvckVhY2goKGl0ZW0sIGkpID0+IHtcclxuICAgICAgICAgICAgbGVnZW5kLmFwcGVuZCgncmVjdCcpXHJcbiAgICAgICAgICAgICAgICAuYXR0cigneCcsIDApXHJcbiAgICAgICAgICAgICAgICAuYXR0cigneScsIGkgKiAyMClcclxuICAgICAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIDE1KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIDE1KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCBpdGVtLmNvbG9yKTtcclxuXHJcbiAgICAgICAgICAgIGxlZ2VuZC5hcHBlbmQoJ3RleHQnKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3gnLCAyMClcclxuICAgICAgICAgICAgICAgIC5hdHRyKCd5JywgaSAqIDIwICsgMTIpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignZmlsbCcsICdibGFjaycpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignZm9udC1zaXplJywgJzEycHgnKVxyXG4gICAgICAgICAgICAgICAgLnRleHQoaXRlbS5sYWJlbCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGF1dG9zY2FsZShldmVudCkge1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBTdG9wIGRlZmF1bHQgem9vbSBiZWhhdmlvclxyXG4gICAgICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTsgLy8gUHJldmVudCBmdXJ0aGVyIGV2ZW50IHByb3BhZ2F0aW9uXHJcblxyXG4gICAgICAgICAgICBzdmcudHJhbnNpdGlvbigpXHJcbiAgICAgICAgICAgICAgICAuZHVyYXRpb24oNTAwKVxyXG4gICAgICAgICAgICAgICAgLmNhbGwoem9vbS50cmFuc2Zvcm0sIGQzLnpvb21JZGVudGl0eSk7IC8vIFJlc2V0IHRvIG9yaWdpbmFsIHpvb20gc3RhdGVcclxuICAgICAgICB9XHJcblxyXG4vLyBFbnN1cmUgZXZlbnQgaXMgcGFzc2VkIHRvIGF1dG9zY2FsZVxyXG4gICAgICAgIHN2Zy5vbignZGJsY2xpY2snLCAoZXZlbnQpID0+IGF1dG9zY2FsZShldmVudCkpO1xyXG5cclxuLy8gQWxzbyBleHBsaWNpdGx5IGRpc2FibGUgem9vbSBvbiBkb3VibGUtY2xpY2sgdG8gcHJldmVudCB6b29taW5nIGluXHJcbiAgICAgICAgc3ZnLmNhbGwoem9vbSkub24oXCJkYmxjbGljay56b29tXCIsIG51bGwpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiB1cGRhdGVQbG90KG5ld1hTY2FsZSwgbmV3WVNjYWxlKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi8J+UhCBVcGRhdGluZyBQbG90IHdpdGggTmV3IFNjYWxlczpcIik7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi8J+foiBOZXcgWCBTY2FsZSBEb21haW46XCIsIG5ld1hTY2FsZS5kb21haW4oKSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi8J+foiBOZXcgWSBTY2FsZSBEb21haW46XCIsIG5ld1lTY2FsZS5kb21haW4oKSk7XHJcblxyXG4gICAgICAgICAgICAvLyDinIUgRW5zdXJlIHRoYXQgdGhlIEFPNSBhbmQgQU8xMiBwb2ludHMgYXJlIGNvcnJlY3RseSBib3VuZFxyXG4gICAgICAgICAgICBjb25zdCBhbzVTZWxlY3Rpb24gPSBzdmcuc2VsZWN0QWxsKCcucG9pbnQtYW81JylcclxuICAgICAgICAgICAgICAgIC5kYXRhKGFvNS5tYXAoKHZhbCwgaSkgPT4gKHsgeDogaSwgeTogdmFsIH0pKSwgZCA9PiBkLngpOyAvLyBFbnN1cmUgdW5pcXVlIGtleSBiaW5kaW5nXHJcblxyXG4gICAgICAgICAgICBjb25zdCBhbzEyU2VsZWN0aW9uID0gc3ZnLnNlbGVjdEFsbCgnLnBvaW50LWFvMTInKVxyXG4gICAgICAgICAgICAgICAgLmRhdGEoYW8xMi5tYXAoKHZhbCwgaSkgPT4gKHsgeDogaSwgeTogdmFsIH0pKSwgZCA9PiBkLngpOyAvLyBFbnN1cmUgdW5pcXVlIGtleSBiaW5kaW5nXHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhg4pyUIFRvdGFsIEFPNSBQb2ludHMgU2VsZWN0ZWQ6ICR7YW81U2VsZWN0aW9uLnNpemUoKX0gKEV4cGVjdGVkOiAke2FvNS5sZW5ndGh9KWApO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhg4pyUIFRvdGFsIEFPMTIgUG9pbnRzIFNlbGVjdGVkOiAke2FvMTJTZWxlY3Rpb24uc2l6ZSgpfSAoRXhwZWN0ZWQ6ICR7YW8xMi5sZW5ndGh9KWApO1xyXG5cclxuICAgICAgICAgICAgaWYgKGFvNVNlbGVjdGlvbi5zaXplKCkgPT09IDApIGNvbnNvbGUud2FybihcIuKaoO+4jyBObyBBTzUgcG9pbnRzIGZvdW5kIGluIHVwZGF0ZVBsb3QhXCIpO1xyXG4gICAgICAgICAgICBpZiAoYW8xMlNlbGVjdGlvbi5zaXplKCkgPT09IDApIGNvbnNvbGUud2FybihcIuKaoO+4jyBObyBBTzEyIHBvaW50cyBmb3VuZCBpbiB1cGRhdGVQbG90IVwiKTtcclxuXHJcbiAgICAgICAgICAgIC8vIOKchSBVcGRhdGUgYWxsIEFPNSBwb2ludHNcclxuICAgICAgICAgICAgYW81U2VsZWN0aW9uLmF0dHIoJ2N4JywgZCA9PiBuZXdYU2NhbGUoZC54KSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdjeScsIGQgPT4gbmV3WVNjYWxlKGQueSkpO1xyXG5cclxuICAgICAgICAgICAgLy8g4pyFIFVwZGF0ZSBhbGwgQU8xMiBwb2ludHNcclxuICAgICAgICAgICAgYW8xMlNlbGVjdGlvbi5hdHRyKCdjeCcsIGQgPT4gbmV3WFNjYWxlKGQueCkpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignY3knLCBkID0+IG5ld1lTY2FsZShkLnkpKTtcclxuXHJcbiAgICAgICAgICAgIC8vIOKchSBEZWJ1Z2dpbmc6IEVuc3VyZSBsYXN0IEFPNSAmIEFPMTIgcG9pbnRzIHVwZGF0ZSBjb3JyZWN0bHlcclxuICAgICAgICAgICAgYW81U2VsZWN0aW9uLmVhY2goZnVuY3Rpb24gKGQsIGkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpID49IGFvNS5sZW5ndGggLSA0KSB7IC8vIFVzZSBgYW81Lmxlbmd0aGAgdG8gY29ycmVjdGx5IGl0ZXJhdGVcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhg8J+foiBBTzUgUG9pbnQgJHtpfTogeD0ke25ld1hTY2FsZShkLngpfSwgeT0ke25ld1lTY2FsZShkLnkpfWApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGFvMTJTZWxlY3Rpb24uZWFjaChmdW5jdGlvbiAoZCwgaSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPj0gYW8xMi5sZW5ndGggLSAxMikgeyAvLyBVc2UgYGFvMTIubGVuZ3RoYCB0byBjb3JyZWN0bHkgaXRlcmF0ZVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGDwn5S0IEFPMTIgUG9pbnQgJHtpfTogeD0ke25ld1hTY2FsZShkLngpfSwgeT0ke25ld1lTY2FsZShkLnkpfWApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIOKchSBVcGRhdGUgc2luZ2xlIHNvbHZlIHBvaW50c1xyXG4gICAgICAgICAgICBzdmcuc2VsZWN0QWxsKCcucG9pbnQtc2luZ2xlJylcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdjeCcsIChfLCBpKSA9PiBuZXdYU2NhbGUoaSkpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignY3knLCAoXywgaSkgPT4gbmV3WVNjYWxlKHRpbWVzW2ldKSk7XHJcblxyXG4gICAgICAgICAgICAvLyDinIUgVXBkYXRlIHNpbmdsZSBzb2x2ZSBsaW5lXHJcbiAgICAgICAgICAgIHN2Zy5zZWxlY3RBbGwoJy5saW5lLXNpbmdsZScpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignZCcsIGQzLmxpbmUoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5jdXJ2ZShkMy5jdXJ2ZU1vbm90b25lWClcclxuICAgICAgICAgICAgICAgICAgICAueCgoXywgaSkgPT4gbmV3WFNjYWxlKGkpKVxyXG4gICAgICAgICAgICAgICAgICAgIC55KChfLCBpKSA9PiBuZXdZU2NhbGUodGltZXNbaV0pKVxyXG4gICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgIC8vIOKchSBFbnN1cmUgQU81IGxpbmUgYWxpZ25zIGR5bmFtaWNhbGx5XHJcbiAgICAgICAgICAgIHN2Zy5zZWxlY3RBbGwoJy5saW5lLWFvNScpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignZCcsIGQzLmxpbmUoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5jdXJ2ZShkMy5jdXJ2ZU1vbm90b25lWClcclxuICAgICAgICAgICAgICAgICAgICAuZGVmaW5lZCgoXywgaSkgPT4gaSA+PSA0ICYmIGFvNVtpXSAhPT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAueCgoXywgaSkgPT4gbmV3WFNjYWxlKGkpKVxyXG4gICAgICAgICAgICAgICAgICAgIC55KChfLCBpKSA9PiBuZXdZU2NhbGUoYW81W2ldKSlcclxuICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAvLyDinIUgRW5zdXJlIEFPMTIgbGluZSBhbGlnbnMgZHluYW1pY2FsbHlcclxuICAgICAgICAgICAgc3ZnLnNlbGVjdEFsbCgnLmxpbmUtYW8xMicpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignZCcsIGQzLmxpbmUoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5jdXJ2ZShkMy5jdXJ2ZU1vbm90b25lWClcclxuICAgICAgICAgICAgICAgICAgICAuZGVmaW5lZCgoXywgaSkgPT4gaSA+PSAxMSAmJiBhbzEyW2ldICE9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIC54KChfLCBpKSA9PiBuZXdYU2NhbGUoaSkpXHJcbiAgICAgICAgICAgICAgICAgICAgLnkoKF8sIGkpID0+IG5ld1lTY2FsZShhbzEyW2ldKSlcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdmcuYXBwZW5kKCdwYXRoJylcclxuICAgICAgICAgICAgLmRhdHVtKHRpbWVzKVxyXG4gICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnbGluZSBsaW5lLXNpbmdsZScpXHJcbiAgICAgICAgICAgIC5hdHRyKCdzdHJva2UnLCAnYmx1ZScpXHJcbiAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgJ25vbmUnKVxyXG4gICAgICAgICAgICAuYXR0cignc3Ryb2tlLXdpZHRoJywgMik7XHJcblxyXG4gICAgICAgIHN2Zy5hcHBlbmQoJ3BhdGgnKVxyXG4gICAgICAgICAgICAuZGF0dW0oYW81KVxyXG4gICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnbGluZSBsaW5lLWFvNScpXHJcbiAgICAgICAgICAgIC5hdHRyKCdzdHJva2UnLCAnZ3JlZW4nKVxyXG4gICAgICAgICAgICAuYXR0cignZmlsbCcsICdub25lJylcclxuICAgICAgICAgICAgLmF0dHIoJ3N0cm9rZS13aWR0aCcsIDIpO1xyXG5cclxuICAgICAgICBzdmcuYXBwZW5kKCdwYXRoJylcclxuICAgICAgICAgICAgLmRhdHVtKGFvMTIpXHJcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdsaW5lIGxpbmUtYW8xMicpXHJcbiAgICAgICAgICAgIC5hdHRyKCdzdHJva2UnLCAncmVkJylcclxuICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCAnbm9uZScpXHJcbiAgICAgICAgICAgIC5hdHRyKCdzdHJva2Utd2lkdGgnLCAyKTtcclxuXHJcbiAgICAgICAgY29uc3QgdG9vbHRpcCA9IGQzLnNlbGVjdChjb250YWluZXJSZWYuY3VycmVudCkuYXBwZW5kKCdkaXYnKVxyXG4gICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnYWJzb2x1dGUgYmctd2hpdGUgcC0yIGJvcmRlciByb3VuZGVkIHNoYWRvdyB0ZXh0LXNtJylcclxuICAgICAgICAgICAgLnN0eWxlKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpXHJcbiAgICAgICAgICAgIC5zdHlsZSgncG9zaXRpb24nLCAnYWJzb2x1dGUnKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2hvd1Rvb2x0aXAoZXZlbnQsIGkpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2luZ2xlVGltZSA9IHRpbWVzW2ldPy50b0ZpeGVkKDIpO1xyXG4gICAgICAgICAgICBjb25zdCBhbzVUaW1lID0gYW81W2ldICE9PSBudWxsID8gYW81W2ldPy50b0ZpeGVkKDIpIDogJy0nO1xyXG4gICAgICAgICAgICBjb25zdCBhbzEyVGltZSA9IGFvMTJbaV0gIT09IG51bGwgPyBhbzEyW2ldPy50b0ZpeGVkKDIpIDogJy0nO1xyXG5cclxuICAgICAgICAgICAgdG9vbHRpcC5odG1sKGBcclxuICAgICAgICAgICAgICAgIDxkaXY+PHN0cm9uZz5TaW5nbGU6PC9zdHJvbmc+ICR7c2luZ2xlVGltZX1zPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2PjxzdHJvbmc+QU81Ojwvc3Ryb25nPiAke2FvNVRpbWV9czwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdj48c3Ryb25nPkFPMTI6PC9zdHJvbmc+ICR7YW8xMlRpbWV9czwvZGl2PlxyXG4gICAgICAgICAgICBgKVxyXG4gICAgICAgICAgICAgICAgLnN0eWxlKCd2aXNpYmlsaXR5JywgJ3Zpc2libGUnKVxyXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdwb3NpdGlvbicsICdmaXhlZCcpXHJcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ2JhY2tncm91bmQnLCAnd2hpdGUnKVxyXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdwYWRkaW5nJywgJzZweCcpXHJcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ2JvcmRlcicsICcxcHggc29saWQgI2NjYycpXHJcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ2JvcmRlci1yYWRpdXMnLCAnNXB4JylcclxuICAgICAgICAgICAgICAgIC5zdHlsZSgnYm94LXNoYWRvdycsICcycHggMnB4IDEwcHggcmdiYSgwLCAwLCAwLCAwLjEpJylcclxuICAgICAgICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgJzEycHgnKVxyXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdwb2ludGVyLWV2ZW50cycsICdub25lJylcclxuICAgICAgICAgICAgICAgIC5zdHlsZSgnei1pbmRleCcsICcxMDAwJylcclxuICAgICAgICAgICAgICAgIC5zdHlsZSgndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLCAtNTAlKScpO1xyXG5cclxuICAgICAgICAgICAgdG9vbHRpcC5zdHlsZSgnbGVmdCcsIGAke2V2ZW50LnBhZ2VYICsgMTJ9cHhgKS5zdHlsZSgndG9wJywgYCR7ZXZlbnQucGFnZVl9cHhgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGhpZGVUb29sdGlwKCkge1xyXG4gICAgICAgICAgICB0b29sdGlwLnN0eWxlKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHVwZGF0ZVBsb3QoeFNjYWxlLCB5U2NhbGUpOyAgLy8g4pyFIEZvcmNlIHJlbmRlciBhZnRlciBpbml0aWFsaXphdGlvblxyXG4gICAgICAgIH0sIDEwMCk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGFkZFBvaW50cyhkYXRhLCBjb2xvciwgY2xhc3NOYW1lLCB2YWx1ZUFjY2Vzc29yLCBtaW5JbmRleCwgbGFiZWwpIHtcclxuICAgICAgICAgICAgLy8g4pyFIEVuc3VyZSB0aGF0IHdlIGNvcnJlY3RseSBpdGVyYXRlIG92ZXIgdGhlIGZ1bGwgZGF0YXNldFxyXG4gICAgICAgICAgICBjb25zdCB2YWxpZFBvaW50cyA9IGRhdGFcclxuICAgICAgICAgICAgICAgIC5tYXAoKHZhbCwgaSkgPT4gKHsgeDogaSwgeTogdmFsdWVBY2Nlc3NvcihpKSB9KSlcclxuICAgICAgICAgICAgICAgIC5maWx0ZXIoZCA9PiBkLnkgIT09IG51bGwgJiYgZC54ID49IG1pbkluZGV4KTsgLy8g4pyFIFJlbW92ZWQgeCA8IHRpbWVzLmxlbmd0aCBjb25zdHJhaW50XHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgXFxu8J+foiBBZGRpbmcgUG9pbnRzIGZvciAke2xhYmVsfSB8IENsYXNzOiAke2NsYXNzTmFtZX0gfCBNaW5JbmRleDogJHttaW5JbmRleH1gKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYOKclCBWYWxpZCBQb2ludHMgQ291bnQ6ICR7dmFsaWRQb2ludHMubGVuZ3RofWApO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhg8J+TjSBGaXJzdCA1IFBvaW50czpgLCB2YWxpZFBvaW50cy5zbGljZSgwLCA1KSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGDwn5ONIExhc3QgNSBQb2ludHM6YCwgdmFsaWRQb2ludHMuc2xpY2UoLTUpKTtcclxuXHJcbiAgICAgICAgICAgIHZhbGlkUG9pbnRzLmZvckVhY2goKHBvaW50LCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgICAgICAgICAgICBg8J+UtSAke2xhYmVsfSBQb2ludCAke2kgKyBtaW5JbmRleH06IFJhd1g9JHtwb2ludC54fSwgU2NhbGVkWD0ke3hTY2FsZShwb2ludC54KX0sIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGBSYXdZPSR7cG9pbnQueS50b0ZpeGVkKDMpfSwgU2NhbGVkWT0ke3lTY2FsZShwb2ludC55KS50b0ZpeGVkKDIpfWBcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gRW5zdXJlIGRhdGEgYmluZGluZyBpcyBkb25lIGNvcnJlY3RseVxyXG4gICAgICAgICAgICBzdmcuc2VsZWN0QWxsKGAuJHtjbGFzc05hbWV9YClcclxuICAgICAgICAgICAgICAgIC5kYXRhKHZhbGlkUG9pbnRzLCBkID0+IGQueCkgLy8gRW5zdXJlIHVuaXF1ZSBrZXkgYmluZGluZ1xyXG4gICAgICAgICAgICAgICAgLmpvaW4oXCJjaXJjbGVcIikgLy8gRW5zdXJlIHByb3BlciBiaW5kaW5nXHJcbiAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCBgcG9pbnQgJHtjbGFzc05hbWV9YClcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdjeCcsIGQgPT4geFNjYWxlKGQueCkpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignY3knLCBkID0+IHlTY2FsZShkLnkpKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3InLCA1KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCBjb2xvcilcclxuICAgICAgICAgICAgICAgIC5vbignbW91c2VvdmVyJywgKGV2ZW50LCBkKSA9PiBzaG93VG9vbHRpcChldmVudCwgZC54KSlcclxuICAgICAgICAgICAgICAgIC5vbignbW91c2VvdXQnLCBoaWRlVG9vbHRpcCk7XHJcbiAgICAgICAgfVxyXG5cclxuLy8g4pyFIEVuc3VyZSBBTzUgJiBBTzEyIHBvaW50cyBhcmUgZnVsbHkgYWRkZWQgYmVmb3JlIHVwZGF0aW5nXHJcbiAgICAgICAgYWRkUG9pbnRzKHRpbWVzLCAnYmx1ZScsICdwb2ludC1zaW5nbGUnLCAoaSkgPT4gdGltZXNbaV0sIDAsIFwiU2luZ2xlXCIpO1xyXG4gICAgICAgIGFkZFBvaW50cyhhbzUsICdncmVlbicsICdwb2ludC1hbzUnLCAoaSkgPT4gYW81W2ldLCA0LCBcIkFPNVwiKTtcclxuICAgICAgICBhZGRQb2ludHMoYW8xMiwgJ3JlZCcsICdwb2ludC1hbzEyJywgKGkpID0+IGFvMTJbaV0sIDExLCBcIkFPMTJcIik7XHJcblxyXG4gICAgICAgIGNvbnN0IGNvbnRyb2xzID0gZDMuc2VsZWN0KGNvbnRhaW5lclJlZi5jdXJyZW50KS5hcHBlbmQoJ2RpdicpXHJcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdhYnNvbHV0ZSB0b3AtMiByaWdodC0yIGJnLXdoaXRlIHAtMiByb3VuZGVkIHNoYWRvdycpO1xyXG5cclxuICAgICAgICBjb250cm9scy5hcHBlbmQoJ2J1dHRvbicpXHJcbiAgICAgICAgICAgIC50ZXh0KCdBdXRvc2NhbGUnKVxyXG4gICAgICAgICAgICAuc3R5bGUoJ21hcmdpbi1yaWdodCcsICc1cHgnKVxyXG4gICAgICAgICAgICAub24oJ2NsaWNrJywgYXV0b3NjYWxlKTtcclxuXHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgIHJlZj17Y29udGFpbmVyUmVmfVxyXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJ3LXNjcmVlbiBoLVtjYWxjKDEwMHZoLTEwMHB4KV0gYmctd2hpdGUgcmVsYXRpdmVcIlxyXG4gICAgICAgID48L2Rpdj5cclxuICAgICk7XHJcbn0iXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlUmVmIiwiZDMiLCJUcmVuZEFuYVRpbWUiLCJTb2x2ZVRpbWVUcmVuZCIsInNvbHZlcyIsImNvbnRhaW5lclJlZiIsInNob3dJbmRleFZpZXciLCJzZXRTaG93SW5kZXhWaWV3IiwidXNlU3RhdGUiLCJBcnJheSIsImlzQXJyYXkiLCJsZW5ndGgiLCJjdXJyZW50IiwiZHJhd1NvbHZlVGltZVRyZW5kIiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImhhbmRsZVJlc2l6ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjb21wdXRlUm9sbGluZ0F2ZXJhZ2UiLCJkYXRhIiwid2luZG93U2l6ZSIsInJvbGxpbmdBdmciLCJtYXAiLCJfIiwiaSIsImFyciIsInN1YnNldCIsInNsaWNlIiwicmVkdWNlIiwic3VtIiwidmFsIiwiY29uc29sZSIsImxvZyIsImNvbnRhaW5lciIsInNlbGVjdCIsInNlbGVjdEFsbCIsInJlbW92ZSIsIndpZHRoIiwiY2xpZW50V2lkdGgiLCJoZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJzdmciLCJhcHBlbmQiLCJhdHRyIiwidGltZXMiLCJzb2x2ZSIsInRpbWUiLCJhbzUiLCJhbzEyIiwieFNjYWxlIiwic2NhbGVMaW5lYXIiLCJkb21haW4iLCJyYW5nZSIsInlTY2FsZSIsIm1heCIsIm1pbiIsInhBeGlzIiwiY2FsbCIsImF4aXNCb3R0b20iLCJ5QXhpcyIsImF4aXNMZWZ0IiwiZ3JpZEdyb3VwIiwiZHJhd0dyaWQiLCJ0aWNrcyIsImVudGVyIiwiZCIsInpvb20iLCJzY2FsZUV4dGVudCIsInRyYW5zbGF0ZUV4dGVudCIsIm9uIiwiZXZlbnQiLCJ0cmFuc2Zvcm0iLCJuZXdYU2NhbGUiLCJyZXNjYWxlWCIsIm5ld1lTY2FsZSIsInJlc2NhbGVZIiwidXBkYXRlUGxvdCIsImxlZ2VuZCIsImxlZ2VuZEl0ZW1zIiwiY29sb3IiLCJsYWJlbCIsImZvckVhY2giLCJpdGVtIiwidGV4dCIsImF1dG9zY2FsZSIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwidHJhbnNpdGlvbiIsImR1cmF0aW9uIiwiem9vbUlkZW50aXR5IiwiYW81U2VsZWN0aW9uIiwieCIsInkiLCJhbzEyU2VsZWN0aW9uIiwic2l6ZSIsIndhcm4iLCJlYWNoIiwibGluZSIsImN1cnZlIiwiY3VydmVNb25vdG9uZVgiLCJkZWZpbmVkIiwiZGF0dW0iLCJ0b29sdGlwIiwic3R5bGUiLCJzaG93VG9vbHRpcCIsInNpbmdsZVRpbWUiLCJ0b0ZpeGVkIiwiYW81VGltZSIsImFvMTJUaW1lIiwiaHRtbCIsInBhZ2VYIiwicGFnZVkiLCJoaWRlVG9vbHRpcCIsInNldFRpbWVvdXQiLCJhZGRQb2ludHMiLCJjbGFzc05hbWUiLCJ2YWx1ZUFjY2Vzc29yIiwibWluSW5kZXgiLCJ2YWxpZFBvaW50cyIsImZpbHRlciIsInBvaW50Iiwiam9pbiIsImNvbnRyb2xzIiwiZGl2IiwicmVmIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/dataVis/TrendAnaIndex.js\n"));

/***/ })

});
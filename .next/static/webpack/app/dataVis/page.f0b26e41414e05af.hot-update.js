"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dataVis/page",{

/***/ "(app-pages-browser)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"944107f35003\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyJFOlxcV3BpXFxSZWd1bGFybHlcXENvdXJzZXNcXFNyXFwyMDI0X0NfVGVybVxcQ1M0MjQxXFxIV1xcZmluYWwtcHJvamVjdC1rZXJtaXQtdGhlLWZyb2dcXHNyY1xcYXBwXFxnbG9iYWxzLmNzcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjk0NDEwN2YzNTAwM1wiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/dataVis/SolveDen.js":
/*!*************************************!*\
  !*** ./src/app/dataVis/SolveDen.js ***!
  \*************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SolveDensity)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\nconst d3 = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_d3_src_index_js\").then(__webpack_require__.bind(__webpack_require__, /*! d3 */ \"(app-pages-browser)/./node_modules/d3/src/index.js\"));\nfunction SolveDensity(param) {\n    let { solves } = param;\n    _s();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"SolveDensity.useEffect\": ()=>{\n            if (containerRef.current && solves.length > 0) {\n                drawSolveDensity(solves);\n                window.addEventListener('resize', handleResize);\n            }\n            return ({\n                \"SolveDensity.useEffect\": ()=>window.removeEventListener('resize', handleResize)\n            })[\"SolveDensity.useEffect\"];\n        }\n    }[\"SolveDensity.useEffect\"], [\n        solves\n    ]);\n    function handleResize() {\n        if (containerRef.current) {\n            drawSolveDensity(solves);\n        }\n    }\n    function drawSolveDensity(data) {\n        if (!containerRef.current) return; // Ensure containerRef is available\n        const container = d3.select(containerRef.current);\n        container.selectAll('*').remove(); // Clear previous SVG\n        // Get dynamic width and height\n        const width = containerRef.current.clientWidth || 800;\n        const height = containerRef.current.clientHeight || 500;\n        const svg = container.append('svg').attr('width', '100%').attr('height', '100%').attr('viewBox', \"0 0 \".concat(width, \" \").concat(height)).attr('preserveAspectRatio', 'xMidYMid meet');\n        const times = data.map((solve)=>solve.time / 1000).sort((a, b)=>a - b);\n        const ao5 = computeRollingAverage(times, 5);\n        const ao12 = computeRollingAverage(times, 12);\n        const bandwidth = (d3.max(times) - d3.min(times)) / 20;\n        const densityData = kde(times, bandwidth);\n        const densityAo5 = kde(ao5.filter((d)=>d !== null), bandwidth);\n        const densityAo12 = kde(ao12.filter((d)=>d !== null), bandwidth);\n        const xScale = d3.scaleLinear().domain(d3.extent(densityData, (d)=>d[0])).range([\n            50,\n            width - 50\n        ]);\n        const yScale = d3.scaleLinear().domain([\n            0,\n            d3.max([\n                ...densityData,\n                ...densityAo5,\n                ...densityAo12\n            ], (d)=>d[1])\n        ]).range([\n            height - 50,\n            50\n        ]);\n        const area = d3.area().x((d)=>xScale(d[0])).y0(height - 50).y1((d)=>yScale(d[1]));\n        const line = d3.line().x((d)=>xScale(d[0])).y((d)=>yScale(d[1]));\n        svg.append('path').datum(densityData).attr('d', area).attr('fill', 'steelblue').attr('opacity', 0.5);\n        svg.append('path').datum(densityData).attr('d', line).attr('stroke', 'blue').attr('fill', 'none').attr('stroke-width', 2);\n        svg.append('path').datum(densityAo5).attr('d', area).attr('fill', 'green').attr('opacity', 0.5);\n        svg.append('path').datum(densityAo5).attr('d', line).attr('stroke', 'green').attr('fill', 'none').attr('stroke-width', 2);\n        svg.append('path').datum(densityAo12).attr('d', area).attr('fill', 'red').attr('opacity', 0.5);\n        svg.append('path').datum(densityAo12).attr('d', line).attr('stroke', 'red').attr('fill', 'none').attr('stroke-width', 2);\n        svg.append('text').attr('x', width / 2).attr('y', 20).attr('text-anchor', 'middle');\n        // .text('Solve Time Density');\n        svg.append('g').attr('transform', \"translate(0, \".concat(height - 50, \")\")).call(d3.axisBottom(xScale));\n        // Compute percentiles\n        const computePercentiles = (data)=>[\n                0.25,\n                0.50,\n                0.75\n            ].map((p)=>{\n                const index = Math.floor(p * data.length);\n                return data[index];\n            });\n        const percentilesSingle = computePercentiles(times);\n        const percentilesAo5 = computePercentiles(ao5.filter((d)=>d !== null));\n        const percentilesAo12 = computePercentiles(ao12.filter((d)=>d !== null));\n        // Draw dashed lines for all density plots\n        const drawDashedLines = (percentiles, density, strokeColor)=>{\n            percentiles.forEach((value)=>{\n                var _density_find;\n                const yMax = yScale(((_density_find = density.find((d)=>d[0] >= value)) === null || _density_find === void 0 ? void 0 : _density_find[1]) || 0);\n                svg.append('line').attr('x1', xScale(value)).attr('x2', xScale(value)).attr('y1', height - 50).attr('y2', yMax).attr('stroke', strokeColor).attr('stroke-dasharray', '4,2');\n            });\n        };\n        drawDashedLines(percentilesSingle, densityData, 'blue');\n        drawDashedLines(percentilesAo5, densityAo5, 'green');\n        drawDashedLines(percentilesAo12, densityAo12, 'red');\n        // Add legend\n        const legend = svg.append('g').attr('transform', \"translate(\".concat(width - 120, \", 40)\"));\n        const legendItems = [\n            {\n                color: 'blue',\n                label: 'Single'\n            },\n            {\n                color: 'green',\n                label: 'AO5'\n            },\n            {\n                color: 'red',\n                label: 'AO12'\n            }\n        ];\n        legendItems.forEach((item, i)=>{\n            legend.append('rect').attr('x', 0).attr('y', i * 20).attr('width', 15).attr('height', 15).attr('fill', item.color).attr('opacity', 0.5);\n            legend.append('text').attr('x', 20).attr('y', i * 20 + 12).attr('fill', 'black').attr('font-size', '12px').text(item.label);\n        });\n    }\n    function computeRollingAverage(data, windowSize) {\n        return data.map((_, i, arr)=>{\n            if (i < windowSize - 1) return null;\n            const subset = arr.slice(i - windowSize + 1, i + 1);\n            return subset.reduce((sum, val)=>sum + val, 0) / subset.length;\n        });\n    }\n    function kde(data, bandwidth) {\n        const kernel = (u)=>Math.exp(-0.5 * u * u) / Math.sqrt(2 * Math.PI);\n        const kernelDensityEstimator = (kernel, bandwidth, data)=>{\n            const xMin = d3.min(data) - bandwidth * 3;\n            const xMax = d3.max(data) + bandwidth * 3;\n            const xValues = d3.range(xMin, xMax, (xMax - xMin) / 100);\n            return xValues.map((x)=>{\n                return [\n                    x,\n                    d3.mean(data, (v)=>kernel((x - v) / bandwidth)) / bandwidth\n                ];\n            });\n        };\n        return kernelDensityEstimator(kernel, bandwidth, data);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: containerRef,\n        className: \"w-screen h-[calc(100vh-100px)] bg-white\"\n    }, void 0, false, {\n        fileName: \"E:\\\\Wpi\\\\Regularly\\\\Courses\\\\Sr\\\\2024_C_Term\\\\CS4241\\\\HW\\\\final-project-kermit-the-frog\\\\src\\\\app\\\\dataVis\\\\SolveDen.js\",\n        lineNumber: 150,\n        columnNumber: 9\n    }, this);\n}\n_s(SolveDensity, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = SolveDensity;\nvar _c;\n$RefreshReg$(_c, \"SolveDensity\");\n\n\n;\r\n    // Wrapped in an IIFE to avoid polluting the global scope\r\n    ;\r\n    (function () {\r\n        var _a, _b;\r\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\r\n        // to extract CSS. For backwards compatibility, we need to check we're in a\r\n        // browser context before continuing.\r\n        if (typeof self !== 'undefined' &&\r\n            // AMP / No-JS mode does not inject these helpers:\r\n            '$RefreshHelpers$' in self) {\r\n            // @ts-ignore __webpack_module__ is global\r\n            var currentExports = module.exports;\r\n            // @ts-ignore __webpack_module__ is global\r\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\r\n            // This cannot happen in MainTemplate because the exports mismatch between\r\n            // templating and execution.\r\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\r\n            // A module can be accepted automatically based on its exports, e.g. when\r\n            // it is a Refresh Boundary.\r\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\r\n                // Save the previous exports signature on update so we can compare the boundary\r\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\r\n                module.hot.dispose(function (data) {\r\n                    data.prevSignature =\r\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\r\n                });\r\n                // Unconditionally accept an update to this module, we'll check if it's\r\n                // still a Refresh Boundary later.\r\n                // @ts-ignore importMeta is replaced in the loader\r\n                module.hot.accept();\r\n                // This field is set when the previous version of this module was a\r\n                // Refresh Boundary, letting us know we need to check for invalidation or\r\n                // enqueue an update.\r\n                if (prevSignature !== null) {\r\n                    // A boundary can become ineligible if its exports are incompatible\r\n                    // with the previous exports.\r\n                    //\r\n                    // For example, if you add/remove/change exports, we'll want to\r\n                    // re-execute the importing modules, and force those components to\r\n                    // re-render. Similarly, if you convert a class component to a\r\n                    // function, we want to invalidate the boundary.\r\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\r\n                        module.hot.invalidate();\r\n                    }\r\n                    else {\r\n                        self.$RefreshHelpers$.scheduleUpdate();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Since we just executed the code for the module, it's possible that the\r\n                // new exports made it ineligible for being a boundary.\r\n                // We only care about the case when we were _previously_ a boundary,\r\n                // because we already accepted this update (accidental side effect).\r\n                var isNoLongerABoundary = prevSignature !== null;\r\n                if (isNoLongerABoundary) {\r\n                    module.hot.invalidate();\r\n                }\r\n            }\r\n        }\r\n    })();\r\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZGF0YVZpcy9Tb2x2ZURlbi5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBRTBDO0FBQzFDLE1BQU1FLEtBQUssTUFBTSw0TUFBWTtBQUVkLFNBQVNDLGFBQWEsS0FBVTtRQUFWLEVBQUVDLE1BQU0sRUFBRSxHQUFWOztJQUNqQyxNQUFNQyxlQUFlSiw2Q0FBTUEsQ0FBQztJQUU1QkQsZ0RBQVNBO2tDQUFDO1lBQ04sSUFBSUssYUFBYUMsT0FBTyxJQUFJRixPQUFPRyxNQUFNLEdBQUcsR0FBRztnQkFDM0NDLGlCQUFpQko7Z0JBQ2pCSyxPQUFPQyxnQkFBZ0IsQ0FBQyxVQUFVQztZQUN0QztZQUVBOzBDQUFPLElBQU1GLE9BQU9HLG1CQUFtQixDQUFDLFVBQVVEOztRQUN0RDtpQ0FBRztRQUFDUDtLQUFPO0lBRVgsU0FBU087UUFDTCxJQUFJTixhQUFhQyxPQUFPLEVBQUU7WUFDdEJFLGlCQUFpQko7UUFDckI7SUFDSjtJQUVBLFNBQVNJLGlCQUFpQkssSUFBSTtRQUMxQixJQUFJLENBQUNSLGFBQWFDLE9BQU8sRUFBRSxRQUFRLG1DQUFtQztRQUV0RSxNQUFNUSxZQUFZWixHQUFHYSxNQUFNLENBQUNWLGFBQWFDLE9BQU87UUFDaERRLFVBQVVFLFNBQVMsQ0FBQyxLQUFLQyxNQUFNLElBQUkscUJBQXFCO1FBRXhELCtCQUErQjtRQUMvQixNQUFNQyxRQUFRYixhQUFhQyxPQUFPLENBQUNhLFdBQVcsSUFBSTtRQUNsRCxNQUFNQyxTQUFTZixhQUFhQyxPQUFPLENBQUNlLFlBQVksSUFBSTtRQUVwRCxNQUFNQyxNQUFNUixVQUFVUyxNQUFNLENBQUMsT0FDeEJDLElBQUksQ0FBQyxTQUFTLFFBQ2RBLElBQUksQ0FBQyxVQUFVLFFBQ2ZBLElBQUksQ0FBQyxXQUFXLE9BQWdCSixPQUFURixPQUFNLEtBQVUsT0FBUEUsU0FDaENJLElBQUksQ0FBQyx1QkFBdUI7UUFFakMsTUFBTUMsUUFBUVosS0FBS2EsR0FB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QUVBLFNBQVNnQyxJQUFJMUIsSUFBSSxFQUFFc0IsU0FBUztRQUN4QixNQUFNdUQsU0FBUyxDQUFDQyxJQUFNN0IsS0FBSzhCLEdBQUcsQ0FBQyxDQUFDLE1BQU1ELElBQUlBLEtBQUs3QixLQUFLK0IsSUFBSSxDQUFDLElBQUkvQixLQUFLZ0MsRUFBRTtRQUNwRSxNQUFNQyx5QkFBeUIsQ0FBQ0wsUUFBUXZELFdBQVd0QjtZQUMvQyxNQUFNbUYsT0FBTzlGLEdBQUdtQyxHQUFHLENBQUN4QixRQUFRc0IsWUFBWTtZQUN4QyxNQUFNOEQsT0FBTy9GLEdBQUdrQyxHQUFHLENBQUN2QixRQUFRc0IsWUFBWTtZQUN4QyxNQUFNK0QsVUFBVWhHLEdBQUc4QyxLQUFLLENBQUNnRCxNQUFNQyxNQUFNLENBQUNBLE9BQU9ELElBQUcsSUFBSztZQUNyRCxPQUFPRSxRQUFReEUsR0FBRyxDQUFDLENBQUN5QjtnQkFDaEIsT0FBTztvQkFBQ0E7b0JBQUdqRCxHQUFHaUcsSUFBSSxDQUFDdEYsTUFBTSxDQUFDdUYsSUFBTVYsT0FBTyxDQUFDdkMsSUFBSWlELENBQUFBLElBQUtqRSxjQUFjQTtpQkFBVTtZQUM3RTtRQUNKO1FBQ0EsT0FBTzRELHVCQUF1QkwsUUFBUXZELFdBQVd0QjtJQUNyRDtJQUVBLHFCQUNJLDhEQUFDd0Y7UUFDR0MsS0FBS2pHO1FBQ0xrRyxXQUFVOzs7Ozs7QUFHdEI7R0FySndCcEc7S0FBQUEiLCJzb3VyY2VzIjpbIkU6XFxXcGlcXFJlZ3VsYXJseVxcQ291cnNlc1xcU3JcXDIwMjRfQ19UZXJtXFxDUzQyNDFcXEhXXFxmaW5hbC1wcm9qZWN0LWtlcm1pdC10aGUtZnJvZ1xcc3JjXFxhcHBcXGRhdGFWaXNcXFNvbHZlRGVuLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcclxuXHJcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmIH0gZnJvbSAncmVhY3QnO1xyXG5jb25zdCBkMyA9IGF3YWl0IGltcG9ydCgnZDMnKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFNvbHZlRGVuc2l0eSh7IHNvbHZlcyB9KSB7XHJcbiAgICBjb25zdCBjb250YWluZXJSZWYgPSB1c2VSZWYobnVsbCk7XHJcblxyXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcclxuICAgICAgICBpZiAoY29udGFpbmVyUmVmLmN1cnJlbnQgJiYgc29sdmVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgZHJhd1NvbHZlRGVuc2l0eShzb2x2ZXMpO1xyXG4gICAgICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAoKSA9PiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcclxuICAgIH0sIFtzb2x2ZXNdKTtcclxuXHJcbiAgICBmdW5jdGlvbiBoYW5kbGVSZXNpemUoKSB7XHJcbiAgICAgICAgaWYgKGNvbnRhaW5lclJlZi5jdXJyZW50KSB7XHJcbiAgICAgICAgICAgIGRyYXdTb2x2ZURlbnNpdHkoc29sdmVzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gZHJhd1NvbHZlRGVuc2l0eShkYXRhKSB7XHJcbiAgICAgICAgaWYgKCFjb250YWluZXJSZWYuY3VycmVudCkgcmV0dXJuOyAvLyBFbnN1cmUgY29udGFpbmVyUmVmIGlzIGF2YWlsYWJsZVxyXG5cclxuICAgICAgICBjb25zdCBjb250YWluZXIgPSBkMy5zZWxlY3QoY29udGFpbmVyUmVmLmN1cnJlbnQpO1xyXG4gICAgICAgIGNvbnRhaW5lci5zZWxlY3RBbGwoJyonKS5yZW1vdmUoKTsgLy8gQ2xlYXIgcHJldmlvdXMgU1ZHXHJcblxyXG4gICAgICAgIC8vIEdldCBkeW5hbWljIHdpZHRoIGFuZCBoZWlnaHRcclxuICAgICAgICBjb25zdCB3aWR0aCA9IGNvbnRhaW5lclJlZi5jdXJyZW50LmNsaWVudFdpZHRoIHx8IDgwMDtcclxuICAgICAgICBjb25zdCBoZWlnaHQgPSBjb250YWluZXJSZWYuY3VycmVudC5jbGllbnRIZWlnaHQgfHwgNTAwO1xyXG5cclxuICAgICAgICBjb25zdCBzdmcgPSBjb250YWluZXIuYXBwZW5kKCdzdmcnKVxyXG4gICAgICAgICAgICAuYXR0cignd2lkdGgnLCAnMTAwJScpXHJcbiAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCAnMTAwJScpXHJcbiAgICAgICAgICAgIC5hdHRyKCd2aWV3Qm94JywgYDAgMCAke3dpZHRofSAke2hlaWdodH1gKVxyXG4gICAgICAgICAgICAuYXR0cigncHJlc2VydmVBc3BlY3RSYXRpbycsICd4TWlkWU1pZCBtZWV0Jyk7XHJcblxyXG4gICAgICAgIGNvbnN0IHRpbWVzID0gZGF0YS5tYXAoKHNvbHZlKSA9PiBzb2x2ZS50aW1lIC8gMTAwMCkuc29ydCgoYSwgYikgPT4gYSAtIGIpO1xyXG4gICAgICAgIGNvbnN0IGFvNSA9IGNvbXB1dGVSb2xsaW5nQXZlcmFnZSh0aW1lcywgNSk7XHJcbiAgICAgICAgY29uc3QgYW8xMiA9IGNvbXB1dGVSb2xsaW5nQXZlcmFnZSh0aW1lcywgMTIpO1xyXG4gICAgICAgIGNvbnN0IGJhbmR3aWR0aCA9IChkMy5tYXgodGltZXMpIC0gZDMubWluKHRpbWVzKSkgLyAyMDtcclxuXHJcbiAgICAgICAgY29uc3QgZGVuc2l0eURhdGEgPSBrZGUodGltZXMsIGJhbmR3aWR0aCk7XHJcbiAgICAgICAgY29uc3QgZGVuc2l0eUFvNSA9IGtkZShhbzUuZmlsdGVyKGQgPT4gZCAhPT0gbnVsbCksIGJhbmR3aWR0aCk7XHJcbiAgICAgICAgY29uc3QgZGVuc2l0eUFvMTIgPSBrZGUoYW8xMi5maWx0ZXIoZCA9PiBkICE9PSBudWxsKSwgYmFuZHdpZHRoKTtcclxuXHJcbiAgICAgICAgY29uc3QgeFNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKS5kb21haW4oZDMuZXh0ZW50KGRlbnNpdHlEYXRhLCBkID0+IGRbMF0pKS5yYW5nZShbNTAsIHdpZHRoIC0gNTBdKTtcclxuICAgICAgICBjb25zdCB5U2NhbGUgPSBkMy5zY2FsZUxpbmVhcigpLmRvbWFpbihbMCwgZDMubWF4KFsuLi5kZW5zaXR5RGF0YSwgLi4uZGVuc2l0eUFvNSwgLi4uZGVuc2l0eUFvMTJdLCBkID0+IGRbMV0pXSkucmFuZ2UoW2hlaWdodCAtIDUwLCA1MF0pO1xyXG5cclxuICAgICAgICBjb25zdCBhcmVhID0gZDMuYXJlYSgpLngoZCA9PiB4U2NhbGUoZFswXSkpLnkwKGhlaWdodCAtIDUwKS55MShkID0+IHlTY2FsZShkWzFdKSk7XHJcbiAgICAgICAgY29uc3QgbGluZSA9IGQzLmxpbmUoKS54KGQgPT4geFNjYWxlKGRbMF0pKS55KGQgPT4geVNjYWxlKGRbMV0pKTtcclxuXHJcbiAgICAgICAgc3ZnLmFwcGVuZCgncGF0aCcpLmRhdHVtKGRlbnNpdHlEYXRhKS5hdHRyKCdkJywgYXJlYSkuYXR0cignZmlsbCcsICdzdGVlbGJsdWUnKS5hdHRyKCdvcGFjaXR5JywgMC41KTtcclxuICAgICAgICBzdmcuYXBwZW5kKCdwYXRoJykuZGF0dW0oZGVuc2l0eURhdGEpLmF0dHIoJ2QnLCBsaW5lKS5hdHRyKCdzdHJva2UnLCAnYmx1ZScpLmF0dHIoJ2ZpbGwnLCAnbm9uZScpLmF0dHIoJ3N0cm9rZS13aWR0aCcsIDIpO1xyXG5cclxuICAgICAgICBzdmcuYXBwZW5kKCdwYXRoJykuZGF0dW0oZGVuc2l0eUFvNSkuYXR0cignZCcsIGFyZWEpLmF0dHIoJ2ZpbGwnLCAnZ3JlZW4nKS5hdHRyKCdvcGFjaXR5JywgMC41KTtcclxuICAgICAgICBzdmcuYXBwZW5kKCdwYXRoJykuZGF0dW0oZGVuc2l0eUFvNSkuYXR0cignZCcsIGxpbmUpLmF0dHIoJ3N0cm9rZScsICdncmVlbicpLmF0dHIoJ2ZpbGwnLCAnbm9uZScpLmF0dHIoJ3N0cm9rZS13aWR0aCcsIDIpO1xyXG5cclxuICAgICAgICBzdmcuYXBwZW5kKCdwYXRoJykuZGF0dW0oZGVuc2l0eUFvMTIpLmF0dHIoJ2QnLCBhcmVhKS5hdHRyKCdmaWxsJywgJ3JlZCcpLmF0dHIoJ29wYWNpdHknLCAwLjUpO1xyXG4gICAgICAgIHN2Zy5hcHBlbmQoJ3BhdGgnKS5kYXR1bShkZW5zaXR5QW8xMikuYXR0cignZCcsIGxpbmUpLmF0dHIoJ3N0cm9rZScsICdyZWQnKS5hdHRyKCdmaWxsJywgJ25vbmUnKS5hdHRyKCdzdHJva2Utd2lkdGgnLCAyKTtcclxuXHJcbiAgICAgICAgc3ZnLmFwcGVuZCgndGV4dCcpXHJcbiAgICAgICAgICAgIC5hdHRyKCd4Jywgd2lkdGggLyAyKVxyXG4gICAgICAgICAgICAuYXR0cigneScsIDIwKVxyXG4gICAgICAgICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnbWlkZGxlJyk7XHJcbiAgICAgICAgLy8gLnRleHQoJ1NvbHZlIFRpbWUgRGVuc2l0eScpO1xyXG5cclxuICAgICAgICBzdmcuYXBwZW5kKCdnJykuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgwLCAke2hlaWdodCAtIDUwfSlgKS5jYWxsKGQzLmF4aXNCb3R0b20oeFNjYWxlKSk7XHJcblxyXG4gICAgICAgIC8vIENvbXB1dGUgcGVyY2VudGlsZXNcclxuICAgICAgICBjb25zdCBjb21wdXRlUGVyY2VudGlsZXMgPSAoZGF0YSkgPT4gWzAuMjUsIDAuNTAsIDAuNzVdLm1hcChwID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBNYXRoLmZsb29yKHAgKiBkYXRhLmxlbmd0aCk7XHJcbiAgICAgICAgICAgIHJldHVybiBkYXRhW2luZGV4XTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgcGVyY2VudGlsZXNTaW5nbGUgPSBjb21wdXRlUGVyY2VudGlsZXModGltZXMpO1xyXG4gICAgICAgIGNvbnN0IHBlcmNlbnRpbGVzQW81ID0gY29tcHV0ZVBlcmNlbnRpbGVzKGFvNS5maWx0ZXIoZCA9PiBkICE9PSBudWxsKSk7XHJcbiAgICAgICAgY29uc3QgcGVyY2VudGlsZXNBbzEyID0gY29tcHV0ZVBlcmNlbnRpbGVzKGFvMTIuZmlsdGVyKGQgPT4gZCAhPT0gbnVsbCkpO1xyXG5cclxuICAgICAgICAvLyBEcmF3IGRhc2hlZCBsaW5lcyBmb3IgYWxsIGRlbnNpdHkgcGxvdHNcclxuICAgICAgICBjb25zdCBkcmF3RGFzaGVkTGluZXMgPSAocGVyY2VudGlsZXMsIGRlbnNpdHksIHN0cm9rZUNvbG9yKSA9PiB7XHJcbiAgICAgICAgICAgIHBlcmNlbnRpbGVzLmZvckVhY2godmFsdWUgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeU1heCA9IHlTY2FsZShkZW5zaXR5LmZpbmQoZCA9PiBkWzBdID49IHZhbHVlKT8uWzFdIHx8IDApO1xyXG5cclxuICAgICAgICAgICAgICAgIHN2Zy5hcHBlbmQoJ2xpbmUnKVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCd4MScsIHhTY2FsZSh2YWx1ZSkpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3gyJywgeFNjYWxlKHZhbHVlKSlcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneTEnLCBoZWlnaHQgLSA1MClcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cigneTInLCB5TWF4KVxyXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKCdzdHJva2UnLCBzdHJva2VDb2xvcilcclxuICAgICAgICAgICAgICAgICAgICAuYXR0cignc3Ryb2tlLWRhc2hhcnJheScsICc0LDInKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgZHJhd0Rhc2hlZExpbmVzKHBlcmNlbnRpbGVzU2luZ2xlLCBkZW5zaXR5RGF0YSwgJ2JsdWUnKTtcclxuICAgICAgICBkcmF3RGFzaGVkTGluZXMocGVyY2VudGlsZXNBbzUsIGRlbnNpdHlBbzUsICdncmVlbicpO1xyXG4gICAgICAgIGRyYXdEYXNoZWRMaW5lcyhwZXJjZW50aWxlc0FvMTIsIGRlbnNpdHlBbzEyLCAncmVkJyk7XHJcblxyXG4gICAgICAgIC8vIEFkZCBsZWdlbmRcclxuICAgICAgICBjb25zdCBsZWdlbmQgPSBzdmcuYXBwZW5kKCdnJykuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3dpZHRoIC0gMTIwfSwgNDApYCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGxlZ2VuZEl0ZW1zID0gW1xyXG4gICAgICAgICAgICB7IGNvbG9yOiAnYmx1ZScsIGxhYmVsOiAnU2luZ2xlJyB9LFxyXG4gICAgICAgICAgICB7IGNvbG9yOiAnZ3JlZW4nLCBsYWJlbDogJ0FPNScgfSxcclxuICAgICAgICAgICAgeyBjb2xvcjogJ3JlZCcsIGxhYmVsOiAnQU8xMicgfVxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIGxlZ2VuZEl0ZW1zLmZvckVhY2goKGl0ZW0sIGkpID0+IHtcclxuICAgICAgICAgICAgbGVnZW5kLmFwcGVuZCgncmVjdCcpXHJcbiAgICAgICAgICAgICAgICAuYXR0cigneCcsIDApXHJcbiAgICAgICAgICAgICAgICAuYXR0cigneScsIGkgKiAyMClcclxuICAgICAgICAgICAgICAgIC5hdHRyKCd3aWR0aCcsIDE1KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2hlaWdodCcsIDE1KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCBpdGVtLmNvbG9yKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ29wYWNpdHknLCAwLjUpO1xyXG5cclxuICAgICAgICAgICAgbGVnZW5kLmFwcGVuZCgndGV4dCcpXHJcbiAgICAgICAgICAgICAgICAuYXR0cigneCcsIDIwKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3knLCBpICogMjAgKyAxMilcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgJ2JsYWNrJylcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdmb250LXNpemUnLCAnMTJweCcpXHJcbiAgICAgICAgICAgICAgICAudGV4dChpdGVtLmxhYmVsKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBjb21wdXRlUm9sbGluZ0F2ZXJhZ2UoZGF0YSwgd2luZG93U2l6ZSkge1xyXG4gICAgICAgIHJldHVybiBkYXRhLm1hcCgoXywgaSwgYXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpIDwgd2luZG93U2l6ZSAtIDEpIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICBjb25zdCBzdWJzZXQgPSBhcnIuc2xpY2UoaSAtIHdpbmRvd1NpemUgKyAxLCBpICsgMSk7XHJcbiAgICAgICAgICAgIHJldHVybiBzdWJzZXQucmVkdWNlKChzdW0sIHZhbCkgPT4gc3VtICsgdmFsLCAwKSAvIHN1YnNldC5sZW5ndGg7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24ga2RlKGRhdGEsIGJhbmR3aWR0aCkge1xyXG4gICAgICAgIGNvbnN0IGtlcm5lbCA9ICh1KSA9PiBNYXRoLmV4cCgtMC41ICogdSAqIHUpIC8gTWF0aC5zcXJ0KDIgKiBNYXRoLlBJKTtcclxuICAgICAgICBjb25zdCBrZXJuZWxEZW5zaXR5RXN0aW1hdG9yID0gKGtlcm5lbCwgYmFuZHdpZHRoLCBkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHhNaW4gPSBkMy5taW4oZGF0YSkgLSBiYW5kd2lkdGggKiAzO1xyXG4gICAgICAgICAgICBjb25zdCB4TWF4ID0gZDMubWF4KGRhdGEpICsgYmFuZHdpZHRoICogMztcclxuICAgICAgICAgICAgY29uc3QgeFZhbHVlcyA9IGQzLnJhbmdlKHhNaW4sIHhNYXgsICh4TWF4IC0geE1pbikgLyAxMDApO1xyXG4gICAgICAgICAgICByZXR1cm4geFZhbHVlcy5tYXAoKHgpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbeCwgZDMubWVhbihkYXRhLCAodikgPT4ga2VybmVsKCh4IC0gdikgLyBiYW5kd2lkdGgpKSAvIGJhbmR3aWR0aF07XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIGtlcm5lbERlbnNpdHlFc3RpbWF0b3Ioa2VybmVsLCBiYW5kd2lkdGgsIGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdlxyXG4gICAgICAgICAgICByZWY9e2NvbnRhaW5lclJlZn1cclxuICAgICAgICAgICAgY2xhc3NOYW1lPVwidy1zY3JlZW4gaC1bY2FsYygxMDB2aC0xMDBweCldIGJnLXdoaXRlXCJcclxuICAgICAgICA+PC9kaXY+XHJcbiAgICApO1xyXG59Il0sIm5hbWVzIjpbInVzZUVmZmVjdCIsInVzZVJlZiIsImQzIiwiU29sdmVEZW5zaXR5Iiwic29sdmVzIiwiY29udGFpbmVyUmVmIiwiY3VycmVudCIsImxlbmd0aCIsImRyYXdTb2x2ZURlbnNpdHkiLCJ3aW5kb3ciLCJhZGRFdmVudExpc3RlbmVyIiwiaGFuZGxlUmVzaXplIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRhdGEiLCJjb250YWluZXIiLCJzZWxlY3QiLCJzZWxlY3RBbGwiLCJyZW1vdmUiLCJ3aWR0aCIsImNsaWVudFdpZHRoIiwiaGVpZ2h0IiwiY2xpZW50SGVpZ2h0Iiwic3ZnIiwiYXBwZW5kIiwiYXR0ciIsInRpbWVzIiwibWFwIiwic29sdmUiLCJ0aW1lIiwic29ydCIsImEiLCJiIiwiYW81IiwiY29tcHV0ZVJvbGxpbmdBdmVyYWdlIiwiYW8xMiIsImJhbmR3aWR0aCIsIm1heCIsIm1pbiIsImRlbnNpdHlEYXRhIiwia2RlIiwiZGVuc2l0eUFvNSIsImZpbHRlciIsImQiLCJkZW5zaXR5QW8xMiIsInhTY2FsZSIsInNjYWxlTGluZWFyIiwiZG9tYWluIiwiZXh0ZW50IiwicmFuZ2UiLCJ5U2NhbGUiLCJhcmVhIiwieCIsInkwIiwieTEiLCJsaW5lIiwieSIsImRhdHVtIiwiY2FsbCIsImF4aXNCb3R0b20iLCJjb21wdXRlUGVyY2VudGlsZXMiLCJwIiwiaW5kZXgiLCJNYXRoIiwiZmxvb3IiLCJwZXJjZW50aWxlc1NpbmdsZSIsInBlcmNlbnRpbGVzQW81IiwicGVyY2VudGlsZXNBbzEyIiwiZHJhd0Rhc2hlZExpbmVzIiwicGVyY2VudGlsZXMiLCJkZW5zaXR5Iiwic3Ryb2tlQ29sb3IiLCJmb3JFYWNoIiwidmFsdWUiLCJ5TWF4IiwiZmluZCIsImxlZ2VuZCIsImxlZ2VuZEl0ZW1zIiwiY29sb3IiLCJsYWJlbCIsIml0ZW0iLCJpIiwidGV4dCIsIndpbmRvd1NpemUiLCJfIiwiYXJyIiwic3Vic2V0Iiwic2xpY2UiLCJyZWR1Y2UiLCJzdW0iLCJ2YWwiLCJrZXJuZWwiLCJ1IiwiZXhwIiwic3FydCIsIlBJIiwia2VybmVsRGVuc2l0eUVzdGltYXRvciIsInhNaW4iLCJ4TWF4IiwieFZhbHVlcyIsIm1lYW4iLCJ2IiwiZGl2IiwicmVmIiwiY2xhc3NOYW1lIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/dataVis/SolveDen.js\n"));

/***/ })

});
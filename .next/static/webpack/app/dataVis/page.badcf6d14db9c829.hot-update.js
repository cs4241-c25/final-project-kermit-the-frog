"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dataVis/page",{

/***/ "(app-pages-browser)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"7b083d5e4e40\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyJFOlxcV3BpXFxSZWd1bGFybHlcXENvdXJzZXNcXFNyXFwyMDI0X0NfVGVybVxcQ1M0MjQxXFxIV1xcZmluYWwtcHJvamVjdC1rZXJtaXQtdGhlLWZyb2dcXHNyY1xcYXBwXFxnbG9iYWxzLmNzcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcIjdiMDgzZDVlNGU0MFwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/dataVis/TrendAnaIndex.js":
/*!******************************************!*\
  !*** ./src/app/dataVis/TrendAnaIndex.js ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SolveTimeTrend)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _TrendAnaTime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TrendAnaTime */ \"(app-pages-browser)/./src/app/dataVis/TrendAnaTime.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_TrendAnaTime__WEBPACK_IMPORTED_MODULE_2__]);\n_TrendAnaTime__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\nconst d3 = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_d3_src_index_js\").then(__webpack_require__.bind(__webpack_require__, /*! d3 */ \"(app-pages-browser)/./node_modules/d3/src/index.js\"));\n\nfunction SolveTimeTrend(param) {\n    let { solves } = param;\n    _s();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"SolveTimeTrend.useEffect\": ()=>{\n            if (!solves || !Array.isArray(solves) || solves.length === 0) return; // 🔥 Ensure solves is valid\n            if (containerRef.current) {\n                drawSolveTimeTrend(solves);\n                window.addEventListener('resize', handleResize);\n            }\n            return ({\n                \"SolveTimeTrend.useEffect\": ()=>window.removeEventListener('resize', handleResize)\n            })[\"SolveTimeTrend.useEffect\"];\n        }\n    }[\"SolveTimeTrend.useEffect\"], [\n        solves\n    ]);\n    function handleResize() {\n        if (containerRef.current) {\n            drawSolveTimeTrend(solves);\n        }\n    }\n    function computeRollingAverage(data, windowSize) {\n        const rollingAvg = data.map((_, i, arr)=>{\n            if (i < windowSize - 1) return null;\n            const subset = arr.slice(i - (windowSize - 1), i + 1);\n            return subset.reduce((sum, val)=>sum + val, 0) / subset.length;\n        });\n        console.log(\"Window Size: \".concat(windowSize));\n        console.log(\"Original Data Length: \".concat(data.length));\n        console.log(\"Rolling Average (\".concat(windowSize, \") Length: \").concat(rollingAvg.length));\n        console.log(\"First Values:\", rollingAvg.slice(0, 15)); // Check first few values\n        console.log(\"Last Values:\", rollingAvg.slice(-15)); // Check last few values\n        return rollingAvg;\n    }\n    function drawSolveTimeTrend(data) {\n        if (!containerRef.current) return;\n        const container = d3.select(containerRef.current);\n        container.selectAll('*').remove();\n        const width = containerRef.current.clientWidth || 800;\n        const height = containerRef.current.clientHeight || 500;\n        const svg = container.append('svg').attr('width', '100%').attr('height', '100%').attr('viewBox', \"0 0 \".concat(width, \" \").concat(height)).attr('preserveAspectRatio', 'xMidYMid meet');\n        const times = data.map((solve)=>solve.time / 1000);\n        const ao5 = computeRollingAverage(times, 5);\n        const ao12 = computeRollingAverage(times, 12);\n        let xScale = d3.scaleLinear().domain([\n            0,\n            times.length - 1\n        ]).range([\n            50,\n            width - 50\n        ]);\n        let yScale = d3.scaleLinear().domain([\n            d3.max(times),\n            d3.min(times)\n        ]) // Flip domain to match SVG coords\n        .range([\n            50,\n            height - 50\n        ]); // Ensure bottom is lower on the screen\n        const xAxis = svg.append('g').attr('class', 'x-axis').attr('transform', \"translate(0, \".concat(height - 50, \")\")).call(d3.axisBottom(xScale));\n        const yAxis = svg.append('g').attr('class', 'y-axis').attr('transform', \"translate(50, 0)\").call(d3.axisLeft(yScale));\n        const gridGroup = svg.append('g').attr('class', 'grid');\n        function drawGrid(xScale, yScale) {\n            gridGroup.selectAll('*').remove();\n            // Horizontal grid lines\n            gridGroup.selectAll('.horizontal-grid').data(yScale.ticks(10)).enter().append('line').attr('class', 'horizontal-grid').attr('x1', 50).attr('x2', width - 50).attr('y1', (d)=>yScale(d)).attr('y2', (d)=>yScale(d)).attr('stroke', '#ccc').attr('stroke-dasharray', '4,4');\n            // Vertical grid lines\n            gridGroup.selectAll('.vertical-grid').data(xScale.ticks(10)).enter().append('line').attr('class', 'vertical-grid').attr('x1', (d)=>xScale(d)).attr('x2', (d)=>xScale(d)).attr('y1', 50).attr('y2', height - 50).attr('stroke', '#ccc').attr('stroke-dasharray', '4,4');\n        }\n        drawGrid(xScale, yScale);\n        const zoom = d3.zoom().scaleExtent([\n            0.5,\n            5\n        ]).translateExtent([\n            [\n                0,\n                0\n            ],\n            [\n                width,\n                height\n            ]\n        ]).on('zoom', (event)=>{\n            const transform = event.transform;\n            const newXScale = transform.rescaleX(xScale);\n            const newYScale = transform.rescaleY(yScale);\n            // Update all plots\n            updatePlot(newXScale, newYScale);\n            // Update axes\n            xAxis.call(d3.axisBottom(newXScale));\n            yAxis.call(d3.axisLeft(newYScale));\n            // Update grid with new scales\n            drawGrid(newXScale, newYScale);\n        });\n        svg.call(zoom);\n        // ✅ Add Legends (Below Autoscale Button)\n        const legend = svg.append('g').attr('transform', \"translate(\".concat(width - 120, \", 80)\")); // ⬇ Moves legend lower under button\n        const legendItems = [\n            {\n                color: 'blue',\n                label: 'Single'\n            },\n            {\n                color: 'green',\n                label: 'AO5'\n            },\n            {\n                color: 'red',\n                label: 'AO12'\n            }\n        ];\n        legendItems.forEach((item, i)=>{\n            legend.append('rect').attr('x', 0).attr('y', i * 20).attr('width', 15).attr('height', 15).attr('fill', item.color);\n            legend.append('text').attr('x', 20).attr('y', i * 20 + 12).attr('fill', 'black').attr('font-size', '12px').text(item.label);\n        });\n        function autoscale(event) {\n            event.preventDefault(); // Stop default zoom behavior\n            event.stopPropagation(); // Prevent further event propagation\n            svg.transition().duration(500).call(zoom.transform, d3.zoomIdentity); // Reset to original zoom state\n        }\n        // Ensure event is passed to autoscale\n        svg.on('dblclick', (event)=>autoscale(event));\n        // Also explicitly disable zoom on double-click to prevent zooming in\n        svg.call(zoom).on(\"dblclick.zoom\", null);\n        function updatePlot(newXScale, newYScale) {\n            console.log(\"🔄 Updating Plot with New Scales:\");\n            console.log(\"🟢 New X Scale Domain:\", newXScale.domain());\n            console.log(\"🟢 New Y Scale Domain:\", newYScale.domain());\n            // ✅ Ensure that the AO5 and AO12 points are correctly bound\n            const ao5Selection = svg.selectAll('.point-ao5').data(ao5.map((val, i)=>({\n                    x: i,\n                    y: val\n                })), (d)=>d.x); // Ensure unique key binding\n            const ao12Selection = svg.selectAll('.point-ao12').data(ao12.map((val, i)=>({\n                    x: i,\n                    y: val\n                })), (d)=>d.x); // Ensure unique key binding\n            console.log(\"✔ Total AO5 Points Selected: \".concat(ao5Selection.size(), \" (Expected: \").concat(ao5.length, \")\"));\n            console.log(\"✔ Total AO12 Points Selected: \".concat(ao12Selection.size(), \" (Expected: \").concat(ao12.length, \")\"));\n            if (ao5Selection.size() === 0) console.warn(\"⚠️ No AO5 points found in updatePlot!\");\n            if (ao12Selection.size() === 0) console.warn(\"⚠️ No AO12 points found in updatePlot!\");\n            // ✅ Update all AO5 points\n            ao5Selection.attr('cx', (d)=>newXScale(d.x)).attr('cy', (d)=>newYScale(d.y));\n            // ✅ Update all AO12 points\n            ao12Selection.attr('cx', (d)=>newXScale(d.x)).attr('cy', (d)=>newYScale(d.y));\n            // ✅ Debugging: Ensure last AO5 & AO12 points update correctly\n            ao5Selection.each(function(d, i) {\n                if (i >= ao5.length - 4) {\n                    console.log(\"\\uD83D\\uDFE2 AO5 Point \".concat(i, \": x=\").concat(newXScale(d.x), \", y=\").concat(newYScale(d.y)));\n                }\n            });\n            ao12Selection.each(function(d, i) {\n                if (i >= ao12.length - 12) {\n                    console.log(\"\\uD83D\\uDD34 AO12 Point \".concat(i, \": x=\").concat(newXScale(d.x), \", y=\").concat(newYScale(d.y)));\n                }\n            });\n            // ✅ Update single solve points\n            svg.selectAll('.point-single').attr('cx', (_, i)=>newXScale(i)).attr('cy', (_, i)=>newYScale(times[i]));\n            // ✅ Update single solve line\n            svg.selectAll('.line-single').attr('d', d3.line().curve(d3.curveMonotoneX).x((_, i)=>newXScale(i)).y((_, i)=>newYScale(times[i])));\n            // ✅ Ensure AO5 line aligns dynamically\n            svg.selectAll('.line-ao5').attr('d', d3.line().curve(d3.curveMonotoneX).defined((_, i)=>i >= 4 && ao5[i] !== null).x((_, i)=>newXScale(i)).y((_, i)=>newYScale(ao5[i])));\n            // ✅ Ensure AO12 line aligns dynamically\n            svg.selectAll('.line-ao12').attr('d', d3.line().curve(d3.curveMonotoneX).defined((_, i)=>i >= 11 && ao12[i] !== null).x((_, i)=>newXScale(i)).y((_, i)=>newYScale(ao12[i])));\n        }\n        svg.append('path').datum(times).attr('class', 'line line-single').attr('stroke', 'blue').attr('fill', 'none').attr('stroke-width', 2);\n        svg.append('path').datum(ao5).attr('class', 'line line-ao5').attr('stroke', 'green').attr('fill', 'none').attr('stroke-width', 2);\n        svg.append('path').datum(ao12).attr('class', 'line line-ao12').attr('stroke', 'red').attr('fill', 'none').attr('stroke-width', 2);\n        const tooltip = d3.select(containerRef.current).append('div').attr('class', 'absolute bg-white p-2 border rounded shadow text-sm').style('visibility', 'hidden').style('position', 'absolute');\n        function showTooltip(event, i) {\n            var _times_i, _ao5_i, _ao12_i;\n            const singleTime = (_times_i = times[i]) === null || _times_i === void 0 ? void 0 : _times_i.toFixed(2);\n            const ao5Time = ao5[i] !== null ? (_ao5_i = ao5[i]) === null || _ao5_i === void 0 ? void 0 : _ao5_i.toFixed(2) : '-';\n            const ao12Time = ao12[i] !== null ? (_ao12_i = ao12[i]) === null || _ao12_i === void 0 ? void 0 : _ao12_i.toFixed(2) : '-';\n            tooltip.html(\"\\n                <div><strong>Single:</strong> \".concat(singleTime, \"s</div>\\n                <div><strong>AO5:</strong> \").concat(ao5Time, \"s</div>\\n                <div><strong>AO12:</strong> \").concat(ao12Time, \"s</div>\\n            \")).style('visibility', 'visible').style('position', 'fixed').style('background', 'white').style('padding', '6px').style('border', '1px solid #ccc').style('border-radius', '5px').style('box-shadow', '2px 2px 10px rgba(0, 0, 0, 0.1)').style('font-size', '12px').style('pointer-events', 'none').style('z-index', '1000').style('transform', 'translate(0, -50%)');\n            tooltip.style('left', \"\".concat(event.pageX + 12, \"px\")).style('top', \"\".concat(event.pageY, \"px\"));\n        }\n        function hideTooltip() {\n            tooltip.style('visibility', 'hidden');\n        }\n        setTimeout(()=>{\n            updatePlot(xScale, yScale); // ✅ Force render after initialization\n        }, 100);\n        function addPoints(data, color, className, valueAccessor, minIndex, label) {\n            // ✅ Ensure that we correctly iterate over the full dataset\n            const validPoints = data.map((val, i)=>({\n                    x: i,\n                    y: valueAccessor(i)\n                })).filter((d)=>d.y !== null && d.x >= minIndex); // ✅ Removed x < times.length constraint\n            console.log(\"\\n\\uD83D\\uDFE2 Adding Points for \".concat(label, \" | Class: \").concat(className, \" | MinIndex: \").concat(minIndex));\n            console.log(\"✔ Valid Points Count: \".concat(validPoints.length));\n            console.log(\"\\uD83D\\uDCCD First 5 Points:\", validPoints.slice(0, 5));\n            console.log(\"\\uD83D\\uDCCD Last 5 Points:\", validPoints.slice(-5));\n            validPoints.forEach((point, i)=>{\n                console.log(\"\\uD83D\\uDD35 \".concat(label, \" Point \").concat(i + minIndex, \": RawX=\").concat(point.x, \", ScaledX=\").concat(xScale(point.x), \", \") + \"RawY=\".concat(point.y.toFixed(3), \", ScaledY=\").concat(yScale(point.y).toFixed(2)));\n            });\n            // Ensure data binding is done correctly\n            svg.selectAll(\".\".concat(className)).data(validPoints, (d)=>d.x) // Ensure unique key binding\n            .join(\"circle\") // Ensure proper binding\n            .attr('class', \"point \".concat(className)).attr('cx', (d)=>xScale(d.x)).attr('cy', (d)=>yScale(d.y)).attr('r', 5).attr('fill', color).on('mouseover', (event, d)=>showTooltip(event, d.x)).on('mouseout', hideTooltip);\n        }\n        // ✅ Ensure AO5 & AO12 points are fully added before updating\n        addPoints(times, 'blue', 'point-single', (i)=>times[i], 0, \"Single\");\n        addPoints(ao5, 'green', 'point-ao5', (i)=>ao5[i], 4, \"AO5\");\n        addPoints(ao12, 'red', 'point-ao12', (i)=>ao12[i], 11, \"AO12\");\n        const controls = d3.select(containerRef.current).append('div').attr('class', 'absolute top-2 right-2 bg-white p-2 rounded shadow');\n        controls.append('button').text('Autoscale').style('margin-right', '5px').on('click', autoscale);\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: containerRef,\n        className: \"w-screen h-[calc(100vh-100px)] bg-white relative\"\n    }, void 0, false, {\n        fileName: \"E:\\\\Wpi\\\\Regularly\\\\Courses\\\\Sr\\\\2024_C_Term\\\\CS4241\\\\HW\\\\final-project-kermit-the-frog\\\\src\\\\app\\\\dataVis\\\\TrendAnaIndex.js\",\n        lineNumber: 351,\n        columnNumber: 9\n    }, this);\n}\n_s(SolveTimeTrend, \"8puyVO4ts1RhCfXUmci3vLI3Njw=\");\n_c = SolveTimeTrend;\nvar _c;\n$RefreshReg$(_c, \"SolveTimeTrend\");\n\n\n;\r\n    // Wrapped in an IIFE to avoid polluting the global scope\r\n    ;\r\n    (function () {\r\n        var _a, _b;\r\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\r\n        // to extract CSS. For backwards compatibility, we need to check we're in a\r\n        // browser context before continuing.\r\n        if (typeof self !== 'undefined' &&\r\n            // AMP / No-JS mode does not inject these helpers:\r\n            '$RefreshHelpers$' in self) {\r\n            // @ts-ignore __webpack_module__ is global\r\n            var currentExports = module.exports;\r\n            // @ts-ignore __webpack_module__ is global\r\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\r\n            // This cannot happen in MainTemplate because the exports mismatch between\r\n            // templating and execution.\r\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\r\n            // A module can be accepted automatically based on its exports, e.g. when\r\n            // it is a Refresh Boundary.\r\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\r\n                // Save the previous exports signature on update so we can compare the boundary\r\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\r\n                module.hot.dispose(function (data) {\r\n                    data.prevSignature =\r\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\r\n                });\r\n                // Unconditionally accept an update to this module, we'll check if it's\r\n                // still a Refresh Boundary later.\r\n                // @ts-ignore importMeta is replaced in the loader\r\n                module.hot.accept();\r\n                // This field is set when the previous version of this module was a\r\n                // Refresh Boundary, letting us know we need to check for invalidation or\r\n                // enqueue an update.\r\n                if (prevSignature !== null) {\r\n                    // A boundary can become ineligible if its exports are incompatible\r\n                    // with the previous exports.\r\n                    //\r\n                    // For example, if you add/remove/change exports, we'll want to\r\n                    // re-execute the importing modules, and force those components to\r\n                    // re-render. Similarly, if you convert a class component to a\r\n                    // function, we want to invalidate the boundary.\r\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\r\n                        module.hot.invalidate();\r\n                    }\r\n                    else {\r\n                        self.$RefreshHelpers$.scheduleUpdate();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Since we just executed the code for the module, it's possible that the\r\n                // new exports made it ineligible for being a boundary.\r\n                // We only care about the case when we were _previously_ a boundary,\r\n                // because we already accepted this update (accidental side effect).\r\n                var isNoLongerABoundary = prevSignature !== null;\r\n                if (isNoLongerABoundary) {\r\n                    module.hot.invalidate();\r\n                }\r\n            }\r\n        }\r\n    })();\r\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/dataVis/TrendAnaIndex.js\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/dataVis/TrendAnaTime.js":
/*!*****************************************!*\
  !*** ./src/app/dataVis/TrendAnaTime.js ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SolveTimeTrend)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _TrendAnaIndex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TrendAnaIndex */ \"(app-pages-browser)/./src/app/dataVis/TrendAnaIndex.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_TrendAnaIndex__WEBPACK_IMPORTED_MODULE_2__]);\n_TrendAnaIndex__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nconst d3 = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_d3_src_index_js\").then(__webpack_require__.bind(__webpack_require__, /*! d3 */ \"(app-pages-browser)/./node_modules/d3/src/index.js\"));\nfunction SolveTimeTrend(param) {\n    let { solves } = param;\n    _s();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [currentClusterIndex, setCurrentClusterIndex] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [clusters, setClusters] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [xDomain, setXDomain] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const xDomainRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // ✅ State to track whether we are in SolveTimeTrend or TrendAnaTime\n    const [showTimeView, setShowTimeView] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"SolveTimeTrend.useEffect\": ()=>{\n            console.log(\"🔄 XDomain or window size updated:\", xDomain);\n            if (!solves || solves.length === 0) {\n                console.warn(\"⚠️ No solves data available!\");\n                return;\n            }\n            const container = containerRef.current;\n            if (!container) {\n                console.warn(\"⚠️ Container reference is null!\");\n                return;\n            }\n            console.log(\"📏 Updating chart dimensions after resize...\");\n            drawSolveTimeTrend(solves);\n        }\n    }[\"SolveTimeTrend.useEffect\"], [\n        xDomain,\n        containerRef\n    ]); // 🔥 Ensure chart updates when xDomain or container size changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"SolveTimeTrend.useEffect\": ()=>{\n            if (!solves || !Array.isArray(solves) || solves.length === 0) return;\n            console.log(\"🔍 Running cluster detection...\");\n            const detectedClusters = findClusters(solves);\n            setClusters(detectedClusters);\n            if (detectedClusters.length > 0) {\n                const firstCluster = detectedClusters[0];\n                const newDomain = [\n                    new Date(firstCluster[0].timestamp),\n                    new Date(firstCluster.slice(-1)[0].timestamp)\n                ];\n                setXDomain(newDomain);\n                xDomainRef.current = newDomain; // ✅ Ensure ref is updated\n                // ❗ Log AFTER setting the state to reflect the correct value\n                console.log(\"✅ X-Domain initialized to first cluster:\", newDomain);\n            }\n            // Attach resize event\n            window.addEventListener('resize', handleResize);\n            return ({\n                \"SolveTimeTrend.useEffect\": ()=>window.removeEventListener('resize', handleResize)\n            })[\"SolveTimeTrend.useEffect\"];\n        }\n    }[\"SolveTimeTrend.useEffect\"], [\n        solves\n    ]); // <-- Runs only on first load\n    if (showTimeView) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_TrendAnaIndex__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n            solves: solves\n        }, void 0, false, {\n            fileName: \"E:\\\\Wpi\\\\Regularly\\\\Courses\\\\Sr\\\\2024_C_Term\\\\CS4241\\\\HW\\\\final-project-kermit-the-frog\\\\src\\\\app\\\\dataVis\\\\TrendAnaTime.js\",\n            lineNumber: 62,\n            columnNumber: 16\n        }, this);\n    }\n    function handleResize() {\n        console.log(\"🔄 Handling resize...\");\n        if (!solves || solves.length === 0) {\n            console.warn(\"⚠️ No solves available, skipping resize!\");\n            return;\n        }\n        let detectedClusters = clusters;\n        if (clusters.length === 0) {\n            console.warn(\"⚠️ No clusters available on resize! Refinding clusters...\");\n            detectedClusters = findClusters(solves);\n            setClusters(detectedClusters);\n        }\n        if (detectedClusters.length === 0) {\n            console.warn(\"⚠️ Still no clusters found after resize!\");\n            return;\n        }\n        const prevClusterIndex = currentClusterIndex;\n        const prevXDomain = xDomainRef.current;\n        console.log(\"\\uD83D\\uDCCC Preserving Cluster Index: \".concat(prevClusterIndex));\n        console.log(\"🔍 Preserving X-Domain before resize:\", prevXDomain);\n        // Ensure re-renders with correct states\n        setCurrentClusterIndex(prevClusterIndex);\n        setXDomain(prevXDomain);\n        xDomainRef.current = prevXDomain;\n        // ✅ Force state updates to re-enable buttons\n        setTimeout(()=>{\n            setClusters([\n                ...detectedClusters\n            ]);\n            setXDomain([\n                ...prevXDomain\n            ]);\n            setCurrentClusterIndex(prevClusterIndex);\n        }, 0);\n        // Redraw the chart after resize\n        drawSolveTimeTrend(solves);\n        console.log(\"✅ Resize handled, restoring states.\");\n    }\n    function findClusters(data) {\n        console.log(\"🔍 Running findClusters...\");\n        let detectedClusters = [];\n        let currentCluster = [\n            data[0]\n        ];\n        for(let i = 1; i < data.length; i++){\n            if (new Date(data[i].timestamp) - new Date(data[i - 1].timestamp) > 15 * 60 * 1000) {\n                if (currentCluster.length > 1) {\n                    const uniqueXValues = new Set(currentCluster.map((d)=>d.timestamp));\n                    if (uniqueXValues.size > 1) {\n                        detectedClusters.push(currentCluster);\n                    } else {\n                        console.warn(\"⚠️ Ignoring cluster with same X-Axis values:\", currentCluster);\n                    }\n                }\n                currentCluster = [];\n            }\n            currentCluster.push(data[i]);\n        }\n        // Check last cluster before adding it\n        if (currentCluster.length > 1) {\n            const uniqueXValues = new Set(currentCluster.map((d)=>d.timestamp));\n            if (uniqueXValues.size > 1) {\n                detectedClusters.push(currentCluster);\n            } else {\n                console.warn(\"⚠️ Ignoring cluster with same X-Axis values:\", currentCluster);\n            }\n        }\n        console.log(\"📊 Clusters identified (excluding single/same x-axis clusters):\", detectedClusters.length, detectedClusters);\n        return detectedClusters;\n    }\n    function computeRollingAverage(data, windowSize) {\n        return data.map((_, i, arr)=>{\n            if (i < windowSize - 1) return null; // ✅ Preserve nulls at the beginning\n            const subset = arr.slice(i - (windowSize - 1), i + 1);\n            return subset.reduce((sum, val)=>sum + val, 0) / subset.length;\n        });\n    }\n    function drawSolveTimeTrend(data) {\n        console.log(\"🔍 Current X-Domain in drawSolveTimeTrend:\", xDomainRef.current);\n        if (!containerRef.current) {\n            console.warn(\"⚠️ Container reference is null, cannot draw!\");\n            return;\n        }\n        const container = d3.select(containerRef.current);\n        container.selectAll('*').remove();\n        const width = containerRef.current.clientWidth || 800;\n        const height = containerRef.current.clientHeight || 500;\n        console.log(\"📏 Chart dimensions:\", width, height);\n        const svg = container.append('svg').attr('width', '100%').attr('height', '100%').attr('viewBox', \"0 0 \".concat(width, \" \").concat(height)).attr('preserveAspectRatio', 'xMidYMid meet');\n        // Ensure all data contains timestamps\n        const processedData = data.map((solve)=>{\n            if (!solve.timestamp) {\n                console.warn(\"⚠️ Skipping entry with missing timestamp:\", solve);\n                return null;\n            }\n            return {\n                timestamp: new Date(solve.timestamp),\n                time: solve.time / 1000\n            };\n        }).filter((d)=>d !== null); // Remove invalid entries\n        const timestamps = processedData.map((d)=>d.timestamp);\n        const times = processedData.map((d)=>d.time);\n        console.log(\"Processed timestamps:\", timestamps);\n        // 🔥 Find the first \"cluster\" (a short interval of data)\n        let clusterStartIndex = 0;\n        let clusterEndIndex = timestamps.length - 1;\n        for(let i = 1; i < timestamps.length; i++){\n            if (timestamps[i] - timestamps[0] > 15 * 60 * 1000) {\n                clusterEndIndex = i;\n                break;\n            }\n        }\n        // Extract the cluster time range\n        const initialXDomain = [\n            timestamps[clusterStartIndex],\n            timestamps[clusterEndIndex]\n        ];\n        console.log(\"⏳ Initial Focus X Domain: \".concat(initialXDomain[0], \" to \").concat(initialXDomain[1]));\n        const ao5 = computeRollingAverage(times, 5);\n        const ao12 = computeRollingAverage(times, 12);\n        const ao5Data = timestamps.map((timestamp, i)=>({\n                timestamp: timestamp,\n                value: ao5[i] !== null ? ao5[i] : null\n            })).filter((d)=>d.value !== null); // Remove initial nulls\n        const ao12Data = timestamps.map((timestamp, i)=>({\n                timestamp: timestamp,\n                value: ao12[i] !== null ? ao12[i] : null\n            })).filter((d)=>d.value !== null); // Remove initial nulls\n        var _xDomainRef_current;\n        // X Scale: Start zoomed into the identified cluster\n        let xScale = d3.scaleTime().domain((_xDomainRef_current = xDomainRef.current) !== null && _xDomainRef_current !== void 0 ? _xDomainRef_current : [\n            timestamps[0],\n            timestamps[timestamps.length - 1]\n        ]) // ✅ Use ref as fallback\n        .range([\n            50,\n            width - 50\n        ]);\n        console.log(\"📉 Applying X Scale domain in drawSolveTimeTrend:\", xScale.domain());\n        console.log(\"xScale range:\", xScale.range());\n        const yScale = d3.scaleLinear().domain([\n            d3.max(times),\n            d3.min(times)\n        ]).range([\n            50,\n            height - 50\n        ]);\n        // Add X and Y axes\n        const xAxis = svg.append('g').attr('class', 'x-axis').attr('transform', \"translate(0, \".concat(height - 50, \")\")).call(d3.axisBottom(xScale).tickFormat(d3.timeFormat('%H:%M:%S')));\n        // Filter unique days for displaying date below\n        let lastDate = null;\n        xAxis.selectAll('text').attr('dy', '1.2em') // Move time labels up slightly\n        .each(function(d, i, nodes) {\n            const currentText = d3.select(this);\n            const dateStr = d3.timeFormat('%b %d, %Y')(new Date(d));\n            if (dateStr !== lastDate) {\n                currentText.append('tspan').attr('x', 0).attr('dy', '1.2em').text(dateStr);\n                lastDate = dateStr;\n            }\n        });\n        const yAxis = svg.append('g').attr('class', 'y-axis').attr('transform', \"translate(50, 0)\").call(d3.axisLeft(yScale));\n        const gridGroup = svg.append('g').attr('class', 'grid');\n        function drawGrid(xScale, yScale) {\n            gridGroup.selectAll('*').remove();\n            // Horizontal grid lines\n            gridGroup.selectAll('.horizontal-grid').data(yScale.ticks(10)).enter().append('line').attr('class', 'horizontal-grid').attr('x1', 50).attr('x2', width - 50).attr('y1', (d)=>yScale(d)).attr('y2', (d)=>yScale(d)).attr('stroke', '#ccc').attr('stroke-dasharray', '4,4');\n            // Vertical grid lines\n            gridGroup.selectAll('.vertical-grid').data(xScale.ticks(10)).enter().append('line').attr('class', 'vertical-grid').attr('x1', (d)=>xScale(d)).attr('x2', (d)=>xScale(d)).attr('y1', 50).attr('y2', height - 50).attr('stroke', '#ccc').attr('stroke-dasharray', '4,4');\n        }\n        drawGrid(xScale, yScale);\n        const zoom = d3.zoom()// .scaleExtent([0.5, 5])\n        // .translateExtent([[0, 0], [width, height]])\n        .on('zoom', (event)=>{\n            const transform = event.transform;\n            const newXScale = transform.rescaleX(xScale);\n            const newYScale = transform.rescaleY(yScale);\n            console.log(\"Updated xScale domain:\", newXScale.domain());\n            // Update all plots\n            updatePlot(newXScale, newYScale);\n            // Update axes\n            xAxis.call(d3.axisBottom(newXScale).tickFormat(d3.timeFormat('%H:%M:%S')));\n            let lastZoomDate = null;\n            xAxis.selectAll('text').attr('dy', '1.2em').each(function(d, i, nodes) {\n                const currentText = d3.select(this);\n                const dateStr = d3.timeFormat('%b %d, %Y')(new Date(d));\n                if (dateStr !== lastZoomDate) {\n                    currentText.append('tspan').attr('x', 0).attr('dy', '1.2em').text(dateStr);\n                    lastZoomDate = dateStr;\n                }\n            });\n            yAxis.call(d3.axisLeft(newYScale));\n            // Update grid with new scales\n            drawGrid(newXScale, newYScale);\n        });\n        svg.call(zoom);\n        // ✅ Add Legends (Below Autoscale Button)\n        const legend = svg.append('g').attr('transform', \"translate(\".concat(width - 120, \", 80)\")); // ⬇ Moves legend lower under button\n        const legendItems = [\n            {\n                color: 'blue',\n                label: 'Single'\n            },\n            {\n                color: 'green',\n                label: 'AO5'\n            },\n            {\n                color: 'red',\n                label: 'AO12'\n            }\n        ];\n        legendItems.forEach((item, i)=>{\n            legend.append('rect').attr('x', 0).attr('y', i * 20).attr('width', 15).attr('height', 15).attr('fill', item.color);\n            legend.append('text').attr('x', 20).attr('y', i * 20 + 12).attr('fill', 'black').attr('font-size', '12px').text(item.label);\n        });\n        // Ensure event is passed to autoscale\n        svg.on('dblclick', (event)=>autoscale(event));\n        // Also explicitly disable zoom on double-click to prevent zooming in\n        svg.call(zoom).on(\"dblclick.zoom\", null);\n        function updatePlot(newXScale, newYScale) {\n            console.log(\"🔄 Updating Plot with New Scales:\");\n            console.log(\"🟢 New X Scale Domain:\", newXScale.domain());\n            console.log(\"🟢 New Y Scale Domain:\", newYScale.domain());\n            // ✅ Ensure that the AO5 and AO12 points are correctly bound\n            const ao5Selection = svg.selectAll('.point-ao5').data(ao5Data, (d)=>d.timestamp).join('circle').attr('class', 'point-ao5').attr('cx', (d)=>xScale(new Date(d.timestamp))) // Align with timestamps\n            .attr('cy', (d)=>yScale(d.value)).attr('r', 5).attr('fill', 'green').on(\"mouseover\", (event, d)=>showTooltip(event, d.timestamp)).on(\"mouseout\", ()=>tooltip.style(\"visibility\", \"hidden\"));\n            const ao12Selection = svg.selectAll('.point-ao12').data(ao12Data, (d)=>d.timestamp).join('circle').attr('class', 'point-ao12').attr('cx', (d)=>xScale(new Date(d.timestamp))) // Align with timestamps\n            .attr('cy', (d)=>yScale(d.value)).attr('r', 5).attr('fill', 'red').on(\"mouseover\", (event, d)=>showTooltip(event, d.timestamp)).on(\"mouseout\", ()=>tooltip.style(\"visibility\", \"hidden\"));\n            console.log(\"✔ Total AO5 Points Selected: \".concat(ao5Selection.size(), \" (Expected: \").concat(ao5.length, \")\"));\n            console.log(\"✔ Total AO12 Points Selected: \".concat(ao12Selection.size(), \" (Expected: \").concat(ao12.length, \")\"));\n            if (ao5Selection.size() === 0) console.warn(\"⚠️ No AO5 points found in updatePlot!\");\n            if (ao12Selection.size() === 0) console.warn(\"⚠️ No AO12 points found in updatePlot!\");\n            // ✅ Update all AO5 points correctly\n            ao5Selection.attr('cx', (d)=>newXScale(new Date(d.timestamp))).attr('cy', (d)=>newYScale(d.value)); // ✅ Use d.value for AO5\n            // ✅ Update all AO12 points correctly\n            ao12Selection.attr('cx', (d)=>newXScale(new Date(d.timestamp))).attr('cy', (d)=>newYScale(d.value)); // ✅ Use d.value for AO12\n            // ✅ Debugging: Ensure last AO5 & AO12 points update correctly\n            ao5Selection.each(function(d, i) {\n                if (i >= ao5.length - 4) {\n                    console.log(\"\\uD83D\\uDFE2 AO5 Point \".concat(i, \": x=\").concat(newXScale(d.x), \", y=\").concat(newYScale(d.y)));\n                }\n            });\n            ao12Selection.each(function(d, i) {\n                if (i >= ao12.length - 12) {\n                    console.log(\"\\uD83D\\uDD34 AO12 Point \".concat(i, \": x=\").concat(newXScale(d.x), \", y=\").concat(newYScale(d.y)));\n                }\n            });\n            // ✅ Update single solve points\n            svg.selectAll('.point-single').data(processedData, (d)=>d.timestamp).join('circle').attr('class', 'point-single').attr('cx', (d)=>newXScale(new Date(d.timestamp))) // FIX: Use newXScale\n            .attr('cy', (d)=>newYScale(d.time)) // FIX: Use newYScale\n            .attr('r', 5).attr('fill', 'blue').on(\"mouseover\", (event, d)=>showTooltip(event, d.timestamp)).on(\"mouseout\", ()=>tooltip.style(\"visibility\", \"hidden\"));\n            // ✅ Update single solve line\n            svg.selectAll('.line-single').attr('d', d3.line().curve(d3.curveMonotoneX).x((d)=>newXScale(new Date(d.timestamp))).y((d)=>newYScale(d.time)));\n            // ✅ Ensure AO5 line aligns dynamically\n            svg.selectAll('.line-ao5').datum(ao5.map((val, i)=>({\n                    timestamp: timestamps[i],\n                    value: val\n                }))).attr('d', d3.line().curve(d3.curveMonotoneX).defined((d)=>d.value !== null).x((d)=>newXScale(new Date(d.timestamp))).y((d)=>newYScale(d.value)));\n            // ✅ Ensure AO12 line aligns dynamically\n            svg.selectAll('.line-ao12').datum(ao12.map((val, i)=>({\n                    timestamp: timestamps[i],\n                    value: val\n                }))).attr('d', d3.line().curve(d3.curveMonotoneX).defined((d)=>d.value !== null).x((d)=>newXScale(new Date(d.timestamp))).y((d)=>newYScale(d.value)));\n        }\n        svg.append('path').datum(processedData).attr('class', 'line-single').attr('stroke', 'blue').attr('fill', 'none').attr('stroke-width', 2).attr('d', d3.line().curve(d3.curveMonotoneX).x((d)=>xScale(new Date(d.timestamp))).y((d)=>yScale(d.time)));\n        svg.selectAll('.line-ao5').data([\n            ao5\n        ]) // ✅ Use .data([]) instead of .datum()\n        .join(\"path\").attr('class', 'line-ao5').attr('stroke', 'green').attr('fill', 'none').attr('stroke-width', 2).attr('d', d3.line().curve(d3.curveMonotoneX).defined((_, i)=>i >= 4 && ao5[i] !== null).x((_, i)=>xScale(new Date(timestamps[i]))) // ✅ Use timestamps\n        .y((_, i)=>yScale(ao5[i])));\n        svg.selectAll('.line-ao12').data([\n            ao12\n        ]) // ✅ Use .data([]) instead of .datum()\n        .join(\"path\").attr('class', 'line-ao12').attr('stroke', 'red').attr('fill', 'none').attr('stroke-width', 2).attr('d', d3.line().curve(d3.curveMonotoneX).defined((_, i)=>i >= 11 && ao12[i] !== null).x((_, i)=>xScale(new Date(timestamps[i]))) // ✅ Use timestamps\n        .y((_, i)=>yScale(ao12[i])));\n        const tooltip = d3.select(containerRef.current).append('div').attr('class', 'absolute bg-white p-2 border rounded shadow text-sm').style('visibility', 'hidden').style('position', 'absolute');\n        function showTooltip(event, timestamp) {\n            if (!timestamp) {\n                console.warn(\"⚠️ showTooltip called with invalid timestamp:\", timestamp);\n                return;\n            }\n            // Find all data points with the same timestamp\n            const singleData = processedData.find((d)=>d.timestamp.getTime() === timestamp.getTime());\n            const ao5DataPoint = ao5Data.find((d)=>d.timestamp.getTime() === timestamp.getTime());\n            const ao12DataPoint = ao12Data.find((d)=>d.timestamp.getTime() === timestamp.getTime());\n            const singleTime = singleData ? singleData.time.toFixed(2) : \"-\";\n            const ao5Time = ao5DataPoint ? ao5DataPoint.value.toFixed(2) : \"-\";\n            const ao12Time = ao12DataPoint ? ao12DataPoint.value.toFixed(2) : \"-\";\n            console.log(\"\\uD83D\\uDFE2 Showing tooltip for timestamp \".concat(timestamp, \": Single=\").concat(singleTime, \", AO5=\").concat(ao5Time, \", AO12=\").concat(ao12Time));\n            tooltip.html(\"\\n                <div><strong>Single:</strong> \".concat(singleTime, \"s</div>\\n                <div><strong>AO5:</strong> \").concat(ao5Time, \"s</div>\\n                <div><strong>AO12:</strong> \").concat(ao12Time, \"s</div>\\n            \")).style('visibility', 'visible').style('position', 'fixed').style('background', 'white').style('padding', '6px').style('border', '1px solid #ccc').style('border-radius', '5px').style('box-shadow', '2px 2px 10px rgba(0, 0, 0, 0.1)').style('font-size', '12px').style('pointer-events', 'none').style('z-index', '1000').style('transform', 'translate(0, -50%)');\n            tooltip.style('left', \"\".concat(event.pageX + 12, \"px\")).style('top', \"\".concat(event.pageY, \"px\"));\n        }\n        function hideTooltip() {\n            tooltip.style('visibility', 'hidden');\n        }\n        setTimeout(()=>{\n            updatePlot(xScale, yScale); // ✅ Force render after initialization\n        }, 100);\n        function addPoints(data, color, className, valueAccessor, minIndex, label) {\n            // ✅ Ensure that we correctly iterate over the full dataset\n            const validPoints = data.map((val, i)=>({\n                    x: i,\n                    y: valueAccessor(i)\n                })).filter((d)=>d.y !== null && d.x >= minIndex); // ✅ Removed x < times.length constraint\n            console.log(\"\\n\\uD83D\\uDFE2 Adding Points for \".concat(label, \" | Class: \").concat(className, \" | MinIndex: \").concat(minIndex));\n            console.log(\"✔ Valid Points Count: \".concat(validPoints.length));\n            console.log(\"\\uD83D\\uDCCD First 5 Points:\", validPoints.slice(0, 5));\n            console.log(\"\\uD83D\\uDCCD Last 5 Points:\", validPoints.slice(-5));\n            validPoints.forEach((point, i)=>{\n                console.log(\"\\uD83D\\uDD35 \".concat(label, \" Point \").concat(i + minIndex, \": RawX=\").concat(point.x, \", ScaledX=\").concat(xScale(point.x), \", \") + \"RawY=\".concat(point.y.toFixed(3), \", ScaledY=\").concat(yScale(point.y).toFixed(2)));\n            });\n            // Ensure data binding is done correctly\n            svg.selectAll(\".\".concat(className)).data(validPoints, (d)=>d.x) // Ensure unique key binding\n            .join(\"circle\") // Ensure proper binding\n            .attr('class', \"point \".concat(className)).attr('cx', (d)=>xScale(d.x)).attr('cy', (d)=>yScale(d.y)).attr('r', 5).attr('fill', color);\n        }\n        // ✅ Ensure AO5 & AO12 points are fully added before updating\n        addPoints(times, 'blue', 'point-single', (i)=>times[i], 0, \"Single\");\n        addPoints(ao5, 'green', 'point-ao5', (i)=>ao5[i], 4, \"AO5\");\n        addPoints(ao12, 'red', 'point-ao12', (i)=>ao12[i], 11, \"AO12\");\n    // const controls = d3.select(containerRef.current).append('div')\n    //     .attr('class', 'absolute top-2 right-2 bg-white p-2 rounded shadow');\n    //\n    // controls.append('button')\n    //     .text('Previous Cluster')\n    //     .style('margin-right', '5px')\n    //     .attr('disabled', clusters.length === 0 || currentClusterIndex === 0 ? 'disabled' : null)\n    //     .on('click', prevCluster);\n    //\n    // controls.append('button')\n    //     .text('Next Cluster')\n    //     .style('margin-right', '5px')\n    //     .attr('disabled', clusters.length === 0 || currentClusterIndex >= clusters.length - 1 ? 'disabled' : null)\n    //     .on('click', nextCluster);\n    //\n    // controls.append('button')\n    //     .text('Autoscale')\n    //     .style('margin-right', '5px')\n    //     .on('click', autoscale);\n    //\n    // controls.append('button')\n    //     .text('Switch to Time View')\n    //     .style('margin-right', '5px')\n    //     .on('click', () => setShowTimeView(true));\n    }\n    function autoscale() {\n        console.log(\"🔍 Autoscale triggered...\");\n        if (!clusters || clusters.length === 0) {\n            console.warn(\"⚠️ No clusters available for autoscale!\");\n            return;\n        }\n        console.log(\"📌 Autoscaling to first cluster...\");\n        setCurrentClusterIndex(0);\n        const firstCluster = clusters[0];\n        if (!firstCluster || firstCluster.length === 0) {\n            console.warn(\"⚠️ First cluster is empty, cannot autoscale!\");\n            return;\n        }\n        const newDomain = [\n            new Date(firstCluster[0].timestamp),\n            new Date(firstCluster.slice(-1)[0].timestamp)\n        ];\n        console.log(\"✅ Setting autoscale X-Domain to:\", newDomain);\n        setXDomain(newDomain);\n        xDomainRef.current = newDomain;\n        // ✅ Force React to update UI state\n        setTimeout(()=>{\n            setClusters([\n                ...clusters\n            ]); // Force re-evaluation of clusters state\n        }, 0);\n    }\n    function nextCluster() {\n        console.log(\"➡️ Next cluster clicked...\");\n        if (currentClusterIndex < clusters.length - 1) {\n            const nextIndex = currentClusterIndex + 1;\n            console.log(\"📌 Moving to next cluster:\", nextIndex);\n            setCurrentClusterIndex(nextIndex);\n            const newDomain = [\n                new Date(clusters[nextIndex][0].timestamp),\n                new Date(clusters[nextIndex].slice(-1)[0].timestamp)\n            ];\n            setXDomain(newDomain);\n            xDomainRef.current = newDomain;\n        } else {\n            console.warn(\"⚠️ No next cluster available!\");\n        }\n    }\n    function prevCluster() {\n        console.log(\"⬅️ Previous cluster clicked...\");\n        if (currentClusterIndex > 0) {\n            const prevIndex = currentClusterIndex - 1;\n            console.log(\"📌 Moving to previous cluster:\", prevIndex);\n            setCurrentClusterIndex(prevIndex);\n            const newDomain = [\n                new Date(clusters[prevIndex][0].timestamp),\n                new Date(clusters[prevIndex].slice(-1)[0].timestamp)\n            ];\n            setXDomain(newDomain);\n            xDomainRef.current = newDomain;\n        } else {\n            console.warn(\"⚠️ No previous cluster available!\");\n        }\n    }\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"w-screen h-[calc(100vh-100px)] bg-white relative\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: containerRef,\n                className: \"w-full h-full\"\n            }, void 0, false, {\n                fileName: \"E:\\\\Wpi\\\\Regularly\\\\Courses\\\\Sr\\\\2024_C_Term\\\\CS4241\\\\HW\\\\final-project-kermit-the-frog\\\\src\\\\app\\\\dataVis\\\\TrendAnaTime.js\",\n                lineNumber: 686,\n                columnNumber: 13\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"absolute top-2 right-2 bg-white p-2 rounded shadow flex space-x-2\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        className: \"px-4 py-2 bg-gray-200 rounded hover:bg-gray-300\",\n                        disabled: clusters.length === 0 || currentClusterIndex === 0,\n                        onClick: ()=>setCurrentClusterIndex(currentClusterIndex - 1),\n                        children: \"Previous Cluster\"\n                    }, void 0, false, {\n                        fileName: \"E:\\\\Wpi\\\\Regularly\\\\Courses\\\\Sr\\\\2024_C_Term\\\\CS4241\\\\HW\\\\final-project-kermit-the-frog\\\\src\\\\app\\\\dataVis\\\\TrendAnaTime.js\",\n                        lineNumber: 690,\n                        columnNumber: 17\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        className: \"px-4 py-2 bg-gray-200 rounded hover:bg-gray-300\",\n                        disabled: clusters.length === 0 || currentClusterIndex >= clusters.length - 1,\n                        onClick: ()=>setCurrentClusterIndex(currentClusterIndex + 1),\n                        children: \"Next Cluster\"\n                    }, void 0, false, {\n                        fileName: \"E:\\\\Wpi\\\\Regularly\\\\Courses\\\\Sr\\\\2024_C_Term\\\\CS4241\\\\HW\\\\final-project-kermit-the-frog\\\\src\\\\app\\\\dataVis\\\\TrendAnaTime.js\",\n                        lineNumber: 698,\n                        columnNumber: 17\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        className: \"px-4 py-2 bg-gray-200 rounded hover:bg-gray-300\",\n                        onClick: ()=>autoscale(),\n                        children: \"Autoscale\"\n                    }, void 0, false, {\n                        fileName: \"E:\\\\Wpi\\\\Regularly\\\\Courses\\\\Sr\\\\2024_C_Term\\\\CS4241\\\\HW\\\\final-project-kermit-the-frog\\\\src\\\\app\\\\dataVis\\\\TrendAnaTime.js\",\n                        lineNumber: 706,\n                        columnNumber: 17\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        className: \"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-700\",\n                        onClick: ()=>setShowTimeView(true),\n                        children: \"Switch to Time View\"\n                    }, void 0, false, {\n                        fileName: \"E:\\\\Wpi\\\\Regularly\\\\Courses\\\\Sr\\\\2024_C_Term\\\\CS4241\\\\HW\\\\final-project-kermit-the-frog\\\\src\\\\app\\\\dataVis\\\\TrendAnaTime.js\",\n                        lineNumber: 714,\n                        columnNumber: 17\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"E:\\\\Wpi\\\\Regularly\\\\Courses\\\\Sr\\\\2024_C_Term\\\\CS4241\\\\HW\\\\final-project-kermit-the-frog\\\\src\\\\app\\\\dataVis\\\\TrendAnaTime.js\",\n                lineNumber: 689,\n                columnNumber: 13\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"E:\\\\Wpi\\\\Regularly\\\\Courses\\\\Sr\\\\2024_C_Term\\\\CS4241\\\\HW\\\\final-project-kermit-the-frog\\\\src\\\\app\\\\dataVis\\\\TrendAnaTime.js\",\n        lineNumber: 684,\n        columnNumber: 9\n    }, this);\n}\n_s(SolveTimeTrend, \"33HgTpEWt3wIEpA3MVY/TKFnHyc=\");\n_c = SolveTimeTrend;\nvar _c;\n$RefreshReg$(_c, \"SolveTimeTrend\");\n\n\n;\r\n    // Wrapped in an IIFE to avoid polluting the global scope\r\n    ;\r\n    (function () {\r\n        var _a, _b;\r\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\r\n        // to extract CSS. For backwards compatibility, we need to check we're in a\r\n        // browser context before continuing.\r\n        if (typeof self !== 'undefined' &&\r\n            // AMP / No-JS mode does not inject these helpers:\r\n            '$RefreshHelpers$' in self) {\r\n            // @ts-ignore __webpack_module__ is global\r\n            var currentExports = module.exports;\r\n            // @ts-ignore __webpack_module__ is global\r\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\r\n            // This cannot happen in MainTemplate because the exports mismatch between\r\n            // templating and execution.\r\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\r\n            // A module can be accepted automatically based on its exports, e.g. when\r\n            // it is a Refresh Boundary.\r\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\r\n                // Save the previous exports signature on update so we can compare the boundary\r\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\r\n                module.hot.dispose(function (data) {\r\n                    data.prevSignature =\r\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\r\n                });\r\n                // Unconditionally accept an update to this module, we'll check if it's\r\n                // still a Refresh Boundary later.\r\n                // @ts-ignore importMeta is replaced in the loader\r\n                module.hot.accept();\r\n                // This field is set when the previous version of this module was a\r\n                // Refresh Boundary, letting us know we need to check for invalidation or\r\n                // enqueue an update.\r\n                if (prevSignature !== null) {\r\n                    // A boundary can become ineligible if its exports are incompatible\r\n                    // with the previous exports.\r\n                    //\r\n                    // For example, if you add/remove/change exports, we'll want to\r\n                    // re-execute the importing modules, and force those components to\r\n                    // re-render. Similarly, if you convert a class component to a\r\n                    // function, we want to invalidate the boundary.\r\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\r\n                        module.hot.invalidate();\r\n                    }\r\n                    else {\r\n                        self.$RefreshHelpers$.scheduleUpdate();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Since we just executed the code for the module, it's possible that the\r\n                // new exports made it ineligible for being a boundary.\r\n                // We only care about the case when we were _previously_ a boundary,\r\n                // because we already accepted this update (accidental side effect).\r\n                var isNoLongerABoundary = prevSignature !== null;\r\n                if (isNoLongerABoundary) {\r\n                    module.hot.invalidate();\r\n                }\r\n            }\r\n        }\r\n    })();\r\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/dataVis/TrendAnaTime.js\n"));

/***/ })

});
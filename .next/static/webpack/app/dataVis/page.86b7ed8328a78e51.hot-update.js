"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dataVis/page",{

/***/ "(app-pages-browser)/./src/app/globals.css":
/*!*****************************!*\
  !*** ./src/app/globals.css ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"dc8f3ee839c2\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZ2xvYmFscy5jc3MiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlLGNBQWM7QUFDN0IsSUFBSSxJQUFVLElBQUksaUJBQWlCIiwic291cmNlcyI6WyJFOlxcV3BpXFxSZWd1bGFybHlcXENvdXJzZXNcXFNyXFwyMDI0X0NfVGVybVxcQ1M0MjQxXFxIV1xcZmluYWwtcHJvamVjdC1rZXJtaXQtdGhlLWZyb2dcXHNyY1xcYXBwXFxnbG9iYWxzLmNzcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCBcImRjOGYzZWU4MzljMlwiXG5pZiAobW9kdWxlLmhvdCkgeyBtb2R1bGUuaG90LmFjY2VwdCgpIH1cbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./src/app/dataVis/TrendAnaTime.js":
/*!*****************************************!*\
  !*** ./src/app/dataVis/TrendAnaTime.js ***!
  \*****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SolveTimeTrend)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _TrendAnaIndex__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TrendAnaIndex */ \"(app-pages-browser)/./src/app/dataVis/TrendAnaIndex.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_TrendAnaIndex__WEBPACK_IMPORTED_MODULE_2__]);\n_TrendAnaIndex__WEBPACK_IMPORTED_MODULE_2__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\nconst d3 = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_node_modules_d3_src_index_js\").then(__webpack_require__.bind(__webpack_require__, /*! d3 */ \"(app-pages-browser)/./node_modules/d3/src/index.js\"));\nfunction SolveTimeTrend(param) {\n    let { solves } = param;\n    _s();\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const [currentClusterIndex, setCurrentClusterIndex] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [clusters, setClusters] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [xDomain, setXDomain] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const xDomainRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    // ‚úÖ State to track whether we are in SolveTimeTrend or TrendAnaTime\n    const [showIndexView, setShowIndexView] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"SolveTimeTrend.useEffect\": ()=>{\n            console.log(\"üîÑ XDomain or window size updated:\", xDomain);\n            if (!solves || solves.length === 0) {\n                console.warn(\"‚ö†Ô∏è No solves data available!\");\n                return;\n            }\n            const container = containerRef.current;\n            if (!container) {\n                console.warn(\"‚ö†Ô∏è Container reference is null!\");\n                return;\n            }\n            console.log(\"üìè Updating chart dimensions after resize...\");\n            drawSolveTimeTrend(solves);\n        }\n    }[\"SolveTimeTrend.useEffect\"], [\n        xDomain,\n        containerRef\n    ]); // üî• Ensure chart updates when xDomain or container size changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"SolveTimeTrend.useEffect\": ()=>{\n            if (!solves || !Array.isArray(solves) || solves.length === 0) return;\n            console.log(\"üîç Running cluster detection...\");\n            const detectedClusters = findClusters(solves);\n            setClusters(detectedClusters);\n            if (detectedClusters.length > 0) {\n                const firstCluster = detectedClusters[0];\n                const newDomain = [\n                    new Date(firstCluster[0].timestamp),\n                    new Date(firstCluster.slice(-1)[0].timestamp)\n                ];\n                setXDomain(newDomain);\n                xDomainRef.current = newDomain; // ‚úÖ Ensure ref is updated\n                // ‚ùó Log AFTER setting the state to reflect the correct value\n                console.log(\"‚úÖ X-Domain initialized to first cluster:\", newDomain);\n            }\n            // Attach resize event\n            window.addEventListener('resize', handleResize);\n            return ({\n                \"SolveTimeTrend.useEffect\": ()=>window.removeEventListener('resize', handleResize)\n            })[\"SolveTimeTrend.useEffect\"];\n        }\n    }[\"SolveTimeTrend.useEffect\"], [\n        solves\n    ]); // <-- Runs only on first load\n    if (showIndexView) {\n        return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_TrendAnaIndex__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n            solves: solves\n        }, void 0, false, {\n            fileName: \"E:\\\\Wpi\\\\Regularly\\\\Courses\\\\Sr\\\\2024_C_Term\\\\CS4241\\\\HW\\\\final-project-kermit-the-frog\\\\src\\\\app\\\\dataVis\\\\TrendAnaTime.js\",\n            lineNumber: 62,\n            columnNumber: 16\n        }, this);\n    }\n    function handleResize() {\n        console.log(\"üîÑ Handling resize...\");\n        if (!solves || solves.length === 0) {\n            console.warn(\"‚ö†Ô∏è No solves available, skipping resize!\");\n            return;\n        }\n        let detectedClusters = clusters;\n        if (clusters.length === 0) {\n            console.warn(\"‚ö†Ô∏è No clusters available on resize! Refinding clusters...\");\n            detectedClusters = findClusters(solves);\n            setClusters(detectedClusters);\n        }\n        if (detectedClusters.length === 0) {\n            console.warn(\"‚ö†Ô∏è Still no clusters found after resize!\");\n            return;\n        }\n        const prevClusterIndex = currentClusterIndex;\n        const prevXDomain = xDomainRef.current;\n        console.log(\"\\uD83D\\uDCCC Preserving Cluster Index: \".concat(prevClusterIndex));\n        console.log(\"üîç Preserving X-Domain before resize:\", prevXDomain);\n        // Ensure re-renders with correct states\n        setCurrentClusterIndex(prevClusterIndex);\n        setXDomain(prevXDomain);\n        xDomainRef.current = prevXDomain;\n        // ‚úÖ Force state updates to re-enable buttons\n        setTimeout(()=>{\n            setClusters([\n                ...detectedClusters\n            ]);\n            setXDomain([\n                ...prevXDomain\n            ]);\n            setCurrentClusterIndex(prevClusterIndex);\n        }, 0);\n        // Redraw the chart after resize\n        drawSolveTimeTrend(solves);\n        console.log(\"‚úÖ Resize handled, restoring states.\");\n    }\n    function findClusters(data) {\n        console.log(\"üîç Running findClusters...\");\n        let detectedClusters = [];\n        let currentCluster = [\n            data[0]\n        ];\n        for(let i = 1; i < data.length; i++){\n            if (new Date(data[i].timestamp) - new Date(data[i - 1].timestamp) > 15 * 60 * 1000) {\n                if (currentCluster.length > 1) {\n                    const uniqueXValues = new Set(currentCluster.map((d)=>d.timestamp));\n                    if (uniqueXValues.size > 1) {\n                        detectedClusters.push(currentCluster);\n                    } else {\n                        console.warn(\"‚ö†Ô∏è Ignoring cluster with same X-Axis values:\", currentCluster);\n                    }\n                }\n                currentCluster = [];\n            }\n            currentCluster.push(data[i]);\n        }\n        // Check last cluster before adding it\n        if (currentCluster.length > 1) {\n            const uniqueXValues = new Set(currentCluster.map((d)=>d.timestamp));\n            if (uniqueXValues.size > 1) {\n                detectedClusters.push(currentCluster);\n            } else {\n                console.warn(\"‚ö†Ô∏è Ignoring cluster with same X-Axis values:\", currentCluster);\n            }\n        }\n        console.log(\"üìä Clusters identified (excluding single/same x-axis clusters):\", detectedClusters.length, detectedClusters);\n        return detectedClusters;\n    }\n    function computeRollingAverage(data, windowSize) {\n        return data.map((_, i, arr)=>{\n            if (i < windowSize - 1) return null; // ‚úÖ Preserve nulls at the beginning\n            const subset = arr.slice(i - (windowSize - 1), i + 1);\n            return subset.reduce((sum, val)=>sum + val, 0) / subset.length;\n        });\n    }\n    function drawSolveTimeTrend(data) {\n        console.log(\"üîç Current X-Domain in drawSolveTimeTrend:\", xDomainRef.current);\n        if (!containerRef.current) {\n            console.warn(\"‚ö†Ô∏è Container reference is null, cannot draw!\");\n            return;\n        }\n        const container = d3.select(containerRef.current);\n        container.selectAll('*').remove();\n        const width = containerRef.current.clientWidth || 800;\n        const height = containerRef.current.clientHeight || 500;\n        console.log(\"üìè Chart dimensions:\", width, height);\n        const svg = container.append('svg').attr('width', '100%').attr('height', '100%').attr('viewBox', \"0 0 \".concat(width, \" \").concat(height)).attr('preserveAspectRatio', 'xMidYMid meet');\n        // Ensure all data contains timestamps\n        const processedData = data.map((solve)=>{\n            if (!solve.timestamp) {\n                console.warn(\"‚ö†Ô∏è Skipping entry with missing timestamp:\", solve);\n                return null;\n            }\n            return {\n                timestamp: new Date(solve.timestamp),\n                time: solve.time / 1000\n            };\n        }).filter((d)=>d !== null); // Remove invalid entries\n        const timestamps = processedData.map((d)=>d.timestamp);\n        const times = processedData.map((d)=>d.time);\n        console.log(\"Processed timestamps:\", timestamps);\n        // üî• Find the first \"cluster\" (a short interval of data)\n        let clusterStartIndex = 0;\n        let clusterEndIndex = timestamps.length - 1;\n        for(let i = 1; i < timestamps.length; i++){\n            if (timestamps[i] - timestamps[0] > 15 * 60 * 1000) {\n                clusterEndIndex = i;\n                break;\n            }\n        }\n        // Extract the cluster time range\n        const initialXDomain = [\n            timestamps[clusterStartIndex],\n            timestamps[clusterEndIndex]\n        ];\n        console.log(\"‚è≥ Initial Focus X Domain: \".concat(initialXDomain[0], \" to \").concat(initialXDomain[1]));\n        const ao5 = computeRollingAverage(times, 5);\n        const ao12 = computeRollingAverage(times, 12);\n        const ao5Data = timestamps.map((timestamp, i)=>({\n                timestamp: timestamp,\n                value: ao5[i] !== null ? ao5[i] : null\n            })).filter((d)=>d.value !== null); // Remove initial nulls\n        const ao12Data = timestamps.map((timestamp, i)=>({\n                timestamp: timestamp,\n                value: ao12[i] !== null ? ao12[i] : null\n            })).filter((d)=>d.value !== null); // Remove initial nulls\n        var _xDomainRef_current;\n        // X Scale: Start zoomed into the identified cluster\n        let xScale = d3.scaleTime().domain((_xDomainRef_current = xDomainRef.current) !== null && _xDomainRef_current !== void 0 ? _xDomainRef_current : [\n            timestamps[0],\n            timestamps[timestamps.length - 1]\n        ]) // ‚úÖ Use ref as fallback\n        .range([\n            50,\n            width - 50\n        ]);\n        console.log(\"üìâ Applying X Scale domain in drawSolveTimeTrend:\", xScale.domain());\n        console.log(\"xScale range:\", xScale.range());\n        const yScale = d3.scaleLinear().domain([\n            d3.max(times),\n            d3.min(times)\n        ]).range([\n            50,\n            height - 50\n        ]);\n        // Add X and Y axes\n        const xAxis = svg.append('g').attr('class', 'x-axis').attr('transform', \"translate(0, \".concat(height - 50, \")\")).call(d3.axisBottom(xScale).tickFormat(d3.timeFormat('%H:%M:%S')));\n        // Filter unique days for displaying date below\n        let lastDate = null;\n        xAxis.selectAll('text').attr('dy', '1.2em') // Move time labels up slightly\n        .each(function(d, i, nodes) {\n            const currentText = d3.select(this);\n            const dateStr = d3.timeFormat('%b %d, %Y')(new Date(d));\n            if (dateStr !== lastDate) {\n                currentText.append('tspan').attr('x', 0).attr('dy', '1.2em').text(dateStr);\n                lastDate = dateStr;\n            }\n        });\n        const yAxis = svg.append('g').attr('class', 'y-axis').attr('transform', \"translate(50, 0)\").call(d3.axisLeft(yScale));\n        const gridGroup = svg.append('g').attr('class', 'grid');\n        function drawGrid(xScale, yScale) {\n            gridGroup.selectAll('*').remove();\n            // Horizontal grid lines\n            gridGroup.selectAll('.horizontal-grid').data(yScale.ticks(10)).enter().append('line').attr('class', 'horizontal-grid').attr('x1', 50).attr('x2', width - 50).attr('y1', (d)=>yScale(d)).attr('y2', (d)=>yScale(d)).attr('stroke', '#ccc').attr('stroke-dasharray', '4,4');\n            // Vertical grid lines\n            gridGroup.selectAll('.vertical-grid').data(xScale.ticks(10)).enter().append('line').attr('class', 'vertical-grid').attr('x1', (d)=>xScale(d)).attr('x2', (d)=>xScale(d)).attr('y1', 50).attr('y2', height - 50).attr('stroke', '#ccc').attr('stroke-dasharray', '4,4');\n        }\n        drawGrid(xScale, yScale);\n        const zoom = d3.zoom()// .scaleExtent([0.5, 5])\n        // .translateExtent([[0, 0], [width, height]])\n        .on('zoom', (event)=>{\n            const transform = event.transform;\n            const newXScale = transform.rescaleX(xScale);\n            const newYScale = transform.rescaleY(yScale);\n            console.log(\"Updated xScale domain:\", newXScale.domain());\n            // Update all plots\n            updatePlot(newXScale, newYScale);\n            // Update axes\n            xAxis.call(d3.axisBottom(newXScale).tickFormat(d3.timeFormat('%H:%M:%S')));\n            let lastZoomDate = null;\n            xAxis.selectAll('text').attr('dy', '1.2em').each(function(d, i, nodes) {\n                const currentText = d3.select(this);\n                const dateStr = d3.timeFormat('%b %d, %Y')(new Date(d));\n                if (dateStr !== lastZoomDate) {\n                    currentText.append('tspan').attr('x', 0).attr('dy', '1.2em').text(dateStr);\n                    lastZoomDate = dateStr;\n                }\n            });\n            yAxis.call(d3.axisLeft(newYScale));\n            // Update grid with new scales\n            drawGrid(newXScale, newYScale);\n        });\n        svg.call(zoom);\n        // ‚úÖ Add Legends (Below Autoscale Button)\n        const legend = svg.append('g').attr('transform', \"translate(\".concat(width - 120, \", 80)\")); // ‚¨á Moves legend lower under button\n        const legendItems = [\n            {\n                color: 'blue',\n                label: 'Single'\n            },\n            {\n                color: 'green',\n                label: 'AO5'\n            },\n            {\n                color: 'red',\n                label: 'AO12'\n            }\n        ];\n        legendItems.forEach((item, i)=>{\n            legend.append('rect').attr('x', 0).attr('y', i * 20).attr('width', 15).attr('height', 15).attr('fill', item.color);\n            legend.append('text').attr('x', 20).attr('y', i * 20 + 12).attr('fill', 'black').attr('font-size', '12px').text(item.label);\n        });\n        // Ensure event is passed to autoscale\n        svg.on('dblclick', (event)=>autoscale(event));\n        // Also explicitly disable zoom on double-click to prevent zooming in\n        svg.call(zoom).on(\"dblclick.zoom\", null);\n        function updatePlot(newXScale, newYScale) {\n            console.log(\"üîÑ Updating Plot with New Scales:\");\n            console.log(\"üü¢ New X Scale Domain:\", newXScale.domain());\n            console.log(\"üü¢ New Y Scale Domain:\", newYScale.domain());\n            // ‚úÖ Ensure that the AO5 and AO12 points are correctly bound\n            const ao5Selection = svg.selectAll('.point-ao5').data(ao5Data, (d)=>d.timestamp).join('circle').attr('class', 'point-ao5').attr('cx', (d)=>xScale(new Date(d.timestamp))) // Align with timestamps\n            .attr('cy', (d)=>yScale(d.value)).attr('r', 5).attr('fill', 'green').on(\"mouseover\", (event, d)=>showTooltip(event, d.timestamp)).on(\"mouseout\", ()=>tooltip.style(\"visibility\", \"hidden\"));\n            const ao12Selection = svg.selectAll('.point-ao12').data(ao12Data, (d)=>d.timestamp).join('circle').attr('class', 'point-ao12').attr('cx', (d)=>xScale(new Date(d.timestamp))) // Align with timestamps\n            .attr('cy', (d)=>yScale(d.value)).attr('r', 5).attr('fill', 'red').on(\"mouseover\", (event, d)=>showTooltip(event, d.timestamp)).on(\"mouseout\", ()=>tooltip.style(\"visibility\", \"hidden\"));\n            console.log(\"‚úî Total AO5 Points Selected: \".concat(ao5Selection.size(), \" (Expected: \").concat(ao5.length, \")\"));\n            console.log(\"‚úî Total AO12 Points Selected: \".concat(ao12Selection.size(), \" (Expected: \").concat(ao12.length, \")\"));\n            if (ao5Selection.size() === 0) console.warn(\"‚ö†Ô∏è No AO5 points found in updatePlot!\");\n            if (ao12Selection.size() === 0) console.warn(\"‚ö†Ô∏è No AO12 points found in updatePlot!\");\n            // ‚úÖ Update all AO5 points correctly\n            ao5Selection.attr('cx', (d)=>newXScale(new Date(d.timestamp))).attr('cy', (d)=>newYScale(d.value)); // ‚úÖ Use d.value for AO5\n            // ‚úÖ Update all AO12 points correctly\n            ao12Selection.attr('cx', (d)=>newXScale(new Date(d.timestamp))).attr('cy', (d)=>newYScale(d.value)); // ‚úÖ Use d.value for AO12\n            // ‚úÖ Debugging: Ensure last AO5 & AO12 points update correctly\n            ao5Selection.each(function(d, i) {\n                if (i >= ao5.length - 4) {\n                    console.log(\"\\uD83D\\uDFE2 AO5 Point \".concat(i, \": x=\").concat(newXScale(d.x), \", y=\").concat(newYScale(d.y)));\n                }\n            });\n            ao12Selection.each(function(d, i) {\n                if (i >= ao12.length - 12) {\n                    console.log(\"\\uD83D\\uDD34 AO12 Point \".concat(i, \": x=\").concat(newXScale(d.x), \", y=\").concat(newYScale(d.y)));\n                }\n            });\n            // ‚úÖ Update single solve points\n            svg.selectAll('.point-single').data(processedData, (d)=>d.timestamp).join('circle').attr('class', 'point-single').attr('cx', (d)=>newXScale(new Date(d.timestamp))) // FIX: Use newXScale\n            .attr('cy', (d)=>newYScale(d.time)) // FIX: Use newYScale\n            .attr('r', 5).attr('fill', 'blue').on(\"mouseover\", (event, d)=>showTooltip(event, d.timestamp)).on(\"mouseout\", ()=>tooltip.style(\"visibility\", \"hidden\"));\n            // ‚úÖ Update single solve line\n            svg.selectAll('.line-single').attr('d', d3.line().curve(d3.curveMonotoneX).x((d)=>newXScale(new Date(d.timestamp))).y((d)=>newYScale(d.time)));\n            // ‚úÖ Ensure AO5 line aligns dynamically\n            svg.selectAll('.line-ao5').datum(ao5.map((val, i)=>({\n                    timestamp: timestamps[i],\n                    value: val\n                }))).attr('d', d3.line().curve(d3.curveMonotoneX).defined((d)=>d.value !== null).x((d)=>newXScale(new Date(d.timestamp))).y((d)=>newYScale(d.value)));\n            // ‚úÖ Ensure AO12 line aligns dynamically\n            svg.selectAll('.line-ao12').datum(ao12.map((val, i)=>({\n                    timestamp: timestamps[i],\n                    value: val\n                }))).attr('d', d3.line().curve(d3.curveMonotoneX).defined((d)=>d.value !== null).x((d)=>newXScale(new Date(d.timestamp))).y((d)=>newYScale(d.value)));\n        }\n        svg.append('path').datum(processedData).attr('class', 'line-single').attr('stroke', 'blue').attr('fill', 'none').attr('stroke-width', 2).attr('d', d3.line().curve(d3.curveMonotoneX).x((d)=>xScale(new Date(d.timestamp))).y((d)=>yScale(d.time)));\n        svg.selectAll('.line-ao5').data([\n            ao5\n        ]) // ‚úÖ Use .data([]) instead of .datum()\n        .join(\"path\").attr('class', 'line-ao5').attr('stroke', 'green').attr('fill', 'none').attr('stroke-width', 2).attr('d', d3.line().curve(d3.curveMonotoneX).defined((_, i)=>i >= 4 && ao5[i] !== null).x((_, i)=>xScale(new Date(timestamps[i]))) // ‚úÖ Use timestamps\n        .y((_, i)=>yScale(ao5[i])));\n        svg.selectAll('.line-ao12').data([\n            ao12\n        ]) // ‚úÖ Use .data([]) instead of .datum()\n        .join(\"path\").attr('class', 'line-ao12').attr('stroke', 'red').attr('fill', 'none').attr('stroke-width', 2).attr('d', d3.line().curve(d3.curveMonotoneX).defined((_, i)=>i >= 11 && ao12[i] !== null).x((_, i)=>xScale(new Date(timestamps[i]))) // ‚úÖ Use timestamps\n        .y((_, i)=>yScale(ao12[i])));\n        const tooltip = d3.select(containerRef.current).append('div').attr('class', 'absolute bg-white p-2 border rounded shadow text-sm').style('visibility', 'hidden').style('position', 'absolute');\n        function showTooltip(event, timestamp) {\n            if (!timestamp) {\n                console.warn(\"‚ö†Ô∏è showTooltip called with invalid timestamp:\", timestamp);\n                return;\n            }\n            // Find all data points with the same timestamp\n            const singleData = processedData.find((d)=>d.timestamp.getTime() === timestamp.getTime());\n            const ao5DataPoint = ao5Data.find((d)=>d.timestamp.getTime() === timestamp.getTime());\n            const ao12DataPoint = ao12Data.find((d)=>d.timestamp.getTime() === timestamp.getTime());\n            const singleTime = singleData ? singleData.time.toFixed(2) : \"-\";\n            const ao5Time = ao5DataPoint ? ao5DataPoint.value.toFixed(2) : \"-\";\n            const ao12Time = ao12DataPoint ? ao12DataPoint.value.toFixed(2) : \"-\";\n            console.log(\"\\uD83D\\uDFE2 Showing tooltip for timestamp \".concat(timestamp, \": Single=\").concat(singleTime, \", AO5=\").concat(ao5Time, \", AO12=\").concat(ao12Time));\n            tooltip.html(\"\\n                <div><strong>Single:</strong> \".concat(singleTime, \"s</div>\\n                <div><strong>AO5:</strong> \").concat(ao5Time, \"s</div>\\n                <div><strong>AO12:</strong> \").concat(ao12Time, \"s</div>\\n            \")).style('visibility', 'visible').style('position', 'fixed').style('background', 'white').style('padding', '6px').style('border', '1px solid #ccc').style('border-radius', '5px').style('box-shadow', '2px 2px 10px rgba(0, 0, 0, 0.1)').style('font-size', '12px').style('pointer-events', 'none').style('z-index', '1000').style('transform', 'translate(0, -50%)');\n            tooltip.style('left', \"\".concat(event.pageX + 12, \"px\")).style('top', \"\".concat(event.pageY, \"px\"));\n        }\n        function hideTooltip() {\n            tooltip.style('visibility', 'hidden');\n        }\n        setTimeout(()=>{\n            updatePlot(xScale, yScale); // ‚úÖ Force render after initialization\n        }, 100);\n        function addPoints(data, color, className, valueAccessor, minIndex, label) {\n            // ‚úÖ Ensure that we correctly iterate over the full dataset\n            const validPoints = data.map((val, i)=>({\n                    x: i,\n                    y: valueAccessor(i)\n                })).filter((d)=>d.y !== null && d.x >= minIndex); // ‚úÖ Removed x < times.length constraint\n            console.log(\"\\n\\uD83D\\uDFE2 Adding Points for \".concat(label, \" | Class: \").concat(className, \" | MinIndex: \").concat(minIndex));\n            console.log(\"‚úî Valid Points Count: \".concat(validPoints.length));\n            console.log(\"\\uD83D\\uDCCD First 5 Points:\", validPoints.slice(0, 5));\n            console.log(\"\\uD83D\\uDCCD Last 5 Points:\", validPoints.slice(-5));\n            validPoints.forEach((point, i)=>{\n                console.log(\"\\uD83D\\uDD35 \".concat(label, \" Point \").concat(i + minIndex, \": RawX=\").concat(point.x, \", ScaledX=\").concat(xScale(point.x), \", \") + \"RawY=\".concat(point.y.toFixed(3), \", ScaledY=\").concat(yScale(point.y).toFixed(2)));\n            });\n            // Ensure data binding is done correctly\n            svg.selectAll(\".\".concat(className)).data(validPoints, (d)=>d.x) // Ensure unique key binding\n            .join(\"circle\") // Ensure proper binding\n            .attr('class', \"point \".concat(className)).attr('cx', (d)=>xScale(d.x)).attr('cy', (d)=>yScale(d.y)).attr('r', 5).attr('fill', color);\n        }\n        // ‚úÖ Ensure AO5 & AO12 points are fully added before updating\n        addPoints(times, 'blue', 'point-single', (i)=>times[i], 0, \"Single\");\n        addPoints(ao5, 'green', 'point-ao5', (i)=>ao5[i], 4, \"AO5\");\n        addPoints(ao12, 'red', 'point-ao12', (i)=>ao12[i], 11, \"AO12\");\n        const controls = d3.select(containerRef.current).append('div').attr('class', 'absolute top-2 right-2 bg-white p-2 rounded shadow flex space-x-4'); // Horizontal layout with spacing\n        // Previous Cluster Button\n        controls.append('button').html('<img src=\"/dataVis-previous.svg\" alt=\"Previous\" width=\"24\" height=\"24\">').style('margin', '5px') // Adds spacing around the button\n        .attr('disabled', clusters.length === 0 || currentClusterIndex === 0 ? 'disabled' : null).on('click', prevCluster);\n        // Next Cluster Button\n        controls.append('button').html('<img src=\"/dataVis-next.svg\" alt=\"Next\" width=\"24\" height=\"24\">').style('margin', '5px').attr('disabled', clusters.length === 0 || currentClusterIndex >= clusters.length - 1 ? 'disabled' : null).on('click', nextCluster);\n        // Autoscale Button\n        controls.append('button').html('<img src=\"/dataVis-resize-scaling.svg\" alt=\"Autoscale\" width=\"24\" height=\"24\">').style('margin', '5px').on('click', autoscale);\n        // Switch to Time View Button\n        controls.append('button').html('<img src=\"/dataVis-switch.svg\" alt=\"Switch View\" width=\"24\" height=\"24\">').style('margin', '5px').on('click', ()=>setShowIndexView(true));\n    }\n    function autoscale() {\n        console.log(\"üîç Autoscale triggered...\");\n        if (!clusters || clusters.length === 0) {\n            console.warn(\"‚ö†Ô∏è No clusters available for autoscale!\");\n            return;\n        }\n        console.log(\"üìå Autoscaling to first cluster...\");\n        setCurrentClusterIndex(0);\n        const firstCluster = clusters[0];\n        if (!firstCluster || firstCluster.length === 0) {\n            console.warn(\"‚ö†Ô∏è First cluster is empty, cannot autoscale!\");\n            return;\n        }\n        const newDomain = [\n            new Date(firstCluster[0].timestamp),\n            new Date(firstCluster.slice(-1)[0].timestamp)\n        ];\n        console.log(\"‚úÖ Setting autoscale X-Domain to:\", newDomain);\n        setXDomain(newDomain);\n        xDomainRef.current = newDomain;\n        // ‚úÖ Force React to update UI state\n        setTimeout(()=>{\n            setClusters([\n                ...clusters\n            ]); // Force re-evaluation of clusters state\n        }, 0);\n    }\n    function nextCluster() {\n        console.log(\"‚û°Ô∏è Next cluster clicked...\");\n        if (currentClusterIndex < clusters.length - 1) {\n            const nextIndex = currentClusterIndex + 1;\n            console.log(\"üìå Moving to next cluster:\", nextIndex);\n            setCurrentClusterIndex(nextIndex);\n            const newDomain = [\n                new Date(clusters[nextIndex][0].timestamp),\n                new Date(clusters[nextIndex].slice(-1)[0].timestamp)\n            ];\n            setXDomain(newDomain);\n            xDomainRef.current = newDomain;\n        } else {\n            console.warn(\"‚ö†Ô∏è No next cluster available!\");\n        }\n    }\n    function prevCluster() {\n        console.log(\"‚¨ÖÔ∏è Previous cluster clicked...\");\n        if (currentClusterIndex > 0) {\n            const prevIndex = currentClusterIndex - 1;\n            console.log(\"üìå Moving to previous cluster:\", prevIndex);\n            setCurrentClusterIndex(prevIndex);\n            const newDomain = [\n                new Date(clusters[prevIndex][0].timestamp),\n                new Date(clusters[prevIndex].slice(-1)[0].timestamp)\n            ];\n            setXDomain(newDomain);\n            xDomainRef.current = newDomain;\n        } else {\n            console.warn(\"‚ö†Ô∏è No previous cluster available!\");\n        }\n    }\n    // return (\n    //     <div className=\"w-screen h-[calc(100vh-100px)] bg-white relative\">\n    //         {/* ‚úÖ Chart container */}\n    //         <div ref={containerRef} className=\"w-full h-full\"></div>\n    //\n    //         {/* ‚úÖ Controls Section */}\n    //         <div className=\"absolute top-2 right-2 bg-white p-2 rounded shadow flex space-x-2\">\n    //             <button\n    //                 className=\"px-4 py-2 bg-gray-200 rounded hover:bg-gray-300\"\n    //                 disabled={clusters.length === 0 || currentClusterIndex === 0}\n    //                 onClick={() => prevCluster()}\n    //             >\n    //                 Previous Cluster\n    //             </button>\n    //\n    //             <button\n    //                 className=\"px-4 py-2 bg-gray-200 rounded hover:bg-gray-300\"\n    //                 disabled={clusters.length === 0 || currentClusterIndex >= clusters.length - 1}\n    //                 onClick={() => nextCluster()}\n    //             >\n    //                 Next Cluster\n    //             </button>\n    //\n    //             <button\n    //                 className=\"px-4 py-2 bg-gray-200 rounded hover:bg-gray-300\"\n    //                 onClick={() => autoscale()}\n    //             >\n    //                 Autoscale\n    //             </button>\n    //\n    //             {/* ‚úÖ Switch button to go to TrendAnaTime.js */}\n    //             <button\n    //                 className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-700\"\n    //                 onClick={() => setShowIndexView(true)}\n    //             >\n    //                 Switch to Time View\n    //             </button>\n    //         </div>\n    //     </div>\n    // );\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: containerRef,\n        className: \"w-screen h-[calc(100vh-100px)] bg-white relative\"\n    }, void 0, false, {\n        fileName: \"E:\\\\Wpi\\\\Regularly\\\\Courses\\\\Sr\\\\2024_C_Term\\\\CS4241\\\\HW\\\\final-project-kermit-the-frog\\\\src\\\\app\\\\dataVis\\\\TrendAnaTime.js\",\n        lineNumber: 729,\n        columnNumber: 9\n    }, this);\n}\n_s(SolveTimeTrend, \"Q25XOb70ZXebfFN2RMbglhBYjRA=\");\n_c = SolveTimeTrend;\nvar _c;\n$RefreshReg$(_c, \"SolveTimeTrend\");\n\n\n;\r\n    // Wrapped in an IIFE to avoid polluting the global scope\r\n    ;\r\n    (function () {\r\n        var _a, _b;\r\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\r\n        // to extract CSS. For backwards compatibility, we need to check we're in a\r\n        // browser context before continuing.\r\n        if (typeof self !== 'undefined' &&\r\n            // AMP / No-JS mode does not inject these helpers:\r\n            '$RefreshHelpers$' in self) {\r\n            // @ts-ignore __webpack_module__ is global\r\n            var currentExports = module.exports;\r\n            // @ts-ignore __webpack_module__ is global\r\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\r\n            // This cannot happen in MainTemplate because the exports mismatch between\r\n            // templating and execution.\r\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\r\n            // A module can be accepted automatically based on its exports, e.g. when\r\n            // it is a Refresh Boundary.\r\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\r\n                // Save the previous exports signature on update so we can compare the boundary\r\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\r\n                module.hot.dispose(function (data) {\r\n                    data.prevSignature =\r\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\r\n                });\r\n                // Unconditionally accept an update to this module, we'll check if it's\r\n                // still a Refresh Boundary later.\r\n                // @ts-ignore importMeta is replaced in the loader\r\n                module.hot.accept();\r\n                // This field is set when the previous version of this module was a\r\n                // Refresh Boundary, letting us know we need to check for invalidation or\r\n                // enqueue an update.\r\n                if (prevSignature !== null) {\r\n                    // A boundary can become ineligible if its exports are incompatible\r\n                    // with the previous exports.\r\n                    //\r\n                    // For example, if you add/remove/change exports, we'll want to\r\n                    // re-execute the importing modules, and force those components to\r\n                    // re-render. Similarly, if you convert a class component to a\r\n                    // function, we want to invalidate the boundary.\r\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\r\n                        module.hot.invalidate();\r\n                    }\r\n                    else {\r\n                        self.$RefreshHelpers$.scheduleUpdate();\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                // Since we just executed the code for the module, it's possible that the\r\n                // new exports made it ineligible for being a boundary.\r\n                // We only care about the case when we were _previously_ a boundary,\r\n                // because we already accepted this update (accidental side effect).\r\n                var isNoLongerABoundary = prevSignature !== null;\r\n                if (isNoLongerABoundary) {\r\n                    module.hot.invalidate();\r\n                }\r\n            }\r\n        }\r\n    })();\r\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9hcHAvZGF0YVZpcy9UcmVuZEFuYVRpbWUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQUVvRDtBQUNSO0FBQzVDLE1BQU1JLEtBQUssTUFBTSw0TUFBWTtBQUVkLFNBQVNDLGVBQWUsS0FBVTtRQUFWLEVBQUVDLE1BQU0sRUFBRSxHQUFWOztJQUNuQyxNQUFNQyxlQUFlTiw2Q0FBTUEsQ0FBQztJQUM1QixNQUFNLENBQUNPLHFCQUFxQkMsdUJBQXVCLEdBQUdQLCtDQUFRQSxDQUFDO0lBQy9ELE1BQU0sQ0FBQ1EsVUFBVUMsWUFBWSxHQUFHVCwrQ0FBUUEsQ0FBQyxFQUFFO0lBQzNDLE1BQU0sQ0FBQ1UsU0FBU0MsV0FBVyxHQUFHWCwrQ0FBUUEsQ0FBQztJQUN2QyxNQUFNWSxhQUFhYiw2Q0FBTUEsQ0FBQztJQUUxQixvRUFBb0U7SUFDcEUsTUFBTSxDQUFDYyxlQUFlQyxpQkFBaUIsR0FBR2QsK0NBQVFBLENBQUM7SUFFbkRGLGdEQUFTQTtvQ0FBQztZQUNOaUIsUUFBUUMsR0FBRyxDQUFDLHNDQUFzQ047WUFFbEQsSUFBSSxDQUFDTixVQUFVQSxPQUFPYSxNQUFNLEtBQUssR0FBRztnQkFDaENGLFFBQVFHLElBQUksQ0FBQztnQkFDYjtZQUNKO1lBRUEsTUFBTUMsWUFBWWQsYUFBYWUsT0FBTztZQUN0QyxJQUFJLENBQUNELFdBQVc7Z0JBQ1pKLFFBQVFHLElBQUksQ0FBQztnQkFDYjtZQUNKO1lBRUFILFFBQVFDLEdBQUcsQ0FBQztZQUNaSyxtQkFBbUJqQjtRQUN2QjttQ0FBRztRQUFDTTtRQUFTTDtLQUFhLEdBQUksaUVBQWlFO0lBRS9GUCxnREFBU0E7b0NBQUM7WUFDTixJQUFJLENBQUNNLFVBQVUsQ0FBQ2tCLE1BQU1DLE9BQU8sQ0FBQ25CLFdBQVdBLE9BQU9hLE1BQU0sS0FBSyxHQUFHO1lBRTlERixRQUFRQyxHQUFHLENBQUM7WUFDWixNQUFNUSxtQkFBbUJDLGFBQWFyQjtZQUN0Q0ssWUFBWWU7WUFFWixJQUFJQSxpQkFBaUJQLE1BQU0sR0FBRyxHQUFHO2dCQUM3QixNQUFNUyxlQUFlRixnQkFBZ0IsQ0FBQyxFQUFFO2dCQUN4QyxNQUFNRyxZQUFZO29CQUNkLElBQUlDLEtBQUtGLFlBQVksQ0FBQyxFQUFFLENBQUNHLFNBQVM7b0JBQ2xDLElBQUlELEtBQUtGLGFBQWFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUNELFNBQVM7aUJBQy9DO2dCQUVEbEIsV0FBV2dCO2dCQUNYZixXQUFXUSxPQUFPLEdBQUdPLFdBQVksMEJBQTBCO2dCQUUzRCw2REFBNkQ7Z0JBQzdEWixRQUFRQyxHQUFHLENBQUMsNENBQTRDVztZQUM1RDtZQUVBLHNCQUFzQjtZQUN0QkksT0FBT0MsZ0JBQWdCLENBQUMsVUFBVUM7WUFDbEM7NENBQU8sSUFBTUYsT0FBT0csbUJBQW1CLENBQUMsVUFBVUQ7O1FBQ3REO21DQUFHO1FBQUM3QjtLQUFPLEdBQUksOEJBQThCO0lBRTdDLElBQUlTLGVBQWU7UUFDZixxQkFBTyw4REFBQ1osc0RBQWFBO1lBQUNHLFFBQVFBOzs7Ozs7SUFDbEM7SUFFQSxTQUFTNkI7UUFDTGxCLFFBQVFDLEdBQUcsQ0FBQztRQUVaLElBQUksQ0FBQ1osVUFBVUEsT0FBT2EsTUFBTSxLQUFLLEdBQUc7WUFDaENGLFFBQVFHLElBQUksQ0FBQztZQUNiO1FBQ0o7UUFFQSxJQUFJTSxtQkFBbUJoQjtRQUV2QixJQUFJQSxTQUFTUyxNQUFNLEtBQUssR0FBRztZQUN2QkYsUUFBUUcsSUFBSSxDQUFDO1lBQ2JNLG1CQUFtQkMsYUFBYXJCO1lBQ2hDSyxZQUFZZTtRQUNoQjtRQUVBLElBQUlBLGlCQUFpQlAsTUFBTSxLQUFLLEdBQUc7WUFDL0JGLFFBQVFHLElBQUksQ0FBQztZQUNiO1FBQ0o7UUFFQSxNQUFNaUIsbUJBQW1CN0I7UUFDekIsTUFBTThCLGNBQWN4QixXQUFXUSxPQUFPO1FBRXRDTCxRQUFRQyxHQUFHLENBQUMsMENBQWlELE9BQWpCbUI7UUFDNUNwQixRQUFRQyxHQUFHLENBQUMseUNBQXlDb0I7UUFFckQsd0NBQXdDO1FBQ3hDN0IsdUJBQXVCNEI7UUFDdkJ4QixXQUFXeUI7UUFDWHhCLFdBQVdRLE9BQU8sR0FBR2dCO1FBRXJCLDZDQUE2QztRQUM3Q0MsV0FBVztZQUNQNUIsWUFBWTttQkFBSWU7YUFBaUI7WUFDakNiLFdBQVc7bUJBQUl5QjthQUFZO1lBQzNCN0IsdUJBQXVCNEI7UUFDM0IsR0FBRztRQUVILGdDQUFnQztRQUNoQ2QsbUJBQW1CakI7UUFFbkJXLFFBQVFDLEdBQUcsQ0FBQztJQUNoQjtJQUVBLFNBQVNTLGFBQWFhLElBQUk7UUFDdEJ2QixRQUFRQyxHQUFHLENBQUM7UUFFWixJQUFJUSxtQkFBbUIsRUFBRTtRQUN6QixJQUFJZSxpQkFBaUI7WUFBQ0QsSUFBSSxDQUFDLEVBQUU7U0FBQztRQUU5QixJQUFLLElBQUlFLElBQUksR0FBR0EsSUFBSUYsS0FBS3JCLE1BQU0sRUFBRXVCLElBQUs7WUFDbEMsSUFBSSxJQUFJWixLQUFLVSxJQUFJLENBQUNFLEVBQUUsQ0FBQ1gsU0FBUyxJQUFJLElBQUlELEtBQUtVLElBQUksQ0FBQ0UsSUFBSSxFQUFFLENBQUNYLFNBQVMsSUFBSSxLQUFLLEtBQUssTUFBTTtnQkFDaEYsSUFBSVUsZUFBZXRCLE1BQU0sR0FBRyxHQUFHO29CQUMzQixNQUFNd0IsZ0JBQWdCLElBQUlDLElBQUlILGVBQWVJLEdBQUcsQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRWYsU0FBUztvQkFDakUsSUFBSVksY0FBY0ksSUFBSSxHQUFHLEdBQUc7d0JBQ3hCckIsaUJBQWlCc0IsSUFBSSxDQUFDUDtvQkFDMUIsT0FBTzt3QkFDSHhCLFFBQVFHLElBQUksQ0FBQyxnREFBZ0RxQjtvQkFDakU7Z0JBQ0o7Z0JBQ0FBLGlCQUFpQixFQUFFO1lBQ3ZCO1lBQ0FBLGVBQWVPLElBQUksQ0FBQ1IsSUFBSSxDQUFDRSxFQUFFO1FBQy9CO1FBRUEsc0NBQXNDO1FBQ3RDLElBQUlELGVBQWV0QixNQUFNLEdBQUcsR0FBRztZQUMzQixNQUFNd0IsZ0JBQWdCLElBQUlDLElBQUlILGVBQWVJLEdBQUcsQ0FBQ0MsQ0FBQUEsSUFBS0EsRUFBRWYsU0FBUztZQUNqRSxJQUFJWSxjQUFjSSxJQUFJLEdBQUcsR0FBRztnQkFDeEJyQixpQkFBaUJzQixJQUFJLENBQUNQO1lBQzFCLE9BQU87Z0JBQ0h4QixRQUFRRyxJQUFJLENBQUMsZ0RBQWdEcUI7WUFDakU7UUFDSjtRQUVBeEIsUUFBUUMsR0FBRyxDQUFDLG1FQUFtRVEsaUJBQWlCUCxNQUFNLEVBQUVPO1FBQ3hHLE9BQU9BO0lBQ1g7SUFFQSxTQUFTdUIsc0JBQXNCVCxJQUFJLEVBQUVVLFVBQVU7UUFDM0MsT0FBT1YsS0FBS0ssR0FBRyxDQUFDLENBQUNNLEdBQUdULEdBQUdVO1lBQ25CLElBQUlWLElBQUlRLGFBQWEsR0FBRyxPQUFPLE1BQU8sb0NBQW9DO1lBQzFFLE1BQU1HLFNBQVNELElBQUlwQixLQUFLLENBQUNVLElBQUtRLENBQUFBLGFBQWEsSUFBSVIsSUFBSTtZQUNuRCxPQUFPVyxPQUFPQyxNQUFNLENBQUMsQ0FBQ0MsS0FBS0MsTUFBUUQsTUFBTUMsS0FBSyxLQUFLSCxPQUFPbEMsTUFBTTtRQUNwRTtJQUNKO0lBRUEsU0FBU0ksbUJBQW1CaUIsSUFBSTtRQUM1QnZCLFFBQVFDLEdBQUcsQ0FBQyw4Q0FBOENKLFdBQVdRLE9BQU87UUFDNUUsSUFBSSxDQUFDZixhQUFhZSxPQUFPLEVBQUM7WUFDdEJMLFFBQVFHLElBQUksQ0FBQztZQUNiO1FBQ0o7UUFFQSxNQUFNQyxZQUFZakIsR0FBR3FELE1BQU0sQ0FBQ2xELGFBQWFlLE9BQU87UUFDaERELFVBQVVxQyxTQUFTLENBQUMsS0FBS0MsTUFBTTtRQUUvQixNQUFNQyxRQUFRckQsYUFBYWUsT0FBTyxDQUFDdUMsV0FBVyxJQUFJO1FBQ2xELE1BQU1DLFNBQVN2RCxhQUFhZSxPQUFPLENBQUN5QyxZQUFZLElBQUk7UUFFcEQ5QyxRQUFRQyxHQUFHLENBQUMsd0JBQXdCMEMsT0FBT0U7UUFFM0MsTUFBTUUsTUFBTTNDLFVBQVU0QyxNQUFNLENBQUMsT0FDeEJDLElBQUksQ0FBQyxTQUFTLFFBQ2RBLElBQUksQ0FBQyxVQUFVLFFBQ2ZBLElBQUksQ0FBQyxXQUFXLE9BQWdCSixPQUFURixPQUFNLEtBQVUsT0FBUEUsU0FDaENJLElBQUksQ0FBQyx1QkFBdUI7UUFFakMsc0NBQXNDO1FBQ3RDLE1BQU1DLGdCQUFnQjNCLEtBQ2pCSyxHQUFHLENBQUN1QixDQUFBQTtZQUNELElBQUksQ0FBQ0EsTUFBTXJDLFNBQVMsRUFBRTtnQkFDbEJkLFFBQVFHLElBQUksQ0FBQyw2Q0FBNkNnRDtnQkFDMUQsT0FBTztZQUNYO1lBQ0EsT0FBTztnQkFDSHJDLFdBQVcsSUFBSUQsS0FBS3NDLE1BQU1yQyxTQUFTO2dCQUNuQ3NDLE1BQU1ELE1BQU1DLElBQUksR0FBRztZQUN2QjtRQUNKLEdBQ0NDLE1BQU0sQ0FBQ3hCLENBQUFBLElBQUtBLE1BQU0sT0FBUSx5QkFBeUI7UUFFeEQsTUFBTXlCLGFBQWFKLGNBQWN0QixHQUFHLENBQUNDLENBQUFBLElBQUtBLEVBQUVmLFNBQVM7UUFDckQsTUFBTXlDLFFBQVFMLGNBQWN0QixHQUFHLENBQUNDLENBQUFBLElBQUtBLEVBQUV1QixJQUFJO1FBRTNDcEQsUUFBUUMsR0FBRyxDQUFDLHlCQUF5QnFEO1FBRXJDLHlEQUF5RDtRQUN6RCxJQUFJRSxvQkFBb0I7UUFDeEIsSUFBSUMsa0JBQWtCSCxXQUFXcEQsTUFBTSxHQUFHO1FBRTFDLElBQUssSUFBSXVCLElBQUksR0FBR0EsSUFBSTZCLFdBQVdwRCxNQUFNLEVBQUV1QixJQUFLO1lBQ3hDLElBQUk2QixVQUFVLENBQUM3QixFQUFFLEdBQUc2QixVQUFVLENBQUMsRUFBRSxHQUFHLEtBQUssS0FBSyxNQUFNO2dCQUNoREcsa0JBQWtCaEM7Z0JBQ2xCO1lBQ0o7UUFDSjtRQUVBLGlDQUFpQztRQUNqQyxNQUFNaUMsaUJBQWlCO1lBQ25CSixVQUFVLENBQUNFLGtCQUFrQjtZQUM3QkYsVUFBVSxDQUFDRyxnQkFBZ0I7U0FDOUI7UUFFRHpELFFBQVFDLEdBQUcsQ0FBQyw2QkFBcUR5RCxPQUF4QkEsY0FBYyxDQUFDLEVBQUUsRUFBQyxRQUF3QixPQUFsQkEsY0FBYyxDQUFDLEVBQUU7UUFFbEYsTUFBTUMsTUFBTTNCLHNCQUFzQnVCLE9BQU87UUFDekMsTUFBTUssT0FBTzVCLHNCQUFzQnVCLE9BQU87UUFFMUMsTUFBTU0sVUFBVVAsV0FBVzFCLEdBQUcsQ0FBQyxDQUFDZCxXQUFXVyxJQUFPO2dCQUM5Q1gsV0FBV0E7Z0JBQ1hnRCxPQUFPSCxHQUFHLENBQUNsQyxFQUFFLEtBQUssT0FBT2tDLEdBQUcsQ0FBQ2xDLEVBQUUsR0FBRztZQUN0QyxJQUFJNEIsTUFBTSxDQUFDeEIsQ0FBQUEsSUFBS0EsRUFBRWlDLEtBQUssS0FBSyxPQUFPLHVCQUF1QjtRQUUxRCxNQUFNQyxXQUFXVCxXQUFXMUIsR0FBRyxDQUFDLENBQUNkLFdBQVdXLElBQU87Z0JBQy9DWCxXQUFXQTtnQkFDWGdELE9BQU9GLElBQUksQ0FBQ25DLEVBQUUsS0FBSyxPQUFPbUMsSUFBSSxDQUFDbkMsRUFBRSxHQUFHO1lBQ3hDLElBQUk0QixNQUFNLENBQUN4QixDQUFBQSxJQUFLQSxFQUFFaUMsS0FBSyxLQUFLLE9BQU8sdUJBQXVCO1lBSTlDakU7UUFGWixvREFBb0Q7UUFDcEQsSUFBSW1FLFNBQVM3RSxHQUFHOEUsU0FBUyxHQUNwQkMsTUFBTSxDQUFDckUsQ0FBQUEsc0JBQUFBLFdBQVdRLE9BQU8sY0FBbEJSLGlDQUFBQSxzQkFBc0I7WUFBQ3lELFVBQVUsQ0FBQyxFQUFFO1lBQUVBLFVBQVUsQ0FBQ0EsV0FBV3BELE1BQU0sR0FBRyxFQUFFO1NBQUMsRUFBRyx3QkFBd0I7U0FDMUdpRSxLQUFLLENBQUM7WUFBQztZQUFJeEIsUUFBUTtTQUFHO1FBRTNCM0MsUUFBUUMsR0FBRyxDQUFDLHFEQUFxRCtELE9BQU9FLE1BQU07UUFDOUVsRSxRQUFRQyxHQUFHLENBQUMsaUJBQWlCK0QsT0FBT0csS0FBSztRQUV6QyxNQUFNQyxTQUFTakYsR0FBR2tGLFdBQVcsR0FDeEJILE1BQU0sQ0FBQztZQUFDL0UsR0FBR21GLEdBQUcsQ0FBQ2Y7WUFBUXBFLEdBQUdvRixHQUFHLENBQUNoQjtTQUFPLEVBQ3JDWSxLQUFLLENBQUM7WUFBQztZQUFJdEIsU0FBUztTQUFHO1FBRTVCLG1CQUFtQjtRQUNuQixNQUFNMkIsUUFBUXpCLElBQUlDLE1BQU0sQ0FBQyxLQUNwQkMsSUFBSSxDQUFDLFNBQVMsVUFDZEEsSUFBSSxDQUFDLGFBQWEsZ0JBQTRCLE9BQVpKLFNBQVMsSUFBRyxNQUM5QzRCLElBQUksQ0FBQ3RGLEdBQUd1RixVQUFVLENBQUNWLFFBQVFXLFVBQVUsQ0FBQ3hGLEdBQUd5RixVQUFVLENBQUM7UUFFekQsK0NBQStDO1FBQy9DLElBQUlDLFdBQVc7UUFDZkwsTUFBTS9CLFNBQVMsQ0FBQyxRQUNYUSxJQUFJLENBQUMsTUFBTSxTQUFTLCtCQUErQjtTQUNuRDZCLElBQUksQ0FBQyxTQUFTakQsQ0FBQyxFQUFFSixDQUFDLEVBQUVzRCxLQUFLO1lBQ3RCLE1BQU1DLGNBQWM3RixHQUFHcUQsTUFBTSxDQUFDLElBQUk7WUFDbEMsTUFBTXlDLFVBQVU5RixHQUFHeUYsVUFBVSxDQUFDLGFBQWEsSUFBSS9ELEtBQUtnQjtZQUNwRCxJQUFJb0QsWUFBWUosVUFBVTtnQkFDdEJHLFlBQVloQyxNQUFNLENBQUMsU0FDZEMsSUFBSSxDQUFDLEtBQUssR0FDVkEsSUFBSSxDQUFDLE1BQU0sU0FDWGlDLElBQUksQ0FBQ0Q7Z0JBQ1ZKLFdBQVdJO1lBQ2Y7UUFDSjtRQUVKLE1BQU1FLFFBQVFwQyxJQUFJQyxNQUFNLENBQUMsS0FDcEJDLElBQUksQ0FBQyxTQUFTLFVBQ2RBLElBQUksQ0FBQyxhQUFjLG9CQUNuQndCLElBQUksQ0FBQ3RGLEdBQUdpRyxRQUFRLENBQUNoQjtRQUV0QixNQUFNaUIsWUFBWXRDLElBQUlDLE1BQU0sQ0FBQyxLQUFLQyxJQUFJLENBQUMsU0FBUztRQUVoRCxTQUFTcUMsU0FBU3RCLE1BQU0sRUFBRUksTUFBTTtZQUM1QmlCLFVBQVU1QyxTQUFTLENBQUMsS0FBS0MsTUFBTTtZQUUvQix3QkFBd0I7WUFDeEIyQyxVQUFVNUMsU0FBUyxDQUFDLG9CQUNmbEIsSUFBSSxDQUFDNkMsT0FBT21CLEtBQUssQ0FBQyxLQUNsQkMsS0FBSyxHQUNMeEMsTUFBTSxDQUFDLFFBQ1BDLElBQUksQ0FBQyxTQUFTLG1CQUNkQSxJQUFJLENBQUMsTUFBTSxJQUNYQSxJQUFJLENBQUMsTUFBTU4sUUFBUSxJQUNuQk0sSUFBSSxDQUFDLE1BQU1wQixDQUFBQSxJQUFLdUMsT0FBT3ZDLElBQ3ZCb0IsSUFBSSxDQUFDLE1BQU1wQixDQUFBQSxJQUFLdUMsT0FBT3ZDLElBQ3ZCb0IsSUFBSSxDQUFDLFVBQVUsUUFDZkEsSUFBSSxDQUFDLG9CQUFvQjtZQUU5QixzQkFBc0I7WUFDdEJvQyxVQUFVNUMsU0FBUyxDQUFDLGtCQUNmbEIsSUFBSSxDQUFDeUMsT0FBT3VCLEtBQUssQ0FBQyxLQUNsQkMsS0FBSyxHQUNMeEMsTUFBTSxDQUFDLFFBQ1BDLElBQUksQ0FBQyxTQUFTLGlCQUNkQSxJQUFJLENBQUMsTUFBTXBCLENBQUFBLElBQUttQyxPQUFPbkMsSUFDdkJvQixJQUFJLENBQUMsTUFBTXBCLENBQUFBLElBQUttQyxPQUFPbkMsSUFDdkJvQixJQUFJLENBQUMsTUFBTSxJQUNYQSxJQUFJLENBQUMsTUFBTUosU0FBUyxJQUNwQkksSUFBSSxDQUFDLFVBQVUsUUFDZkEsSUFBSSxDQUFDLG9CQUFvQjtRQUNsQztRQUVBcUMsU0FBU3RCLFFBQVFJO1FBRWpCLE1BQU1xQixPQUFPdEcsR0FBR3NHLElBQUksRUFDaEIseUJBQXlCO1FBQ3pCLDhDQUE4QztTQUM3Q0MsRUFBRSxDQUFDLFFBQVEsQ0FBQ0M7WUFDVCxNQUFNQyxZQUFZRCxNQUFNQyxTQUFTO1lBQ2pDLE1BQU1DLFlBQVlELFVBQVVFLFFBQVEsQ0FBQzlCO1lBQ3JDLE1BQU0rQixZQUFZSCxVQUFVSSxRQUFRLENBQUM1QjtZQUVyQ3BFLFFBQVFDLEdBQUcsQ0FBQywwQkFBMEI0RixVQUFVM0IsTUFBTTtZQUV0RCxtQkFBbUI7WUFDbkIrQixXQUFXSixXQUFXRTtZQUV0QixjQUFjO1lBQ2R2QixNQUFNQyxJQUFJLENBQUN0RixHQUFHdUYsVUFBVSxDQUFDbUIsV0FBV2xCLFVBQVUsQ0FBQ3hGLEdBQUd5RixVQUFVLENBQUM7WUFFN0QsSUFBSXNCLGVBQWU7WUFDbkIxQixNQUFNL0IsU0FBUyxDQUFDLFFBQ1hRLElBQUksQ0FBQyxNQUFNLFNBQ1g2QixJQUFJLENBQUMsU0FBU2pELENBQUMsRUFBRUosQ0FBQyxFQUFFc0QsS0FBSztnQkFDdEIsTUFBTUMsY0FBYzdGLEdBQUdxRCxNQUFNLENBQUMsSUFBSTtnQkFDbEMsTUFBTXlDLFVBQVU5RixHQUFHeUYsVUFBVSxDQUFDLGFBQWEsSUFBSS9ELEtBQUtnQjtnQkFDcEQsSUFBSW9ELFlBQVlpQixjQUFjO29CQUMxQmxCLFlBQVloQyxNQUFNLENBQUMsU0FDZEMsSUFBSSxDQUFDLEtBQUssR0FDVkEsSUFBSSxDQUFDLE1BQU0sU0FDWGlDLElBQUksQ0FBQ0Q7b0JBQ1ZpQixlQUFlakI7Z0JBQ25CO1lBQ0o7WUFDSkUsTUFBTVYsSUFBSSxDQUFDdEYsR0FBR2lHLFFBQVEsQ0FBQ1c7WUFFdkIsOEJBQThCO1lBQzlCVCxTQUFTTyxXQUFXRTtRQUN4QjtRQUVKaEQsSUFBSTBCLElBQUksQ0FBQ2dCO1FBRVQseUNBQXlDO1FBQ3pDLE1BQU1VLFNBQVNwRCxJQUFJQyxNQUFNLENBQUMsS0FDckJDLElBQUksQ0FBQyxhQUFhLGFBQXlCLE9BQVpOLFFBQVEsS0FBSSxXQUFTLG9DQUFvQztRQUU3RixNQUFNeUQsY0FBYztZQUNoQjtnQkFBRUMsT0FBTztnQkFBUUMsT0FBTztZQUFTO1lBQ2pDO2dCQUFFRCxPQUFPO2dCQUFTQyxPQUFPO1lBQU07WUFDL0I7Z0JBQUVELE9BQU87Z0JBQU9DLE9BQU87WUFBTztTQUNqQztRQUVERixZQUFZRyxPQUFPLENBQUMsQ0FBQ0MsTUFBTS9FO1lBQ3ZCMEUsT0FBT25ELE1BQU0sQ0FBQyxRQUNUQyxJQUFJLENBQUMsS0FBSyxHQUNWQSxJQUFJLENBQUMsS0FBS3hCLElBQUksSUFDZHdCLElBQUksQ0FBQyxTQUFTLElBQ2RBLElBQUksQ0FBQyxVQUFVLElBQ2ZBLElBQUksQ0FBQyxRQUFRdUQsS0FBS0gsS0FBSztZQUU1QkYsT0FBT25ELE1BQU0sQ0FBQyxRQUNUQyxJQUFJLENBQUMsS0FBSyxJQUNWQSxJQUFJLENBQUMsS0FBS3hCLElBQUksS0FBSyxJQUNuQndCLElBQUksQ0FBQyxRQUFRLFNBQ2JBLElBQUksQ0FBQyxhQUFhLFFBQ2xCaUMsSUFBSSxDQUFDc0IsS0FBS0YsS0FBSztRQUN4QjtRQUVSLHNDQUFzQztRQUM5QnZELElBQUkyQyxFQUFFLENBQUMsWUFBWSxDQUFDQyxRQUFVYyxVQUFVZDtRQUVoRCxxRUFBcUU7UUFDN0Q1QyxJQUFJMEIsSUFBSSxDQUFDZ0IsTUFBTUMsRUFBRSxDQUFDLGlCQUFpQjtRQUVuQyxTQUFTTyxXQUFXSixTQUFTLEVBQUVFLFNBQVM7WUFDcEMvRixRQUFRQyxHQUFHLENBQUM7WUFDWkQsUUFBUUMsR0FBRyxDQUFDLDBCQUEwQjRGLFVBQVUzQixNQUFNO1lBQ3REbEUsUUFBUUMsR0FBRyxDQUFDLDBCQUEwQjhGLFVBQVU3QixNQUFNO1lBRXRELDREQUE0RDtZQUM1RCxNQUFNd0MsZUFBZTNELElBQUlOLFNBQVMsQ0FBQyxjQUM5QmxCLElBQUksQ0FBQ3NDLFNBQVNoQyxDQUFBQSxJQUFLQSxFQUFFZixTQUFTLEVBQzlCNkYsSUFBSSxDQUFDLFVBQ0wxRCxJQUFJLENBQUMsU0FBUyxhQUNkQSxJQUFJLENBQUMsTUFBTXBCLENBQUFBLElBQUttQyxPQUFPLElBQUluRCxLQUFLZ0IsRUFBRWYsU0FBUyxJQUFLLHdCQUF3QjthQUN4RW1DLElBQUksQ0FBQyxNQUFNcEIsQ0FBQUEsSUFBS3VDLE9BQU92QyxFQUFFaUMsS0FBSyxHQUM5QmIsSUFBSSxDQUFDLEtBQUssR0FDVkEsSUFBSSxDQUFDLFFBQVEsU0FDYnlDLEVBQUUsQ0FBQyxhQUFhLENBQUNDLE9BQU85RCxJQUFNK0UsWUFBWWpCLE9BQU85RCxFQUFFZixTQUFTLEdBQzVENEUsRUFBRSxDQUFDLFlBQVksSUFBTW1CLFFBQVFDLEtBQUssQ0FBQyxjQUFjO1lBRXRELE1BQU1DLGdCQUFnQmhFLElBQUlOLFNBQVMsQ0FBQyxlQUMvQmxCLElBQUksQ0FBQ3dDLFVBQVVsQyxDQUFBQSxJQUFLQSxFQUFFZixTQUFTLEVBQy9CNkYsSUFBSSxDQUFDLFVBQ0wxRCxJQUFJLENBQUMsU0FBUyxjQUNkQSxJQUFJLENBQUMsTUFBTXBCLENBQUFBLElBQUttQyxPQUFPLElBQUluRCxLQUFLZ0IsRUFBRWYsU0FBUyxJQUFLLHdCQUF3QjthQUN4RW1DLElBQUksQ0FBQyxNQUFNcEIsQ0FBQUEsSUFBS3VDLE9BQU92QyxFQUFFaUMsS0FBSyxHQUM5QmIsSUFBSSxDQUFDLEtBQUssR0FDVkEsSUFBSSxDQUFDLFFBQVEsT0FDYnlDLEVBQUUsQ0FBQyxhQUFhLENBQUNDLE9BQU85RCxJQUFNK0UsWUFBWWpCLE9BQU85RCxFQUFFZixTQUFTLEdBQzVENEUsRUFBRSxDQUFDLFlBQVksSUFBTW1CLFFBQVFDLEtBQUssQ0FBQyxjQUFjO1lBRXREOUcsUUFBUUMsR0FBRyxDQUFDLGdDQUFrRTBELE9BQWxDK0MsYUFBYTVFLElBQUksSUFBRyxnQkFBeUIsT0FBWDZCLElBQUl6RCxNQUFNLEVBQUM7WUFDekZGLFFBQVFDLEdBQUcsQ0FBQyxpQ0FBb0UyRCxPQUFuQ21ELGNBQWNqRixJQUFJLElBQUcsZ0JBQTBCLE9BQVo4QixLQUFLMUQsTUFBTSxFQUFDO1lBRTVGLElBQUl3RyxhQUFhNUUsSUFBSSxPQUFPLEdBQUc5QixRQUFRRyxJQUFJLENBQUM7WUFDNUMsSUFBSTRHLGNBQWNqRixJQUFJLE9BQU8sR0FBRzlCLFFBQVFHLElBQUksQ0FBQztZQUU3QyxvQ0FBb0M7WUFDcEN1RyxhQUFhekQsSUFBSSxDQUFDLE1BQU1wQixDQUFBQSxJQUFLZ0UsVUFBVSxJQUFJaEYsS0FBS2dCLEVBQUVmLFNBQVMsSUFDdERtQyxJQUFJLENBQUMsTUFBTXBCLENBQUFBLElBQUtrRSxVQUFVbEUsRUFBRWlDLEtBQUssSUFBSSx3QkFBd0I7WUFFbEUscUNBQXFDO1lBQ3JDaUQsY0FBYzlELElBQUksQ0FBQyxNQUFNcEIsQ0FBQUEsSUFBS2dFLFVBQVUsSUFBSWhGLEtBQUtnQixFQUFFZixTQUFTLElBQ3ZEbUMsSUFBSSxDQUFDLE1BQU1wQixDQUFBQSxJQUFLa0UsVUFBVWxFLEVBQUVpQyxLQUFLLElBQUkseUJBQXlCO1lBRW5FLDhEQUE4RDtZQUM5RDRDLGFBQWE1QixJQUFJLENBQUMsU0FBVWpELENBQUMsRUFBRUosQ0FBQztnQkFDNUIsSUFBSUEsS0FBS2tDLElBQUl6RCxNQUFNLEdBQUcsR0FBRztvQkFDckJGLFFBQVFDLEdBQUcsQ0FBQywwQkFBd0I0RixPQUFScEUsR0FBRSxRQUEyQnNFLE9BQXJCRixVQUFVaEUsRUFBRW1GLENBQUMsR0FBRSxRQUFxQixPQUFmakIsVUFBVWxFLEVBQUVvRixDQUFDO2dCQUMxRTtZQUNKO1lBRUFGLGNBQWNqQyxJQUFJLENBQUMsU0FBVWpELENBQUMsRUFBRUosQ0FBQztnQkFDN0IsSUFBSUEsS0FBS21DLEtBQUsxRCxNQUFNLEdBQUcsSUFBSTtvQkFDdkJGLFFBQVFDLEdBQUcsQ0FBQywyQkFBeUI0RixPQUFScEUsR0FBRSxRQUEyQnNFLE9BQXJCRixVQUFVaEUsRUFBRW1GLENBQUMsR0FBRSxRQUFxQixPQUFmakIsVUFBVWxFLEVBQUVvRixDQUFDO2dCQUMzRTtZQUNKO1lBRUEsK0JBQStCO1lBQy9CbEUsSUFBSU4sU0FBUyxDQUFDLGlCQUNUbEIsSUFBSSxDQUFDMkIsZUFBZXJCLENBQUFBLElBQUtBLEVBQUVmLFNBQVMsRUFDcEM2RixJQUFJLENBQUMsVUFDTDFELElBQUksQ0FBQyxTQUFTLGdCQUNkQSxJQUFJLENBQUMsTUFBTXBCLENBQUFBLElBQUtnRSxVQUFVLElBQUloRixLQUFLZ0IsRUFBRWYsU0FBUyxJQUFJLHFCQUFxQjthQUN2RW1DLElBQUksQ0FBQyxNQUFNcEIsQ0FBQUEsSUFBS2tFLFVBQVVsRSxFQUFFdUIsSUFBSSxHQUFHLHFCQUFxQjthQUN4REgsSUFBSSxDQUFDLEtBQUssR0FDVkEsSUFBSSxDQUFDLFFBQVEsUUFDYnlDLEVBQUUsQ0FBQyxhQUFhLENBQUNDLE9BQU85RCxJQUFNK0UsWUFBWWpCLE9BQU85RCxFQUFFZixTQUFTLEdBQzVENEUsRUFBRSxDQUFDLFlBQVksSUFBTW1CLFFBQVFDLEtBQUssQ0FBQyxjQUFjO1lBRXRELDZCQUE2QjtZQUM3Qi9ELElBQUlOLFNBQVMsQ0FBQyxnQkFDVFEsSUFBSSxDQUFDLEtBQUs5RCxHQUFHK0gsSUFBSSxHQUNiQyxLQUFLLENBQUNoSSxHQUFHaUksY0FBYyxFQUN2QkosQ0FBQyxDQUFDbkYsQ0FBQUEsSUFBS2dFLFVBQVUsSUFBSWhGLEtBQUtnQixFQUFFZixTQUFTLElBQ3JDbUcsQ0FBQyxDQUFDcEYsQ0FBQUEsSUFBS2tFLFVBQVVsRSxFQUFFdUIsSUFBSTtZQUdoQyx1Q0FBdUM7WUFDdkNMLElBQUlOLFNBQVMsQ0FBQyxhQUNUNEUsS0FBSyxDQUFDMUQsSUFBSS9CLEdBQUcsQ0FBQyxDQUFDVyxLQUFLZCxJQUFPO29CQUFFWCxXQUFXd0MsVUFBVSxDQUFDN0IsRUFBRTtvQkFBRXFDLE9BQU92QjtnQkFBSSxLQUNsRVUsSUFBSSxDQUFDLEtBQUs5RCxHQUFHK0gsSUFBSSxHQUNiQyxLQUFLLENBQUNoSSxHQUFHaUksY0FBYyxFQUN2QkUsT0FBTyxDQUFDekYsQ0FBQUEsSUFBS0EsRUFBRWlDLEtBQUssS0FBSyxNQUN6QmtELENBQUMsQ0FBQ25GLENBQUFBLElBQUtnRSxVQUFVLElBQUloRixLQUFLZ0IsRUFBRWYsU0FBUyxJQUNyQ21HLENBQUMsQ0FBQ3BGLENBQUFBLElBQUtrRSxVQUFVbEUsRUFBRWlDLEtBQUs7WUFHakMsd0NBQXdDO1lBQ3hDZixJQUFJTixTQUFTLENBQUMsY0FDVDRFLEtBQUssQ0FBQ3pELEtBQUtoQyxHQUFHLENBQUMsQ0FBQ1csS0FBS2QsSUFBTztvQkFBRVgsV0FBV3dDLFVBQVUsQ0FBQzdCLEVBQUU7b0JBQUVxQyxPQUFPdkI7Z0JBQUksS0FDbkVVLElBQUksQ0FBQyxLQUFLOUQsR0FBRytILElBQUksR0FDYkMsS0FBSyxDQUFDaEksR0FBR2lJLGNBQWMsRUFDdkJFLE9BQU8sQ0FBQ3pGLENBQUFBLElBQUtBLEVBQUVpQyxLQUFLLEtBQUssTUFDekJrRCxDQUFDLENBQUNuRixDQUFBQSxJQUFLZ0UsVUFBVSxJQUFJaEYsS0FBS2dCLEVBQUVmLFNBQVMsSUFDckNtRyxDQUFDLENBQUNwRixDQUFBQSxJQUFLa0UsVUFBVWxFLEVBQUVpQyxLQUFLO1FBRXJDO1FBRUFmLElBQUlDLE1BQU0sQ0FBQyxRQUNOcUUsS0FBSyxDQUFDbkUsZUFDTkQsSUFBSSxDQUFDLFNBQVMsZUFDZEEsSUFBSSxDQUFDLFVBQVUsUUFDZkEsSUFBSSxDQUFDLFFBQVEsUUFDYkEsSUFBSSxDQUFDLGdCQUFnQixHQUNyQkEsSUFBSSxDQUFDLEtBQUs5RCxHQUFHK0gsSUFBSSxHQUNiQyxLQUFLLENBQUNoSSxHQUFHaUksY0FBYyxFQUN2QkosQ0FBQyxDQUFDbkYsQ0FBQUEsSUFBS21DLE9BQU8sSUFBSW5ELEtBQUtnQixFQUFFZixTQUFTLElBQ2xDbUcsQ0FBQyxDQUFDcEYsQ0FBQUEsSUFBS3VDLE9BQU92QyxFQUFFdUIsSUFBSTtRQUc3QkwsSUFBSU4sU0FBUyxDQUFDLGFBQ1RsQixJQUFJLENBQUM7WUFBQ29DO1NBQUksRUFBRyxzQ0FBc0M7U0FDbkRnRCxJQUFJLENBQUMsUUFDTDFELElBQUksQ0FBQyxTQUFTLFlBQ2RBLElBQUksQ0FBQyxVQUFVLFNBQ2ZBLElBQUksQ0FBQyxRQUFRLFFBQ2JBLElBQUksQ0FBQyxnQkFBZ0IsR0FDckJBLElBQUksQ0FBQyxLQUFLOUQsR0FBRytILElBQUksR0FDYkMsS0FBSyxDQUFDaEksR0FBR2lJLGNBQWMsRUFDdkJFLE9BQU8sQ0FBQyxDQUFDcEYsR0FBR1QsSUFBTUEsS0FBSyxLQUFLa0MsR0FBRyxDQUFDbEMsRUFBRSxLQUFLLE1BQ3ZDdUYsQ0FBQyxDQUFDLENBQUM5RSxHQUFHVCxJQUFNdUMsT0FBTyxJQUFJbkQsS0FBS3lDLFVBQVUsQ0FBQzdCLEVBQUUsSUFBSyxtQkFBbUI7U0FDakV3RixDQUFDLENBQUMsQ0FBQy9FLEdBQUdULElBQU0yQyxPQUFPVCxHQUFHLENBQUNsQyxFQUFFO1FBR2xDc0IsSUFBSU4sU0FBUyxDQUFDLGNBQ1RsQixJQUFJLENBQUM7WUFBQ3FDO1NBQUssRUFBRyxzQ0FBc0M7U0FDcEQrQyxJQUFJLENBQUMsUUFDTDFELElBQUksQ0FBQyxTQUFTLGFBQ2RBLElBQUksQ0FBQyxVQUFVLE9BQ2ZBLElBQUksQ0FBQyxRQUFRLFFBQ2JBLElBQUksQ0FBQyxnQkFBZ0IsR0FDckJBLElBQUksQ0FBQyxLQUFLOUQsR0FBRytILElBQUksR0FDYkMsS0FBSyxDQUFDaEksR0FBR2lJLGNBQWMsRUFDdkJFLE9BQU8sQ0FBQyxDQUFDcEYsR0FBR1QsSUFBTUEsS0FBSyxNQUFNbUMsSUFBSSxDQUFDbkMsRUFBRSxLQUFLLE1BQ3pDdUYsQ0FBQyxDQUFDLENBQUM5RSxHQUFHVCxJQUFNdUMsT0FBTyxJQUFJbkQsS0FBS3lDLFVBQVUsQ0FBQzdCLEVBQUUsSUFBSyxtQkFBbUI7U0FDakV3RixDQUFDLENBQUMsQ0FBQy9FLEdBQUdULElBQU0yQyxPQUFPUixJQUFJLENBQUNuQyxFQUFFO1FBR25DLE1BQU1vRixVQUFVMUgsR0FBR3FELE1BQU0sQ0FBQ2xELGFBQWFlLE9BQU8sRUFBRTJDLE1BQU0sQ0FBQyxPQUNsREMsSUFBSSxDQUFDLFNBQVMsdURBQ2Q2RCxLQUFLLENBQUMsY0FBYyxVQUNwQkEsS0FBSyxDQUFDLFlBQVk7UUFFdkIsU0FBU0YsWUFBWWpCLEtBQUssRUFBRTdFLFNBQVM7WUFDakMsSUFBSSxDQUFDQSxXQUFXO2dCQUNaZCxRQUFRRyxJQUFJLENBQUMsaURBQWlEVztnQkFDOUQ7WUFDSjtZQUVBLCtDQUErQztZQUMvQyxNQUFNeUcsYUFBYXJFLGNBQWNzRSxJQUFJLENBQUMzRixDQUFBQSxJQUFLQSxFQUFFZixTQUFTLENBQUMyRyxPQUFPLE9BQU8zRyxVQUFVMkcsT0FBTztZQUN0RixNQUFNQyxlQUFlN0QsUUFBUTJELElBQUksQ0FBQzNGLENBQUFBLElBQUtBLEVBQUVmLFNBQVMsQ0FBQzJHLE9BQU8sT0FBTzNHLFVBQVUyRyxPQUFPO1lBQ2xGLE1BQU1FLGdCQUFnQjVELFNBQVN5RCxJQUFJLENBQUMzRixDQUFBQSxJQUFLQSxFQUFFZixTQUFTLENBQUMyRyxPQUFPLE9BQU8zRyxVQUFVMkcsT0FBTztZQUVwRixNQUFNRyxhQUFhTCxhQUFhQSxXQUFXbkUsSUFBSSxDQUFDeUUsT0FBTyxDQUFDLEtBQUs7WUFDN0QsTUFBTUMsVUFBVUosZUFBZUEsYUFBYTVELEtBQUssQ0FBQytELE9BQU8sQ0FBQyxLQUFLO1lBQy9ELE1BQU1FLFdBQVdKLGdCQUFnQkEsY0FBYzdELEtBQUssQ0FBQytELE9BQU8sQ0FBQyxLQUFLO1lBRWxFN0gsUUFBUUMsR0FBRyxDQUFDLDhDQUF5RDJILE9BQXJCOUcsV0FBVSxhQUE4QmdILE9BQW5CRixZQUFXLFVBQXlCRyxPQUFqQkQsU0FBUSxXQUFrQixPQUFUQztZQUV6R2xCLFFBQVFtQixJQUFJLENBQUMsbURBRW9CRixPQURHRixZQUFXLHdEQUViRyxPQURERCxTQUFRLHlEQUNFLE9BQVRDLFVBQVMsMEJBRXRDakIsS0FBSyxDQUFDLGNBQWMsV0FDcEJBLEtBQUssQ0FBQyxZQUFZLFNBQ2xCQSxLQUFLLENBQUMsY0FBYyxTQUNwQkEsS0FBSyxDQUFDLFdBQVcsT0FDakJBLEtBQUssQ0FBQyxVQUFVLGtCQUNoQkEsS0FBSyxDQUFDLGlCQUFpQixPQUN2QkEsS0FBSyxDQUFDLGNBQWMsbUNBQ3BCQSxLQUFLLENBQUMsYUFBYSxRQUNuQkEsS0FBSyxDQUFDLGtCQUFrQixRQUN4QkEsS0FBSyxDQUFDLFdBQVcsUUFDakJBLEtBQUssQ0FBQyxhQUFhO1lBRXhCRCxRQUFRQyxLQUFLLENBQUMsUUFBUSxHQUFvQixPQUFqQm5CLE1BQU1zQyxLQUFLLEdBQUcsSUFBRyxPQUFLbkIsS0FBSyxDQUFDLE9BQU8sR0FBZSxPQUFabkIsTUFBTXVDLEtBQUssRUFBQztRQUMvRTtRQUVBLFNBQVNDO1lBQ0x0QixRQUFRQyxLQUFLLENBQUMsY0FBYztRQUNoQztRQUVBeEYsV0FBVztZQUNQMkUsV0FBV2pDLFFBQVFJLFNBQVUsc0NBQXNDO1FBQ3ZFLEdBQUc7UUFFSCxTQUFTZ0UsVUFBVTdHLElBQUksRUFBRThFLEtBQUssRUFBRWdDLFNBQVMsRUFBRUMsYUFBYSxFQUFFQyxRQUFRLEVBQUVqQyxLQUFLO1lBQ3JFLDJEQUEyRDtZQUMzRCxNQUFNa0MsY0FBY2pILEtBQ2ZLLEdBQUcsQ0FBQyxDQUFDVyxLQUFLZCxJQUFPO29CQUFFdUYsR0FBR3ZGO29CQUFHd0YsR0FBR3FCLGNBQWM3RztnQkFBRyxJQUM3QzRCLE1BQU0sQ0FBQ3hCLENBQUFBLElBQUtBLEVBQUVvRixDQUFDLEtBQUssUUFBUXBGLEVBQUVtRixDQUFDLElBQUl1QixXQUFXLHdDQUF3QztZQUUzRnZJLFFBQVFDLEdBQUcsQ0FBQyxvQ0FBNENvSSxPQUFsQi9CLE9BQU0sY0FBcUNpQyxPQUF6QkYsV0FBVSxpQkFBd0IsT0FBVEU7WUFDakZ2SSxRQUFRQyxHQUFHLENBQUMseUJBQTRDLE9BQW5CdUksWUFBWXRJLE1BQU07WUFDdkRGLFFBQVFDLEdBQUcsQ0FBRSxnQ0FBcUJ1SSxZQUFZekgsS0FBSyxDQUFDLEdBQUc7WUFDdkRmLFFBQVFDLEdBQUcsQ0FBRSwrQkFBb0J1SSxZQUFZekgsS0FBSyxDQUFDLENBQUM7WUFFcER5SCxZQUFZakMsT0FBTyxDQUFDLENBQUNrQyxPQUFPaEg7Z0JBQ3hCekIsUUFBUUMsR0FBRyxDQUNQLGdCQUFxQndCLE9BQWY2RSxPQUFNLFdBQStCbUMsT0FBdEJoSCxJQUFJOEcsVUFBUyxXQUE2QnZFLE9BQXBCeUUsTUFBTXpCLENBQUMsRUFBQyxjQUE0QixPQUFoQmhELE9BQU95RSxNQUFNekIsQ0FBQyxHQUFFLFFBQy9FLFFBQXVDNUMsT0FBL0JxRSxNQUFNeEIsQ0FBQyxDQUFDWSxPQUFPLENBQUMsSUFBRyxjQUF1QyxPQUEzQnpELE9BQU9xRSxNQUFNeEIsQ0FBQyxFQUFFWSxPQUFPLENBQUM7WUFFdkU7WUFFQSx3Q0FBd0M7WUFDeEM5RSxJQUFJTixTQUFTLENBQUMsSUFBYyxPQUFWNEYsWUFDYjlHLElBQUksQ0FBQ2lILGFBQWEzRyxDQUFBQSxJQUFLQSxFQUFFbUYsQ0FBQyxFQUFFLDRCQUE0QjthQUN4REwsSUFBSSxDQUFDLFVBQVUsd0JBQXdCO2FBQ3ZDMUQsSUFBSSxDQUFDLFNBQVMsU0FBbUIsT0FBVm9GLFlBQ3ZCcEYsSUFBSSxDQUFDLE1BQU1wQixDQUFBQSxJQUFLbUMsT0FBT25DLEVBQUVtRixDQUFDLEdBQzFCL0QsSUFBSSxDQUFDLE1BQU1wQixDQUFBQSxJQUFLdUMsT0FBT3ZDLEVBQUVvRixDQUFDLEdBQzFCaEUsSUFBSSxDQUFDLEtBQUssR0FDVkEsSUFBSSxDQUFDLFFBQVFvRDtRQUN0QjtRQUVSLDZEQUE2RDtRQUNyRCtCLFVBQVU3RSxPQUFPLFFBQVEsZ0JBQWdCLENBQUM5QixJQUFNOEIsS0FBSyxDQUFDOUIsRUFBRSxFQUFFLEdBQUc7UUFDN0QyRyxVQUFVekUsS0FBSyxTQUFTLGFBQWEsQ0FBQ2xDLElBQU1rQyxHQUFHLENBQUNsQyxFQUFFLEVBQUUsR0FBRztRQUN2RDJHLFVBQVV4RSxNQUFNLE9BQU8sY0FBYyxDQUFDbkMsSUFBTW1DLElBQUksQ0FBQ25DLEVBQUUsRUFBRSxJQUFJO1FBRXpELE1BQU1pSCxXQUFXdkosR0FBR3FELE1BQU0sQ0FBQ2xELGFBQWFlLE9BQU8sRUFBRTJDLE1BQU0sQ0FBQyxPQUNuREMsSUFBSSxDQUFDLFNBQVMsc0VBQXNFLGlDQUFpQztRQUVsSSwwQkFBMEI7UUFDbEJ5RixTQUFTMUYsTUFBTSxDQUFDLFVBQ1hnRixJQUFJLENBQUMsMkVBQ0xsQixLQUFLLENBQUMsVUFBVSxPQUFPLGlDQUFpQztTQUN4RDdELElBQUksQ0FBQyxZQUFZeEQsU0FBU1MsTUFBTSxLQUFLLEtBQUtYLHdCQUF3QixJQUFJLGFBQWEsTUFDbkZtRyxFQUFFLENBQUMsU0FBU2lEO1FBRXpCLHNCQUFzQjtRQUNkRCxTQUFTMUYsTUFBTSxDQUFDLFVBQ1hnRixJQUFJLENBQUMsbUVBQ0xsQixLQUFLLENBQUMsVUFBVSxPQUNoQjdELElBQUksQ0FBQyxZQUFZeEQsU0FBU1MsTUFBTSxLQUFLLEtBQUtYLHVCQUF1QkUsU0FBU1MsTUFBTSxHQUFHLElBQUksYUFBYSxNQUNwR3dGLEVBQUUsQ0FBQyxTQUFTa0Q7UUFFekIsbUJBQW1CO1FBQ1hGLFNBQVMxRixNQUFNLENBQUMsVUFDWGdGLElBQUksQ0FBQyxrRkFDTGxCLEtBQUssQ0FBQyxVQUFVLE9BQ2hCcEIsRUFBRSxDQUFDLFNBQVNlO1FBRXpCLDZCQUE2QjtRQUNyQmlDLFNBQVMxRixNQUFNLENBQUMsVUFDWGdGLElBQUksQ0FBQyw0RUFDTGxCLEtBQUssQ0FBQyxVQUFVLE9BQ2hCcEIsRUFBRSxDQUFDLFNBQVMsSUFBTTNGLGlCQUFpQjtJQUM1QztJQUVBLFNBQVMwRztRQUNMekcsUUFBUUMsR0FBRyxDQUFDO1FBRVosSUFBSSxDQUFDUixZQUFZQSxTQUFTUyxNQUFNLEtBQUssR0FBRztZQUNwQ0YsUUFBUUcsSUFBSSxDQUFDO1lBQ2I7UUFDSjtRQUVBSCxRQUFRQyxHQUFHLENBQUM7UUFDWlQsdUJBQXVCO1FBRXZCLE1BQU1tQixlQUFlbEIsUUFBUSxDQUFDLEVBQUU7UUFFaEMsSUFBSSxDQUFDa0IsZ0JBQWdCQSxhQUFhVCxNQUFNLEtBQUssR0FBRztZQUM1Q0YsUUFBUUcsSUFBSSxDQUFDO1lBQ2I7UUFDSjtRQUVBLE1BQU1TLFlBQVk7WUFDZCxJQUFJQyxLQUFLRixZQUFZLENBQUMsRUFBRSxDQUFDRyxTQUFTO1lBQ2xDLElBQUlELEtBQUtGLGFBQWFJLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUNELFNBQVM7U0FDL0M7UUFFRGQsUUFBUUMsR0FBRyxDQUFDLG9DQUFvQ1c7UUFDaERoQixXQUFXZ0I7UUFDWGYsV0FBV1EsT0FBTyxHQUFHTztRQUVyQixtQ0FBbUM7UUFDbkNVLFdBQVc7WUFDUDVCLFlBQVk7bUJBQUlEO2FBQVMsR0FBRyx3Q0FBd0M7UUFDeEUsR0FBRztJQUNQO0lBRUEsU0FBU21KO1FBQ0w1SSxRQUFRQyxHQUFHLENBQUM7UUFDWixJQUFJVixzQkFBc0JFLFNBQVNTLE1BQU0sR0FBRyxHQUFHO1lBQzNDLE1BQU0ySSxZQUFZdEosc0JBQXNCO1lBQ3hDUyxRQUFRQyxHQUFHLENBQUMsOEJBQThCNEk7WUFDMUNySix1QkFBdUJxSjtZQUN2QixNQUFNakksWUFBWTtnQkFDZCxJQUFJQyxLQUFLcEIsUUFBUSxDQUFDb0osVUFBVSxDQUFDLEVBQUUsQ0FBQy9ILFNBQVM7Z0JBQ3pDLElBQUlELEtBQUtwQixRQUFRLENBQUNvSixVQUFVLENBQUM5SCxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDRCxTQUFTO2FBQ3REO1lBRURsQixXQUFXZ0I7WUFDWGYsV0FBV1EsT0FBTyxHQUFHTztRQUN6QixPQUFPO1lBQ0haLFFBQVFHLElBQUksQ0FBQztRQUNqQjtJQUNKO0lBRUEsU0FBU3dJO1FBQ0wzSSxRQUFRQyxHQUFHLENBQUM7UUFDWixJQUFJVixzQkFBc0IsR0FBRztZQUN6QixNQUFNdUosWUFBWXZKLHNCQUFzQjtZQUN4Q1MsUUFBUUMsR0FBRyxDQUFDLGtDQUFrQzZJO1lBQzlDdEosdUJBQXVCc0o7WUFDdkIsTUFBTWxJLFlBQVk7Z0JBQ2QsSUFBSUMsS0FBS3BCLFFBQVEsQ0FBQ3FKLFVBQVUsQ0FBQyxFQUFFLENBQUNoSSxTQUFTO2dCQUN6QyxJQUFJRCxLQUFLcEIsUUFBUSxDQUFDcUosVUFBVSxDQUFDL0gsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQ0QsU0FBUzthQUN0RDtZQUVEbEIsV0FBV2dCO1lBQ1hmLFdBQVdRLE9BQU8sR0FBR087UUFDekIsT0FBTztZQUNIWixRQUFRRyxJQUFJLENBQUM7UUFDakI7SUFDSjtJQUVBLFdBQVc7SUFDWCx5RUFBeUU7SUFDekUsb0NBQW9DO0lBQ3BDLG1FQUFtRTtJQUNuRSxFQUFFO0lBQ0YscUNBQXFDO0lBQ3JDLDhGQUE4RjtJQUM5RixzQkFBc0I7SUFDdEIsOEVBQThFO0lBQzlFLGdGQUFnRjtJQUNoRixnREFBZ0Q7SUFDaEQsZ0JBQWdCO0lBQ2hCLG1DQUFtQztJQUNuQyx3QkFBd0I7SUFDeEIsRUFBRTtJQUNGLHNCQUFzQjtJQUN0Qiw4RUFBOEU7SUFDOUUsaUdBQWlHO0lBQ2pHLGdEQUFnRDtJQUNoRCxnQkFBZ0I7SUFDaEIsK0JBQStCO0lBQy9CLHdCQUF3QjtJQUN4QixFQUFFO0lBQ0Ysc0JBQXNCO0lBQ3RCLDhFQUE4RTtJQUM5RSw4Q0FBOEM7SUFDOUMsZ0JBQWdCO0lBQ2hCLDRCQUE0QjtJQUM1Qix3QkFBd0I7SUFDeEIsRUFBRTtJQUNGLCtEQUErRDtJQUMvRCxzQkFBc0I7SUFDdEIseUZBQXlGO0lBQ3pGLHlEQUF5RDtJQUN6RCxnQkFBZ0I7SUFDaEIsc0NBQXNDO0lBQ3RDLHdCQUF3QjtJQUN4QixpQkFBaUI7SUFDakIsYUFBYTtJQUNiLEtBQUs7SUFFTCxxQkFDSSw4REFBQzRJO1FBQ0dDLEtBQUsxSjtRQUNMK0ksV0FBVTs7Ozs7O0FBR3RCO0dBdnRCd0JqSjtLQUFBQSIsInNvdXJjZXMiOlsiRTpcXFdwaVxcUmVndWxhcmx5XFxDb3Vyc2VzXFxTclxcMjAyNF9DX1Rlcm1cXENTNDI0MVxcSFdcXGZpbmFsLXByb2plY3Qta2VybWl0LXRoZS1mcm9nXFxzcmNcXGFwcFxcZGF0YVZpc1xcVHJlbmRBbmFUaW1lLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2UgY2xpZW50JztcclxuXHJcbmltcG9ydCB7IHVzZUVmZmVjdCwgdXNlUmVmLCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IFRyZW5kQW5hSW5kZXggZnJvbSAnLi9UcmVuZEFuYUluZGV4JztcclxuY29uc3QgZDMgPSBhd2FpdCBpbXBvcnQoJ2QzJyk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTb2x2ZVRpbWVUcmVuZCh7IHNvbHZlcyB9KSB7XHJcbiAgICBjb25zdCBjb250YWluZXJSZWYgPSB1c2VSZWYobnVsbCk7XHJcbiAgICBjb25zdCBbY3VycmVudENsdXN0ZXJJbmRleCwgc2V0Q3VycmVudENsdXN0ZXJJbmRleF0gPSB1c2VTdGF0ZSgwKTtcclxuICAgIGNvbnN0IFtjbHVzdGVycywgc2V0Q2x1c3RlcnNdID0gdXNlU3RhdGUoW10pO1xyXG4gICAgY29uc3QgW3hEb21haW4sIHNldFhEb21haW5dID0gdXNlU3RhdGUobnVsbCk7XHJcbiAgICBjb25zdCB4RG9tYWluUmVmID0gdXNlUmVmKG51bGwpO1xyXG5cclxuICAgIC8vIOKchSBTdGF0ZSB0byB0cmFjayB3aGV0aGVyIHdlIGFyZSBpbiBTb2x2ZVRpbWVUcmVuZCBvciBUcmVuZEFuYVRpbWVcclxuICAgIGNvbnN0IFtzaG93SW5kZXhWaWV3LCBzZXRTaG93SW5kZXhWaWV3XSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwi8J+UhCBYRG9tYWluIG9yIHdpbmRvdyBzaXplIHVwZGF0ZWQ6XCIsIHhEb21haW4pO1xyXG5cclxuICAgICAgICBpZiAoIXNvbHZlcyB8fCBzb2x2ZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIuKaoO+4jyBObyBzb2x2ZXMgZGF0YSBhdmFpbGFibGUhXCIpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBjb250YWluZXIgPSBjb250YWluZXJSZWYuY3VycmVudDtcclxuICAgICAgICBpZiAoIWNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCLimqDvuI8gQ29udGFpbmVyIHJlZmVyZW5jZSBpcyBudWxsIVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coXCLwn5OPIFVwZGF0aW5nIGNoYXJ0IGRpbWVuc2lvbnMgYWZ0ZXIgcmVzaXplLi4uXCIpO1xyXG4gICAgICAgIGRyYXdTb2x2ZVRpbWVUcmVuZChzb2x2ZXMpO1xyXG4gICAgfSwgW3hEb21haW4sIGNvbnRhaW5lclJlZl0pOyAgLy8g8J+UpSBFbnN1cmUgY2hhcnQgdXBkYXRlcyB3aGVuIHhEb21haW4gb3IgY29udGFpbmVyIHNpemUgY2hhbmdlc1xyXG5cclxuICAgIHVzZUVmZmVjdCgoKSA9PiB7XHJcbiAgICAgICAgaWYgKCFzb2x2ZXMgfHwgIUFycmF5LmlzQXJyYXkoc29sdmVzKSB8fCBzb2x2ZXMubGVuZ3RoID09PSAwKSByZXR1cm47XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwi8J+UjSBSdW5uaW5nIGNsdXN0ZXIgZGV0ZWN0aW9uLi4uXCIpO1xyXG4gICAgICAgIGNvbnN0IGRldGVjdGVkQ2x1c3RlcnMgPSBmaW5kQ2x1c3RlcnMoc29sdmVzKTtcclxuICAgICAgICBzZXRDbHVzdGVycyhkZXRlY3RlZENsdXN0ZXJzKTtcclxuXHJcbiAgICAgICAgaWYgKGRldGVjdGVkQ2x1c3RlcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICBjb25zdCBmaXJzdENsdXN0ZXIgPSBkZXRlY3RlZENsdXN0ZXJzWzBdO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdEb21haW4gPSBbXHJcbiAgICAgICAgICAgICAgICBuZXcgRGF0ZShmaXJzdENsdXN0ZXJbMF0udGltZXN0YW1wKSxcclxuICAgICAgICAgICAgICAgIG5ldyBEYXRlKGZpcnN0Q2x1c3Rlci5zbGljZSgtMSlbMF0udGltZXN0YW1wKVxyXG4gICAgICAgICAgICBdO1xyXG5cclxuICAgICAgICAgICAgc2V0WERvbWFpbihuZXdEb21haW4pO1xyXG4gICAgICAgICAgICB4RG9tYWluUmVmLmN1cnJlbnQgPSBuZXdEb21haW47ICAvLyDinIUgRW5zdXJlIHJlZiBpcyB1cGRhdGVkXHJcblxyXG4gICAgICAgICAgICAvLyDinZcgTG9nIEFGVEVSIHNldHRpbmcgdGhlIHN0YXRlIHRvIHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWVcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCLinIUgWC1Eb21haW4gaW5pdGlhbGl6ZWQgdG8gZmlyc3QgY2x1c3RlcjpcIiwgbmV3RG9tYWluKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEF0dGFjaCByZXNpemUgZXZlbnRcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlUmVzaXplKTtcclxuICAgICAgICByZXR1cm4gKCkgPT4gd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSk7XHJcbiAgICB9LCBbc29sdmVzXSk7ICAvLyA8LS0gUnVucyBvbmx5IG9uIGZpcnN0IGxvYWRcclxuXHJcbiAgICBpZiAoc2hvd0luZGV4Vmlldykge1xyXG4gICAgICAgIHJldHVybiA8VHJlbmRBbmFJbmRleCBzb2x2ZXM9e3NvbHZlc30gLz47XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaGFuZGxlUmVzaXplKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwi8J+UhCBIYW5kbGluZyByZXNpemUuLi5cIik7XHJcblxyXG4gICAgICAgIGlmICghc29sdmVzIHx8IHNvbHZlcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKFwi4pqg77iPIE5vIHNvbHZlcyBhdmFpbGFibGUsIHNraXBwaW5nIHJlc2l6ZSFcIik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBkZXRlY3RlZENsdXN0ZXJzID0gY2x1c3RlcnM7XHJcblxyXG4gICAgICAgIGlmIChjbHVzdGVycy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKFwi4pqg77iPIE5vIGNsdXN0ZXJzIGF2YWlsYWJsZSBvbiByZXNpemUhIFJlZmluZGluZyBjbHVzdGVycy4uLlwiKTtcclxuICAgICAgICAgICAgZGV0ZWN0ZWRDbHVzdGVycyA9IGZpbmRDbHVzdGVycyhzb2x2ZXMpO1xyXG4gICAgICAgICAgICBzZXRDbHVzdGVycyhkZXRlY3RlZENsdXN0ZXJzKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkZXRlY3RlZENsdXN0ZXJzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCLimqDvuI8gU3RpbGwgbm8gY2x1c3RlcnMgZm91bmQgYWZ0ZXIgcmVzaXplIVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgcHJldkNsdXN0ZXJJbmRleCA9IGN1cnJlbnRDbHVzdGVySW5kZXg7XHJcbiAgICAgICAgY29uc3QgcHJldlhEb21haW4gPSB4RG9tYWluUmVmLmN1cnJlbnQ7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKGDwn5OMIFByZXNlcnZpbmcgQ2x1c3RlciBJbmRleDogJHtwcmV2Q2x1c3RlckluZGV4fWApO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwi8J+UjSBQcmVzZXJ2aW5nIFgtRG9tYWluIGJlZm9yZSByZXNpemU6XCIsIHByZXZYRG9tYWluKTtcclxuXHJcbiAgICAgICAgLy8gRW5zdXJlIHJlLXJlbmRlcnMgd2l0aCBjb3JyZWN0IHN0YXRlc1xyXG4gICAgICAgIHNldEN1cnJlbnRDbHVzdGVySW5kZXgocHJldkNsdXN0ZXJJbmRleCk7XHJcbiAgICAgICAgc2V0WERvbWFpbihwcmV2WERvbWFpbik7XHJcbiAgICAgICAgeERvbWFpblJlZi5jdXJyZW50ID0gcHJldlhEb21haW47XHJcblxyXG4gICAgICAgIC8vIOKchSBGb3JjZSBzdGF0ZSB1cGRhdGVzIHRvIHJlLWVuYWJsZSBidXR0b25zXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHNldENsdXN0ZXJzKFsuLi5kZXRlY3RlZENsdXN0ZXJzXSk7XHJcbiAgICAgICAgICAgIHNldFhEb21haW4oWy4uLnByZXZYRG9tYWluXSk7XHJcbiAgICAgICAgICAgIHNldEN1cnJlbnRDbHVzdGVySW5kZXgocHJldkNsdXN0ZXJJbmRleCk7XHJcbiAgICAgICAgfSwgMCk7XHJcblxyXG4gICAgICAgIC8vIFJlZHJhdyB0aGUgY2hhcnQgYWZ0ZXIgcmVzaXplXHJcbiAgICAgICAgZHJhd1NvbHZlVGltZVRyZW5kKHNvbHZlcyk7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwi4pyFIFJlc2l6ZSBoYW5kbGVkLCByZXN0b3Jpbmcgc3RhdGVzLlwiKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBmaW5kQ2x1c3RlcnMoZGF0YSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwi8J+UjSBSdW5uaW5nIGZpbmRDbHVzdGVycy4uLlwiKTtcclxuXHJcbiAgICAgICAgbGV0IGRldGVjdGVkQ2x1c3RlcnMgPSBbXTtcclxuICAgICAgICBsZXQgY3VycmVudENsdXN0ZXIgPSBbZGF0YVswXV07XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAobmV3IERhdGUoZGF0YVtpXS50aW1lc3RhbXApIC0gbmV3IERhdGUoZGF0YVtpIC0gMV0udGltZXN0YW1wKSA+IDE1ICogNjAgKiAxMDAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudENsdXN0ZXIubGVuZ3RoID4gMSkgeyAgLy8g4pyFIElnbm9yZSBjbHVzdGVycyB3aXRoIGEgc2luZ2xlIHBvaW50XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdW5pcXVlWFZhbHVlcyA9IG5ldyBTZXQoY3VycmVudENsdXN0ZXIubWFwKGQgPT4gZC50aW1lc3RhbXApKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodW5pcXVlWFZhbHVlcy5zaXplID4gMSkgeyAgLy8g4pyFIElnbm9yZSBjbHVzdGVycyB3aXRoIHRoZSBzYW1lIFgtQXhpcyB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXRlY3RlZENsdXN0ZXJzLnB1c2goY3VycmVudENsdXN0ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIuKaoO+4jyBJZ25vcmluZyBjbHVzdGVyIHdpdGggc2FtZSBYLUF4aXMgdmFsdWVzOlwiLCBjdXJyZW50Q2x1c3Rlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY3VycmVudENsdXN0ZXIgPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjdXJyZW50Q2x1c3Rlci5wdXNoKGRhdGFbaV0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQ2hlY2sgbGFzdCBjbHVzdGVyIGJlZm9yZSBhZGRpbmcgaXRcclxuICAgICAgICBpZiAoY3VycmVudENsdXN0ZXIubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICBjb25zdCB1bmlxdWVYVmFsdWVzID0gbmV3IFNldChjdXJyZW50Q2x1c3Rlci5tYXAoZCA9PiBkLnRpbWVzdGFtcCkpO1xyXG4gICAgICAgICAgICBpZiAodW5pcXVlWFZhbHVlcy5zaXplID4gMSkge1xyXG4gICAgICAgICAgICAgICAgZGV0ZWN0ZWRDbHVzdGVycy5wdXNoKGN1cnJlbnRDbHVzdGVyKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIuKaoO+4jyBJZ25vcmluZyBjbHVzdGVyIHdpdGggc2FtZSBYLUF4aXMgdmFsdWVzOlwiLCBjdXJyZW50Q2x1c3Rlcik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwi8J+TiiBDbHVzdGVycyBpZGVudGlmaWVkIChleGNsdWRpbmcgc2luZ2xlL3NhbWUgeC1heGlzIGNsdXN0ZXJzKTpcIiwgZGV0ZWN0ZWRDbHVzdGVycy5sZW5ndGgsIGRldGVjdGVkQ2x1c3RlcnMpO1xyXG4gICAgICAgIHJldHVybiBkZXRlY3RlZENsdXN0ZXJzO1xyXG4gICAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGNvbXB1dGVSb2xsaW5nQXZlcmFnZShkYXRhLCB3aW5kb3dTaXplKSB7XHJcbiAgICAgICAgcmV0dXJuIGRhdGEubWFwKChfLCBpLCBhcnIpID0+IHtcclxuICAgICAgICAgICAgaWYgKGkgPCB3aW5kb3dTaXplIC0gMSkgcmV0dXJuIG51bGw7ICAvLyDinIUgUHJlc2VydmUgbnVsbHMgYXQgdGhlIGJlZ2lubmluZ1xyXG4gICAgICAgICAgICBjb25zdCBzdWJzZXQgPSBhcnIuc2xpY2UoaSAtICh3aW5kb3dTaXplIC0gMSksIGkgKyAxKTtcclxuICAgICAgICAgICAgcmV0dXJuIHN1YnNldC5yZWR1Y2UoKHN1bSwgdmFsKSA9PiBzdW0gKyB2YWwsIDApIC8gc3Vic2V0Lmxlbmd0aDtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBkcmF3U29sdmVUaW1lVHJlbmQoZGF0YSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwi8J+UjSBDdXJyZW50IFgtRG9tYWluIGluIGRyYXdTb2x2ZVRpbWVUcmVuZDpcIiwgeERvbWFpblJlZi5jdXJyZW50KTtcclxuICAgICAgICBpZiAoIWNvbnRhaW5lclJlZi5jdXJyZW50KXtcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKFwi4pqg77iPIENvbnRhaW5lciByZWZlcmVuY2UgaXMgbnVsbCwgY2Fubm90IGRyYXchXCIpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBjb250YWluZXIgPSBkMy5zZWxlY3QoY29udGFpbmVyUmVmLmN1cnJlbnQpO1xyXG4gICAgICAgIGNvbnRhaW5lci5zZWxlY3RBbGwoJyonKS5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgY29uc3Qgd2lkdGggPSBjb250YWluZXJSZWYuY3VycmVudC5jbGllbnRXaWR0aCB8fCA4MDA7XHJcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gY29udGFpbmVyUmVmLmN1cnJlbnQuY2xpZW50SGVpZ2h0IHx8IDUwMDtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coXCLwn5OPIENoYXJ0IGRpbWVuc2lvbnM6XCIsIHdpZHRoLCBoZWlnaHQpO1xyXG5cclxuICAgICAgICBjb25zdCBzdmcgPSBjb250YWluZXIuYXBwZW5kKCdzdmcnKVxyXG4gICAgICAgICAgICAuYXR0cignd2lkdGgnLCAnMTAwJScpXHJcbiAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCAnMTAwJScpXHJcbiAgICAgICAgICAgIC5hdHRyKCd2aWV3Qm94JywgYDAgMCAke3dpZHRofSAke2hlaWdodH1gKVxyXG4gICAgICAgICAgICAuYXR0cigncHJlc2VydmVBc3BlY3RSYXRpbycsICd4TWlkWU1pZCBtZWV0Jyk7XHJcblxyXG4gICAgICAgIC8vIEVuc3VyZSBhbGwgZGF0YSBjb250YWlucyB0aW1lc3RhbXBzXHJcbiAgICAgICAgY29uc3QgcHJvY2Vzc2VkRGF0YSA9IGRhdGFcclxuICAgICAgICAgICAgLm1hcChzb2x2ZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXNvbHZlLnRpbWVzdGFtcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIuKaoO+4jyBTa2lwcGluZyBlbnRyeSB3aXRoIG1pc3NpbmcgdGltZXN0YW1wOlwiLCBzb2x2ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoc29sdmUudGltZXN0YW1wKSxcclxuICAgICAgICAgICAgICAgICAgICB0aW1lOiBzb2x2ZS50aW1lIC8gMTAwMFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmZpbHRlcihkID0+IGQgIT09IG51bGwpOyAgLy8gUmVtb3ZlIGludmFsaWQgZW50cmllc1xyXG5cclxuICAgICAgICBjb25zdCB0aW1lc3RhbXBzID0gcHJvY2Vzc2VkRGF0YS5tYXAoZCA9PiBkLnRpbWVzdGFtcCk7XHJcbiAgICAgICAgY29uc3QgdGltZXMgPSBwcm9jZXNzZWREYXRhLm1hcChkID0+IGQudGltZSk7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiUHJvY2Vzc2VkIHRpbWVzdGFtcHM6XCIsIHRpbWVzdGFtcHMpO1xyXG5cclxuICAgICAgICAvLyDwn5SlIEZpbmQgdGhlIGZpcnN0IFwiY2x1c3RlclwiIChhIHNob3J0IGludGVydmFsIG9mIGRhdGEpXHJcbiAgICAgICAgbGV0IGNsdXN0ZXJTdGFydEluZGV4ID0gMDtcclxuICAgICAgICBsZXQgY2x1c3RlckVuZEluZGV4ID0gdGltZXN0YW1wcy5sZW5ndGggLSAxO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRpbWVzdGFtcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKHRpbWVzdGFtcHNbaV0gLSB0aW1lc3RhbXBzWzBdID4gMTUgKiA2MCAqIDEwMDApIHsgLy8gMTUtbWludXRlIHdpbmRvd1xyXG4gICAgICAgICAgICAgICAgY2x1c3RlckVuZEluZGV4ID0gaTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBFeHRyYWN0IHRoZSBjbHVzdGVyIHRpbWUgcmFuZ2VcclxuICAgICAgICBjb25zdCBpbml0aWFsWERvbWFpbiA9IFtcclxuICAgICAgICAgICAgdGltZXN0YW1wc1tjbHVzdGVyU3RhcnRJbmRleF0sXHJcbiAgICAgICAgICAgIHRpbWVzdGFtcHNbY2x1c3RlckVuZEluZGV4XVxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKGDij7MgSW5pdGlhbCBGb2N1cyBYIERvbWFpbjogJHtpbml0aWFsWERvbWFpblswXX0gdG8gJHtpbml0aWFsWERvbWFpblsxXX1gKTtcclxuXHJcbiAgICAgICAgY29uc3QgYW81ID0gY29tcHV0ZVJvbGxpbmdBdmVyYWdlKHRpbWVzLCA1KTtcclxuICAgICAgICBjb25zdCBhbzEyID0gY29tcHV0ZVJvbGxpbmdBdmVyYWdlKHRpbWVzLCAxMik7XHJcblxyXG4gICAgICAgIGNvbnN0IGFvNURhdGEgPSB0aW1lc3RhbXBzLm1hcCgodGltZXN0YW1wLCBpKSA9PiAoe1xyXG4gICAgICAgICAgICB0aW1lc3RhbXA6IHRpbWVzdGFtcCxcclxuICAgICAgICAgICAgdmFsdWU6IGFvNVtpXSAhPT0gbnVsbCA/IGFvNVtpXSA6IG51bGxcclxuICAgICAgICB9KSkuZmlsdGVyKGQgPT4gZC52YWx1ZSAhPT0gbnVsbCk7IC8vIFJlbW92ZSBpbml0aWFsIG51bGxzXHJcblxyXG4gICAgICAgIGNvbnN0IGFvMTJEYXRhID0gdGltZXN0YW1wcy5tYXAoKHRpbWVzdGFtcCwgaSkgPT4gKHtcclxuICAgICAgICAgICAgdGltZXN0YW1wOiB0aW1lc3RhbXAsXHJcbiAgICAgICAgICAgIHZhbHVlOiBhbzEyW2ldICE9PSBudWxsID8gYW8xMltpXSA6IG51bGxcclxuICAgICAgICB9KSkuZmlsdGVyKGQgPT4gZC52YWx1ZSAhPT0gbnVsbCk7IC8vIFJlbW92ZSBpbml0aWFsIG51bGxzXHJcblxyXG4gICAgICAgIC8vIFggU2NhbGU6IFN0YXJ0IHpvb21lZCBpbnRvIHRoZSBpZGVudGlmaWVkIGNsdXN0ZXJcclxuICAgICAgICBsZXQgeFNjYWxlID0gZDMuc2NhbGVUaW1lKClcclxuICAgICAgICAgICAgLmRvbWFpbih4RG9tYWluUmVmLmN1cnJlbnQgPz8gW3RpbWVzdGFtcHNbMF0sIHRpbWVzdGFtcHNbdGltZXN0YW1wcy5sZW5ndGggLSAxXV0pICAvLyDinIUgVXNlIHJlZiBhcyBmYWxsYmFja1xyXG4gICAgICAgICAgICAucmFuZ2UoWzUwLCB3aWR0aCAtIDUwXSk7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwi8J+TiSBBcHBseWluZyBYIFNjYWxlIGRvbWFpbiBpbiBkcmF3U29sdmVUaW1lVHJlbmQ6XCIsIHhTY2FsZS5kb21haW4oKSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJ4U2NhbGUgcmFuZ2U6XCIsIHhTY2FsZS5yYW5nZSgpKTtcclxuXHJcbiAgICAgICAgY29uc3QgeVNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKVxyXG4gICAgICAgICAgICAuZG9tYWluKFtkMy5tYXgodGltZXMpLCBkMy5taW4odGltZXMpXSlcclxuICAgICAgICAgICAgLnJhbmdlKFs1MCwgaGVpZ2h0IC0gNTBdKTtcclxuXHJcbiAgICAgICAgLy8gQWRkIFggYW5kIFkgYXhlc1xyXG4gICAgICAgIGNvbnN0IHhBeGlzID0gc3ZnLmFwcGVuZCgnZycpXHJcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICd4LWF4aXMnKVxyXG4gICAgICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgwLCAke2hlaWdodCAtIDUwfSlgKVxyXG4gICAgICAgICAgICAuY2FsbChkMy5heGlzQm90dG9tKHhTY2FsZSkudGlja0Zvcm1hdChkMy50aW1lRm9ybWF0KCclSDolTTolUycpKSk7XHJcblxyXG4gICAgICAgIC8vIEZpbHRlciB1bmlxdWUgZGF5cyBmb3IgZGlzcGxheWluZyBkYXRlIGJlbG93XHJcbiAgICAgICAgbGV0IGxhc3REYXRlID0gbnVsbDtcclxuICAgICAgICB4QXhpcy5zZWxlY3RBbGwoJ3RleHQnKVxyXG4gICAgICAgICAgICAuYXR0cignZHknLCAnMS4yZW0nKSAvLyBNb3ZlIHRpbWUgbGFiZWxzIHVwIHNsaWdodGx5XHJcbiAgICAgICAgICAgIC5lYWNoKGZ1bmN0aW9uKGQsIGksIG5vZGVzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50VGV4dCA9IGQzLnNlbGVjdCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGVTdHIgPSBkMy50aW1lRm9ybWF0KCclYiAlZCwgJVknKShuZXcgRGF0ZShkKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZVN0ciAhPT0gbGFzdERhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VGV4dC5hcHBlbmQoJ3RzcGFuJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3gnLCAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cignZHknLCAnMS4yZW0nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAudGV4dChkYXRlU3RyKTtcclxuICAgICAgICAgICAgICAgICAgICBsYXN0RGF0ZSA9IGRhdGVTdHI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCB5QXhpcyA9IHN2Zy5hcHBlbmQoJ2cnKVxyXG4gICAgICAgICAgICAuYXR0cignY2xhc3MnLCAneS1heGlzJylcclxuICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoNTAsIDApYClcclxuICAgICAgICAgICAgLmNhbGwoZDMuYXhpc0xlZnQoeVNjYWxlKSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGdyaWRHcm91cCA9IHN2Zy5hcHBlbmQoJ2cnKS5hdHRyKCdjbGFzcycsICdncmlkJyk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGRyYXdHcmlkKHhTY2FsZSwgeVNjYWxlKSB7XHJcbiAgICAgICAgICAgIGdyaWRHcm91cC5zZWxlY3RBbGwoJyonKS5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEhvcml6b250YWwgZ3JpZCBsaW5lc1xyXG4gICAgICAgICAgICBncmlkR3JvdXAuc2VsZWN0QWxsKCcuaG9yaXpvbnRhbC1ncmlkJylcclxuICAgICAgICAgICAgICAgIC5kYXRhKHlTY2FsZS50aWNrcygxMCkpXHJcbiAgICAgICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZCgnbGluZScpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnaG9yaXpvbnRhbC1ncmlkJylcclxuICAgICAgICAgICAgICAgIC5hdHRyKCd4MScsIDUwKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3gyJywgd2lkdGggLSA1MClcclxuICAgICAgICAgICAgICAgIC5hdHRyKCd5MScsIGQgPT4geVNjYWxlKGQpKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3kyJywgZCA9PiB5U2NhbGUoZCkpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignc3Ryb2tlJywgJyNjY2MnKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3N0cm9rZS1kYXNoYXJyYXknLCAnNCw0Jyk7XHJcblxyXG4gICAgICAgICAgICAvLyBWZXJ0aWNhbCBncmlkIGxpbmVzXHJcbiAgICAgICAgICAgIGdyaWRHcm91cC5zZWxlY3RBbGwoJy52ZXJ0aWNhbC1ncmlkJylcclxuICAgICAgICAgICAgICAgIC5kYXRhKHhTY2FsZS50aWNrcygxMCkpXHJcbiAgICAgICAgICAgICAgICAuZW50ZXIoKVxyXG4gICAgICAgICAgICAgICAgLmFwcGVuZCgnbGluZScpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAndmVydGljYWwtZ3JpZCcpXHJcbiAgICAgICAgICAgICAgICAuYXR0cigneDEnLCBkID0+IHhTY2FsZShkKSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKCd4MicsIGQgPT4geFNjYWxlKGQpKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3kxJywgNTApXHJcbiAgICAgICAgICAgICAgICAuYXR0cigneTInLCBoZWlnaHQgLSA1MClcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdzdHJva2UnLCAnI2NjYycpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignc3Ryb2tlLWRhc2hhcnJheScsICc0LDQnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRyYXdHcmlkKHhTY2FsZSwgeVNjYWxlKTtcclxuXHJcbiAgICAgICAgY29uc3Qgem9vbSA9IGQzLnpvb20oKVxyXG4gICAgICAgICAgICAvLyAuc2NhbGVFeHRlbnQoWzAuNSwgNV0pXHJcbiAgICAgICAgICAgIC8vIC50cmFuc2xhdGVFeHRlbnQoW1swLCAwXSwgW3dpZHRoLCBoZWlnaHRdXSlcclxuICAgICAgICAgICAgLm9uKCd6b29tJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSBldmVudC50cmFuc2Zvcm07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdYU2NhbGUgPSB0cmFuc2Zvcm0ucmVzY2FsZVgoeFNjYWxlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld1lTY2FsZSA9IHRyYW5zZm9ybS5yZXNjYWxlWSh5U2NhbGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVXBkYXRlZCB4U2NhbGUgZG9tYWluOlwiLCBuZXdYU2NhbGUuZG9tYWluKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBhbGwgcGxvdHNcclxuICAgICAgICAgICAgICAgIHVwZGF0ZVBsb3QobmV3WFNjYWxlLCBuZXdZU2NhbGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBheGVzXHJcbiAgICAgICAgICAgICAgICB4QXhpcy5jYWxsKGQzLmF4aXNCb3R0b20obmV3WFNjYWxlKS50aWNrRm9ybWF0KGQzLnRpbWVGb3JtYXQoJyVIOiVNOiVTJykpKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgbGFzdFpvb21EYXRlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHhBeGlzLnNlbGVjdEFsbCgndGV4dCcpXHJcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ2R5JywgJzEuMmVtJylcclxuICAgICAgICAgICAgICAgICAgICAuZWFjaChmdW5jdGlvbihkLCBpLCBub2Rlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50VGV4dCA9IGQzLnNlbGVjdCh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0ZVN0ciA9IGQzLnRpbWVGb3JtYXQoJyViICVkLCAlWScpKG5ldyBEYXRlKGQpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGVTdHIgIT09IGxhc3Rab29tRGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFRleHQuYXBwZW5kKCd0c3BhbicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ3gnLCAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKCdkeScsICcxLjJlbScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRleHQoZGF0ZVN0cik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0Wm9vbURhdGUgPSBkYXRlU3RyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB5QXhpcy5jYWxsKGQzLmF4aXNMZWZ0KG5ld1lTY2FsZSkpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBncmlkIHdpdGggbmV3IHNjYWxlc1xyXG4gICAgICAgICAgICAgICAgZHJhd0dyaWQobmV3WFNjYWxlLCBuZXdZU2NhbGUpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgc3ZnLmNhbGwoem9vbSk7XHJcblxyXG4gICAgICAgIC8vIOKchSBBZGQgTGVnZW5kcyAoQmVsb3cgQXV0b3NjYWxlIEJ1dHRvbilcclxuICAgICAgICBjb25zdCBsZWdlbmQgPSBzdmcuYXBwZW5kKCdnJylcclxuICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHt3aWR0aCAtIDEyMH0sIDgwKWApOyAvLyDirIcgTW92ZXMgbGVnZW5kIGxvd2VyIHVuZGVyIGJ1dHRvblxyXG5cclxuICAgICAgICBjb25zdCBsZWdlbmRJdGVtcyA9IFtcclxuICAgICAgICAgICAgeyBjb2xvcjogJ2JsdWUnLCBsYWJlbDogJ1NpbmdsZScgfSxcclxuICAgICAgICAgICAgeyBjb2xvcjogJ2dyZWVuJywgbGFiZWw6ICdBTzUnIH0sXHJcbiAgICAgICAgICAgIHsgY29sb3I6ICdyZWQnLCBsYWJlbDogJ0FPMTInIH1cclxuICAgICAgICBdO1xyXG5cclxuICAgICAgICBsZWdlbmRJdGVtcy5mb3JFYWNoKChpdGVtLCBpKSA9PiB7XHJcbiAgICAgICAgICAgIGxlZ2VuZC5hcHBlbmQoJ3JlY3QnKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3gnLCAwKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3knLCBpICogMjApXHJcbiAgICAgICAgICAgICAgICAuYXR0cignd2lkdGgnLCAxNSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdoZWlnaHQnLCAxNSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgaXRlbS5jb2xvcik7XHJcblxyXG4gICAgICAgICAgICBsZWdlbmQuYXBwZW5kKCd0ZXh0JylcclxuICAgICAgICAgICAgICAgIC5hdHRyKCd4JywgMjApXHJcbiAgICAgICAgICAgICAgICAuYXR0cigneScsIGkgKiAyMCArIDEyKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCAnYmxhY2snKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2ZvbnQtc2l6ZScsICcxMnB4JylcclxuICAgICAgICAgICAgICAgIC50ZXh0KGl0ZW0ubGFiZWwpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuLy8gRW5zdXJlIGV2ZW50IGlzIHBhc3NlZCB0byBhdXRvc2NhbGVcclxuICAgICAgICBzdmcub24oJ2RibGNsaWNrJywgKGV2ZW50KSA9PiBhdXRvc2NhbGUoZXZlbnQpKTtcclxuXHJcbi8vIEFsc28gZXhwbGljaXRseSBkaXNhYmxlIHpvb20gb24gZG91YmxlLWNsaWNrIHRvIHByZXZlbnQgem9vbWluZyBpblxyXG4gICAgICAgIHN2Zy5jYWxsKHpvb20pLm9uKFwiZGJsY2xpY2suem9vbVwiLCBudWxsKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdXBkYXRlUGxvdChuZXdYU2NhbGUsIG5ld1lTY2FsZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIvCflIQgVXBkYXRpbmcgUGxvdCB3aXRoIE5ldyBTY2FsZXM6XCIpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIvCfn6IgTmV3IFggU2NhbGUgRG9tYWluOlwiLCBuZXdYU2NhbGUuZG9tYWluKCkpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIvCfn6IgTmV3IFkgU2NhbGUgRG9tYWluOlwiLCBuZXdZU2NhbGUuZG9tYWluKCkpO1xyXG5cclxuICAgICAgICAgICAgLy8g4pyFIEVuc3VyZSB0aGF0IHRoZSBBTzUgYW5kIEFPMTIgcG9pbnRzIGFyZSBjb3JyZWN0bHkgYm91bmRcclxuICAgICAgICAgICAgY29uc3QgYW81U2VsZWN0aW9uID0gc3ZnLnNlbGVjdEFsbCgnLnBvaW50LWFvNScpXHJcbiAgICAgICAgICAgICAgICAuZGF0YShhbzVEYXRhLCBkID0+IGQudGltZXN0YW1wKVxyXG4gICAgICAgICAgICAgICAgLmpvaW4oJ2NpcmNsZScpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAncG9pbnQtYW81JylcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdjeCcsIGQgPT4geFNjYWxlKG5ldyBEYXRlKGQudGltZXN0YW1wKSkpICAvLyBBbGlnbiB3aXRoIHRpbWVzdGFtcHNcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdjeScsIGQgPT4geVNjYWxlKGQudmFsdWUpKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3InLCA1KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCAnZ3JlZW4nKVxyXG4gICAgICAgICAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIChldmVudCwgZCkgPT4gc2hvd1Rvb2x0aXAoZXZlbnQsIGQudGltZXN0YW1wKSlcclxuICAgICAgICAgICAgICAgIC5vbihcIm1vdXNlb3V0XCIsICgpID0+IHRvb2x0aXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGFvMTJTZWxlY3Rpb24gPSBzdmcuc2VsZWN0QWxsKCcucG9pbnQtYW8xMicpXHJcbiAgICAgICAgICAgICAgICAuZGF0YShhbzEyRGF0YSwgZCA9PiBkLnRpbWVzdGFtcClcclxuICAgICAgICAgICAgICAgIC5qb2luKCdjaXJjbGUnKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ3BvaW50LWFvMTInKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2N4JywgZCA9PiB4U2NhbGUobmV3IERhdGUoZC50aW1lc3RhbXApKSkgIC8vIEFsaWduIHdpdGggdGltZXN0YW1wc1xyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2N5JywgZCA9PiB5U2NhbGUoZC52YWx1ZSkpXHJcbiAgICAgICAgICAgICAgICAuYXR0cigncicsIDUpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignZmlsbCcsICdyZWQnKVxyXG4gICAgICAgICAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIChldmVudCwgZCkgPT4gc2hvd1Rvb2x0aXAoZXZlbnQsIGQudGltZXN0YW1wKSlcclxuICAgICAgICAgICAgICAgIC5vbihcIm1vdXNlb3V0XCIsICgpID0+IHRvb2x0aXAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGDinJQgVG90YWwgQU81IFBvaW50cyBTZWxlY3RlZDogJHthbzVTZWxlY3Rpb24uc2l6ZSgpfSAoRXhwZWN0ZWQ6ICR7YW81Lmxlbmd0aH0pYCk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGDinJQgVG90YWwgQU8xMiBQb2ludHMgU2VsZWN0ZWQ6ICR7YW8xMlNlbGVjdGlvbi5zaXplKCl9IChFeHBlY3RlZDogJHthbzEyLmxlbmd0aH0pYCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoYW81U2VsZWN0aW9uLnNpemUoKSA9PT0gMCkgY29uc29sZS53YXJuKFwi4pqg77iPIE5vIEFPNSBwb2ludHMgZm91bmQgaW4gdXBkYXRlUGxvdCFcIik7XHJcbiAgICAgICAgICAgIGlmIChhbzEyU2VsZWN0aW9uLnNpemUoKSA9PT0gMCkgY29uc29sZS53YXJuKFwi4pqg77iPIE5vIEFPMTIgcG9pbnRzIGZvdW5kIGluIHVwZGF0ZVBsb3QhXCIpO1xyXG5cclxuICAgICAgICAgICAgLy8g4pyFIFVwZGF0ZSBhbGwgQU81IHBvaW50cyBjb3JyZWN0bHlcclxuICAgICAgICAgICAgYW81U2VsZWN0aW9uLmF0dHIoJ2N4JywgZCA9PiBuZXdYU2NhbGUobmV3IERhdGUoZC50aW1lc3RhbXApKSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdjeScsIGQgPT4gbmV3WVNjYWxlKGQudmFsdWUpKTsgLy8g4pyFIFVzZSBkLnZhbHVlIGZvciBBTzVcclxuXHJcbiAgICAgICAgICAgIC8vIOKchSBVcGRhdGUgYWxsIEFPMTIgcG9pbnRzIGNvcnJlY3RseVxyXG4gICAgICAgICAgICBhbzEyU2VsZWN0aW9uLmF0dHIoJ2N4JywgZCA9PiBuZXdYU2NhbGUobmV3IERhdGUoZC50aW1lc3RhbXApKSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdjeScsIGQgPT4gbmV3WVNjYWxlKGQudmFsdWUpKTsgLy8g4pyFIFVzZSBkLnZhbHVlIGZvciBBTzEyXHJcblxyXG4gICAgICAgICAgICAvLyDinIUgRGVidWdnaW5nOiBFbnN1cmUgbGFzdCBBTzUgJiBBTzEyIHBvaW50cyB1cGRhdGUgY29ycmVjdGx5XHJcbiAgICAgICAgICAgIGFvNVNlbGVjdGlvbi5lYWNoKGZ1bmN0aW9uIChkLCBpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA+PSBhbzUubGVuZ3RoIC0gNCkgeyAvLyBVc2UgYGFvNS5sZW5ndGhgIHRvIGNvcnJlY3RseSBpdGVyYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYPCfn6IgQU81IFBvaW50ICR7aX06IHg9JHtuZXdYU2NhbGUoZC54KX0sIHk9JHtuZXdZU2NhbGUoZC55KX1gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBhbzEyU2VsZWN0aW9uLmVhY2goZnVuY3Rpb24gKGQsIGkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpID49IGFvMTIubGVuZ3RoIC0gMTIpIHsgLy8gVXNlIGBhbzEyLmxlbmd0aGAgdG8gY29ycmVjdGx5IGl0ZXJhdGVcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhg8J+UtCBBTzEyIFBvaW50ICR7aX06IHg9JHtuZXdYU2NhbGUoZC54KX0sIHk9JHtuZXdZU2NhbGUoZC55KX1gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyDinIUgVXBkYXRlIHNpbmdsZSBzb2x2ZSBwb2ludHNcclxuICAgICAgICAgICAgc3ZnLnNlbGVjdEFsbCgnLnBvaW50LXNpbmdsZScpXHJcbiAgICAgICAgICAgICAgICAuZGF0YShwcm9jZXNzZWREYXRhLCBkID0+IGQudGltZXN0YW1wKVxyXG4gICAgICAgICAgICAgICAgLmpvaW4oJ2NpcmNsZScpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCAncG9pbnQtc2luZ2xlJylcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdjeCcsIGQgPT4gbmV3WFNjYWxlKG5ldyBEYXRlKGQudGltZXN0YW1wKSkpIC8vIEZJWDogVXNlIG5ld1hTY2FsZVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2N5JywgZCA9PiBuZXdZU2NhbGUoZC50aW1lKSkgLy8gRklYOiBVc2UgbmV3WVNjYWxlXHJcbiAgICAgICAgICAgICAgICAuYXR0cigncicsIDUpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignZmlsbCcsICdibHVlJylcclxuICAgICAgICAgICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCAoZXZlbnQsIGQpID0+IHNob3dUb29sdGlwKGV2ZW50LCBkLnRpbWVzdGFtcCkpXHJcbiAgICAgICAgICAgICAgICAub24oXCJtb3VzZW91dFwiLCAoKSA9PiB0b29sdGlwLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKSk7XHJcblxyXG4gICAgICAgICAgICAvLyDinIUgVXBkYXRlIHNpbmdsZSBzb2x2ZSBsaW5lXHJcbiAgICAgICAgICAgIHN2Zy5zZWxlY3RBbGwoJy5saW5lLXNpbmdsZScpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignZCcsIGQzLmxpbmUoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5jdXJ2ZShkMy5jdXJ2ZU1vbm90b25lWClcclxuICAgICAgICAgICAgICAgICAgICAueChkID0+IG5ld1hTY2FsZShuZXcgRGF0ZShkLnRpbWVzdGFtcCkpKVxyXG4gICAgICAgICAgICAgICAgICAgIC55KGQgPT4gbmV3WVNjYWxlKGQudGltZSkpXHJcbiAgICAgICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgLy8g4pyFIEVuc3VyZSBBTzUgbGluZSBhbGlnbnMgZHluYW1pY2FsbHlcclxuICAgICAgICAgICAgc3ZnLnNlbGVjdEFsbCgnLmxpbmUtYW81JylcclxuICAgICAgICAgICAgICAgIC5kYXR1bShhbzUubWFwKCh2YWwsIGkpID0+ICh7IHRpbWVzdGFtcDogdGltZXN0YW1wc1tpXSwgdmFsdWU6IHZhbCB9KSkpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignZCcsIGQzLmxpbmUoKVxyXG4gICAgICAgICAgICAgICAgICAgIC5jdXJ2ZShkMy5jdXJ2ZU1vbm90b25lWClcclxuICAgICAgICAgICAgICAgICAgICAuZGVmaW5lZChkID0+IGQudmFsdWUgIT09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgLngoZCA9PiBuZXdYU2NhbGUobmV3IERhdGUoZC50aW1lc3RhbXApKSlcclxuICAgICAgICAgICAgICAgICAgICAueShkID0+IG5ld1lTY2FsZShkLnZhbHVlKSlcclxuICAgICAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgICAgICAvLyDinIUgRW5zdXJlIEFPMTIgbGluZSBhbGlnbnMgZHluYW1pY2FsbHlcclxuICAgICAgICAgICAgc3ZnLnNlbGVjdEFsbCgnLmxpbmUtYW8xMicpXHJcbiAgICAgICAgICAgICAgICAuZGF0dW0oYW8xMi5tYXAoKHZhbCwgaSkgPT4gKHsgdGltZXN0YW1wOiB0aW1lc3RhbXBzW2ldLCB2YWx1ZTogdmFsIH0pKSlcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdkJywgZDMubGluZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgLmN1cnZlKGQzLmN1cnZlTW9ub3RvbmVYKVxyXG4gICAgICAgICAgICAgICAgICAgIC5kZWZpbmVkKGQgPT4gZC52YWx1ZSAhPT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAueChkID0+IG5ld1hTY2FsZShuZXcgRGF0ZShkLnRpbWVzdGFtcCkpKVxyXG4gICAgICAgICAgICAgICAgICAgIC55KGQgPT4gbmV3WVNjYWxlKGQudmFsdWUpKVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN2Zy5hcHBlbmQoJ3BhdGgnKVxyXG4gICAgICAgICAgICAuZGF0dW0ocHJvY2Vzc2VkRGF0YSlcclxuICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2xpbmUtc2luZ2xlJylcclxuICAgICAgICAgICAgLmF0dHIoJ3N0cm9rZScsICdibHVlJylcclxuICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCAnbm9uZScpXHJcbiAgICAgICAgICAgIC5hdHRyKCdzdHJva2Utd2lkdGgnLCAyKVxyXG4gICAgICAgICAgICAuYXR0cignZCcsIGQzLmxpbmUoKVxyXG4gICAgICAgICAgICAgICAgLmN1cnZlKGQzLmN1cnZlTW9ub3RvbmVYKVxyXG4gICAgICAgICAgICAgICAgLngoZCA9PiB4U2NhbGUobmV3IERhdGUoZC50aW1lc3RhbXApKSlcclxuICAgICAgICAgICAgICAgIC55KGQgPT4geVNjYWxlKGQudGltZSkpXHJcbiAgICAgICAgICAgICk7XHJcblxyXG4gICAgICAgIHN2Zy5zZWxlY3RBbGwoJy5saW5lLWFvNScpXHJcbiAgICAgICAgICAgIC5kYXRhKFthbzVdKSAgLy8g4pyFIFVzZSAuZGF0YShbXSkgaW5zdGVhZCBvZiAuZGF0dW0oKVxyXG4gICAgICAgICAgICAuam9pbihcInBhdGhcIilcclxuICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2xpbmUtYW81JylcclxuICAgICAgICAgICAgLmF0dHIoJ3N0cm9rZScsICdncmVlbicpXHJcbiAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgJ25vbmUnKVxyXG4gICAgICAgICAgICAuYXR0cignc3Ryb2tlLXdpZHRoJywgMilcclxuICAgICAgICAgICAgLmF0dHIoJ2QnLCBkMy5saW5lKClcclxuICAgICAgICAgICAgICAgIC5jdXJ2ZShkMy5jdXJ2ZU1vbm90b25lWClcclxuICAgICAgICAgICAgICAgIC5kZWZpbmVkKChfLCBpKSA9PiBpID49IDQgJiYgYW81W2ldICE9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgLngoKF8sIGkpID0+IHhTY2FsZShuZXcgRGF0ZSh0aW1lc3RhbXBzW2ldKSkpICAvLyDinIUgVXNlIHRpbWVzdGFtcHNcclxuICAgICAgICAgICAgICAgIC55KChfLCBpKSA9PiB5U2NhbGUoYW81W2ldKSlcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgc3ZnLnNlbGVjdEFsbCgnLmxpbmUtYW8xMicpXHJcbiAgICAgICAgICAgIC5kYXRhKFthbzEyXSkgIC8vIOKchSBVc2UgLmRhdGEoW10pIGluc3RlYWQgb2YgLmRhdHVtKClcclxuICAgICAgICAgICAgLmpvaW4oXCJwYXRoXCIpXHJcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdsaW5lLWFvMTInKVxyXG4gICAgICAgICAgICAuYXR0cignc3Ryb2tlJywgJ3JlZCcpXHJcbiAgICAgICAgICAgIC5hdHRyKCdmaWxsJywgJ25vbmUnKVxyXG4gICAgICAgICAgICAuYXR0cignc3Ryb2tlLXdpZHRoJywgMilcclxuICAgICAgICAgICAgLmF0dHIoJ2QnLCBkMy5saW5lKClcclxuICAgICAgICAgICAgICAgIC5jdXJ2ZShkMy5jdXJ2ZU1vbm90b25lWClcclxuICAgICAgICAgICAgICAgIC5kZWZpbmVkKChfLCBpKSA9PiBpID49IDExICYmIGFvMTJbaV0gIT09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAueCgoXywgaSkgPT4geFNjYWxlKG5ldyBEYXRlKHRpbWVzdGFtcHNbaV0pKSkgIC8vIOKchSBVc2UgdGltZXN0YW1wc1xyXG4gICAgICAgICAgICAgICAgLnkoKF8sIGkpID0+IHlTY2FsZShhbzEyW2ldKSlcclxuICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgY29uc3QgdG9vbHRpcCA9IGQzLnNlbGVjdChjb250YWluZXJSZWYuY3VycmVudCkuYXBwZW5kKCdkaXYnKVxyXG4gICAgICAgICAgICAuYXR0cignY2xhc3MnLCAnYWJzb2x1dGUgYmctd2hpdGUgcC0yIGJvcmRlciByb3VuZGVkIHNoYWRvdyB0ZXh0LXNtJylcclxuICAgICAgICAgICAgLnN0eWxlKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpXHJcbiAgICAgICAgICAgIC5zdHlsZSgncG9zaXRpb24nLCAnYWJzb2x1dGUnKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2hvd1Rvb2x0aXAoZXZlbnQsIHRpbWVzdGFtcCkge1xyXG4gICAgICAgICAgICBpZiAoIXRpbWVzdGFtcCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwi4pqg77iPIHNob3dUb29sdGlwIGNhbGxlZCB3aXRoIGludmFsaWQgdGltZXN0YW1wOlwiLCB0aW1lc3RhbXApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBGaW5kIGFsbCBkYXRhIHBvaW50cyB3aXRoIHRoZSBzYW1lIHRpbWVzdGFtcFxyXG4gICAgICAgICAgICBjb25zdCBzaW5nbGVEYXRhID0gcHJvY2Vzc2VkRGF0YS5maW5kKGQgPT4gZC50aW1lc3RhbXAuZ2V0VGltZSgpID09PSB0aW1lc3RhbXAuZ2V0VGltZSgpKTtcclxuICAgICAgICAgICAgY29uc3QgYW81RGF0YVBvaW50ID0gYW81RGF0YS5maW5kKGQgPT4gZC50aW1lc3RhbXAuZ2V0VGltZSgpID09PSB0aW1lc3RhbXAuZ2V0VGltZSgpKTtcclxuICAgICAgICAgICAgY29uc3QgYW8xMkRhdGFQb2ludCA9IGFvMTJEYXRhLmZpbmQoZCA9PiBkLnRpbWVzdGFtcC5nZXRUaW1lKCkgPT09IHRpbWVzdGFtcC5nZXRUaW1lKCkpO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgc2luZ2xlVGltZSA9IHNpbmdsZURhdGEgPyBzaW5nbGVEYXRhLnRpbWUudG9GaXhlZCgyKSA6IFwiLVwiO1xyXG4gICAgICAgICAgICBjb25zdCBhbzVUaW1lID0gYW81RGF0YVBvaW50ID8gYW81RGF0YVBvaW50LnZhbHVlLnRvRml4ZWQoMikgOiBcIi1cIjtcclxuICAgICAgICAgICAgY29uc3QgYW8xMlRpbWUgPSBhbzEyRGF0YVBvaW50ID8gYW8xMkRhdGFQb2ludC52YWx1ZS50b0ZpeGVkKDIpIDogXCItXCI7XHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhg8J+foiBTaG93aW5nIHRvb2x0aXAgZm9yIHRpbWVzdGFtcCAke3RpbWVzdGFtcH06IFNpbmdsZT0ke3NpbmdsZVRpbWV9LCBBTzU9JHthbzVUaW1lfSwgQU8xMj0ke2FvMTJUaW1lfWApO1xyXG5cclxuICAgICAgICAgICAgdG9vbHRpcC5odG1sKGBcclxuICAgICAgICAgICAgICAgIDxkaXY+PHN0cm9uZz5TaW5nbGU6PC9zdHJvbmc+ICR7c2luZ2xlVGltZX1zPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2PjxzdHJvbmc+QU81Ojwvc3Ryb25nPiAke2FvNVRpbWV9czwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdj48c3Ryb25nPkFPMTI6PC9zdHJvbmc+ICR7YW8xMlRpbWV9czwvZGl2PlxyXG4gICAgICAgICAgICBgKVxyXG4gICAgICAgICAgICAgICAgLnN0eWxlKCd2aXNpYmlsaXR5JywgJ3Zpc2libGUnKVxyXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdwb3NpdGlvbicsICdmaXhlZCcpXHJcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ2JhY2tncm91bmQnLCAnd2hpdGUnKVxyXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdwYWRkaW5nJywgJzZweCcpXHJcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ2JvcmRlcicsICcxcHggc29saWQgI2NjYycpXHJcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ2JvcmRlci1yYWRpdXMnLCAnNXB4JylcclxuICAgICAgICAgICAgICAgIC5zdHlsZSgnYm94LXNoYWRvdycsICcycHggMnB4IDEwcHggcmdiYSgwLCAwLCAwLCAwLjEpJylcclxuICAgICAgICAgICAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgJzEycHgnKVxyXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdwb2ludGVyLWV2ZW50cycsICdub25lJylcclxuICAgICAgICAgICAgICAgIC5zdHlsZSgnei1pbmRleCcsICcxMDAwJylcclxuICAgICAgICAgICAgICAgIC5zdHlsZSgndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLCAtNTAlKScpO1xyXG5cclxuICAgICAgICAgICAgdG9vbHRpcC5zdHlsZSgnbGVmdCcsIGAke2V2ZW50LnBhZ2VYICsgMTJ9cHhgKS5zdHlsZSgndG9wJywgYCR7ZXZlbnQucGFnZVl9cHhgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGhpZGVUb29sdGlwKCkge1xyXG4gICAgICAgICAgICB0b29sdGlwLnN0eWxlKCd2aXNpYmlsaXR5JywgJ2hpZGRlbicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHVwZGF0ZVBsb3QoeFNjYWxlLCB5U2NhbGUpOyAgLy8g4pyFIEZvcmNlIHJlbmRlciBhZnRlciBpbml0aWFsaXphdGlvblxyXG4gICAgICAgIH0sIDEwMCk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGFkZFBvaW50cyhkYXRhLCBjb2xvciwgY2xhc3NOYW1lLCB2YWx1ZUFjY2Vzc29yLCBtaW5JbmRleCwgbGFiZWwpIHtcclxuICAgICAgICAgICAgLy8g4pyFIEVuc3VyZSB0aGF0IHdlIGNvcnJlY3RseSBpdGVyYXRlIG92ZXIgdGhlIGZ1bGwgZGF0YXNldFxyXG4gICAgICAgICAgICBjb25zdCB2YWxpZFBvaW50cyA9IGRhdGFcclxuICAgICAgICAgICAgICAgIC5tYXAoKHZhbCwgaSkgPT4gKHsgeDogaSwgeTogdmFsdWVBY2Nlc3NvcihpKSB9KSlcclxuICAgICAgICAgICAgICAgIC5maWx0ZXIoZCA9PiBkLnkgIT09IG51bGwgJiYgZC54ID49IG1pbkluZGV4KTsgLy8g4pyFIFJlbW92ZWQgeCA8IHRpbWVzLmxlbmd0aCBjb25zdHJhaW50XHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgXFxu8J+foiBBZGRpbmcgUG9pbnRzIGZvciAke2xhYmVsfSB8IENsYXNzOiAke2NsYXNzTmFtZX0gfCBNaW5JbmRleDogJHttaW5JbmRleH1gKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coYOKclCBWYWxpZCBQb2ludHMgQ291bnQ6ICR7dmFsaWRQb2ludHMubGVuZ3RofWApO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhg8J+TjSBGaXJzdCA1IFBvaW50czpgLCB2YWxpZFBvaW50cy5zbGljZSgwLCA1KSk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGDwn5ONIExhc3QgNSBQb2ludHM6YCwgdmFsaWRQb2ludHMuc2xpY2UoLTUpKTtcclxuXHJcbiAgICAgICAgICAgIHZhbGlkUG9pbnRzLmZvckVhY2goKHBvaW50LCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcclxuICAgICAgICAgICAgICAgICAgICBg8J+UtSAke2xhYmVsfSBQb2ludCAke2kgKyBtaW5JbmRleH06IFJhd1g9JHtwb2ludC54fSwgU2NhbGVkWD0ke3hTY2FsZShwb2ludC54KX0sIGAgK1xyXG4gICAgICAgICAgICAgICAgICAgIGBSYXdZPSR7cG9pbnQueS50b0ZpeGVkKDMpfSwgU2NhbGVkWT0ke3lTY2FsZShwb2ludC55KS50b0ZpeGVkKDIpfWBcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy8gRW5zdXJlIGRhdGEgYmluZGluZyBpcyBkb25lIGNvcnJlY3RseVxyXG4gICAgICAgICAgICBzdmcuc2VsZWN0QWxsKGAuJHtjbGFzc05hbWV9YClcclxuICAgICAgICAgICAgICAgIC5kYXRhKHZhbGlkUG9pbnRzLCBkID0+IGQueCkgLy8gRW5zdXJlIHVuaXF1ZSBrZXkgYmluZGluZ1xyXG4gICAgICAgICAgICAgICAgLmpvaW4oXCJjaXJjbGVcIikgLy8gRW5zdXJlIHByb3BlciBiaW5kaW5nXHJcbiAgICAgICAgICAgICAgICAuYXR0cignY2xhc3MnLCBgcG9pbnQgJHtjbGFzc05hbWV9YClcclxuICAgICAgICAgICAgICAgIC5hdHRyKCdjeCcsIGQgPT4geFNjYWxlKGQueCkpXHJcbiAgICAgICAgICAgICAgICAuYXR0cignY3knLCBkID0+IHlTY2FsZShkLnkpKVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ3InLCA1KVxyXG4gICAgICAgICAgICAgICAgLmF0dHIoJ2ZpbGwnLCBjb2xvcilcclxuICAgICAgICB9XHJcblxyXG4vLyDinIUgRW5zdXJlIEFPNSAmIEFPMTIgcG9pbnRzIGFyZSBmdWxseSBhZGRlZCBiZWZvcmUgdXBkYXRpbmdcclxuICAgICAgICBhZGRQb2ludHModGltZXMsICdibHVlJywgJ3BvaW50LXNpbmdsZScsIChpKSA9PiB0aW1lc1tpXSwgMCwgXCJTaW5nbGVcIik7XHJcbiAgICAgICAgYWRkUG9pbnRzKGFvNSwgJ2dyZWVuJywgJ3BvaW50LWFvNScsIChpKSA9PiBhbzVbaV0sIDQsIFwiQU81XCIpO1xyXG4gICAgICAgIGFkZFBvaW50cyhhbzEyLCAncmVkJywgJ3BvaW50LWFvMTInLCAoaSkgPT4gYW8xMltpXSwgMTEsIFwiQU8xMlwiKTtcclxuXHJcbiAgICAgICAgY29uc3QgY29udHJvbHMgPSBkMy5zZWxlY3QoY29udGFpbmVyUmVmLmN1cnJlbnQpLmFwcGVuZCgnZGl2JylcclxuICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2Fic29sdXRlIHRvcC0yIHJpZ2h0LTIgYmctd2hpdGUgcC0yIHJvdW5kZWQgc2hhZG93IGZsZXggc3BhY2UteC00Jyk7IC8vIEhvcml6b250YWwgbGF5b3V0IHdpdGggc3BhY2luZ1xyXG5cclxuLy8gUHJldmlvdXMgQ2x1c3RlciBCdXR0b25cclxuICAgICAgICBjb250cm9scy5hcHBlbmQoJ2J1dHRvbicpXHJcbiAgICAgICAgICAgIC5odG1sKCc8aW1nIHNyYz1cIi9kYXRhVmlzLXByZXZpb3VzLnN2Z1wiIGFsdD1cIlByZXZpb3VzXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCI+JylcclxuICAgICAgICAgICAgLnN0eWxlKCdtYXJnaW4nLCAnNXB4JykgLy8gQWRkcyBzcGFjaW5nIGFyb3VuZCB0aGUgYnV0dG9uXHJcbiAgICAgICAgICAgIC5hdHRyKCdkaXNhYmxlZCcsIGNsdXN0ZXJzLmxlbmd0aCA9PT0gMCB8fCBjdXJyZW50Q2x1c3RlckluZGV4ID09PSAwID8gJ2Rpc2FibGVkJyA6IG51bGwpXHJcbiAgICAgICAgICAgIC5vbignY2xpY2snLCBwcmV2Q2x1c3Rlcik7XHJcblxyXG4vLyBOZXh0IENsdXN0ZXIgQnV0dG9uXHJcbiAgICAgICAgY29udHJvbHMuYXBwZW5kKCdidXR0b24nKVxyXG4gICAgICAgICAgICAuaHRtbCgnPGltZyBzcmM9XCIvZGF0YVZpcy1uZXh0LnN2Z1wiIGFsdD1cIk5leHRcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIj4nKVxyXG4gICAgICAgICAgICAuc3R5bGUoJ21hcmdpbicsICc1cHgnKVxyXG4gICAgICAgICAgICAuYXR0cignZGlzYWJsZWQnLCBjbHVzdGVycy5sZW5ndGggPT09IDAgfHwgY3VycmVudENsdXN0ZXJJbmRleCA+PSBjbHVzdGVycy5sZW5ndGggLSAxID8gJ2Rpc2FibGVkJyA6IG51bGwpXHJcbiAgICAgICAgICAgIC5vbignY2xpY2snLCBuZXh0Q2x1c3Rlcik7XHJcblxyXG4vLyBBdXRvc2NhbGUgQnV0dG9uXHJcbiAgICAgICAgY29udHJvbHMuYXBwZW5kKCdidXR0b24nKVxyXG4gICAgICAgICAgICAuaHRtbCgnPGltZyBzcmM9XCIvZGF0YVZpcy1yZXNpemUtc2NhbGluZy5zdmdcIiBhbHQ9XCJBdXRvc2NhbGVcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIj4nKVxyXG4gICAgICAgICAgICAuc3R5bGUoJ21hcmdpbicsICc1cHgnKVxyXG4gICAgICAgICAgICAub24oJ2NsaWNrJywgYXV0b3NjYWxlKTtcclxuXHJcbi8vIFN3aXRjaCB0byBUaW1lIFZpZXcgQnV0dG9uXHJcbiAgICAgICAgY29udHJvbHMuYXBwZW5kKCdidXR0b24nKVxyXG4gICAgICAgICAgICAuaHRtbCgnPGltZyBzcmM9XCIvZGF0YVZpcy1zd2l0Y2guc3ZnXCIgYWx0PVwiU3dpdGNoIFZpZXdcIiB3aWR0aD1cIjI0XCIgaGVpZ2h0PVwiMjRcIj4nKVxyXG4gICAgICAgICAgICAuc3R5bGUoJ21hcmdpbicsICc1cHgnKVxyXG4gICAgICAgICAgICAub24oJ2NsaWNrJywgKCkgPT4gc2V0U2hvd0luZGV4Vmlldyh0cnVlKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gYXV0b3NjYWxlKCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwi8J+UjSBBdXRvc2NhbGUgdHJpZ2dlcmVkLi4uXCIpO1xyXG5cclxuICAgICAgICBpZiAoIWNsdXN0ZXJzIHx8IGNsdXN0ZXJzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCLimqDvuI8gTm8gY2x1c3RlcnMgYXZhaWxhYmxlIGZvciBhdXRvc2NhbGUhXCIpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhcIvCfk4wgQXV0b3NjYWxpbmcgdG8gZmlyc3QgY2x1c3Rlci4uLlwiKTtcclxuICAgICAgICBzZXRDdXJyZW50Q2x1c3RlckluZGV4KDApO1xyXG5cclxuICAgICAgICBjb25zdCBmaXJzdENsdXN0ZXIgPSBjbHVzdGVyc1swXTtcclxuXHJcbiAgICAgICAgaWYgKCFmaXJzdENsdXN0ZXIgfHwgZmlyc3RDbHVzdGVyLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCLimqDvuI8gRmlyc3QgY2x1c3RlciBpcyBlbXB0eSwgY2Fubm90IGF1dG9zY2FsZSFcIik7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG5ld0RvbWFpbiA9IFtcclxuICAgICAgICAgICAgbmV3IERhdGUoZmlyc3RDbHVzdGVyWzBdLnRpbWVzdGFtcCksXHJcbiAgICAgICAgICAgIG5ldyBEYXRlKGZpcnN0Q2x1c3Rlci5zbGljZSgtMSlbMF0udGltZXN0YW1wKVxyXG4gICAgICAgIF07XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKFwi4pyFIFNldHRpbmcgYXV0b3NjYWxlIFgtRG9tYWluIHRvOlwiLCBuZXdEb21haW4pO1xyXG4gICAgICAgIHNldFhEb21haW4obmV3RG9tYWluKTtcclxuICAgICAgICB4RG9tYWluUmVmLmN1cnJlbnQgPSBuZXdEb21haW47XHJcblxyXG4gICAgICAgIC8vIOKchSBGb3JjZSBSZWFjdCB0byB1cGRhdGUgVUkgc3RhdGVcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgc2V0Q2x1c3RlcnMoWy4uLmNsdXN0ZXJzXSk7IC8vIEZvcmNlIHJlLWV2YWx1YXRpb24gb2YgY2x1c3RlcnMgc3RhdGVcclxuICAgICAgICB9LCAwKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBuZXh0Q2x1c3RlcigpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhcIuKeoe+4jyBOZXh0IGNsdXN0ZXIgY2xpY2tlZC4uLlwiKTtcclxuICAgICAgICBpZiAoY3VycmVudENsdXN0ZXJJbmRleCA8IGNsdXN0ZXJzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgY29uc3QgbmV4dEluZGV4ID0gY3VycmVudENsdXN0ZXJJbmRleCArIDE7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwi8J+TjCBNb3ZpbmcgdG8gbmV4dCBjbHVzdGVyOlwiLCBuZXh0SW5kZXgpO1xyXG4gICAgICAgICAgICBzZXRDdXJyZW50Q2x1c3RlckluZGV4KG5leHRJbmRleCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld0RvbWFpbiA9IFtcclxuICAgICAgICAgICAgICAgIG5ldyBEYXRlKGNsdXN0ZXJzW25leHRJbmRleF1bMF0udGltZXN0YW1wKSxcclxuICAgICAgICAgICAgICAgIG5ldyBEYXRlKGNsdXN0ZXJzW25leHRJbmRleF0uc2xpY2UoLTEpWzBdLnRpbWVzdGFtcClcclxuICAgICAgICAgICAgXTtcclxuXHJcbiAgICAgICAgICAgIHNldFhEb21haW4obmV3RG9tYWluKTtcclxuICAgICAgICAgICAgeERvbWFpblJlZi5jdXJyZW50ID0gbmV3RG9tYWluO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIuKaoO+4jyBObyBuZXh0IGNsdXN0ZXIgYXZhaWxhYmxlIVwiKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gcHJldkNsdXN0ZXIoKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCLirIXvuI8gUHJldmlvdXMgY2x1c3RlciBjbGlja2VkLi4uXCIpO1xyXG4gICAgICAgIGlmIChjdXJyZW50Q2x1c3RlckluZGV4ID4gMCkge1xyXG4gICAgICAgICAgICBjb25zdCBwcmV2SW5kZXggPSBjdXJyZW50Q2x1c3RlckluZGV4IC0gMTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCLwn5OMIE1vdmluZyB0byBwcmV2aW91cyBjbHVzdGVyOlwiLCBwcmV2SW5kZXgpO1xyXG4gICAgICAgICAgICBzZXRDdXJyZW50Q2x1c3RlckluZGV4KHByZXZJbmRleCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld0RvbWFpbiA9IFtcclxuICAgICAgICAgICAgICAgIG5ldyBEYXRlKGNsdXN0ZXJzW3ByZXZJbmRleF1bMF0udGltZXN0YW1wKSxcclxuICAgICAgICAgICAgICAgIG5ldyBEYXRlKGNsdXN0ZXJzW3ByZXZJbmRleF0uc2xpY2UoLTEpWzBdLnRpbWVzdGFtcClcclxuICAgICAgICAgICAgXTtcclxuXHJcbiAgICAgICAgICAgIHNldFhEb21haW4obmV3RG9tYWluKTtcclxuICAgICAgICAgICAgeERvbWFpblJlZi5jdXJyZW50ID0gbmV3RG9tYWluO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIuKaoO+4jyBObyBwcmV2aW91cyBjbHVzdGVyIGF2YWlsYWJsZSFcIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIHJldHVybiAoXHJcbiAgICAvLyAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LXNjcmVlbiBoLVtjYWxjKDEwMHZoLTEwMHB4KV0gYmctd2hpdGUgcmVsYXRpdmVcIj5cclxuICAgIC8vICAgICAgICAgey8qIOKchSBDaGFydCBjb250YWluZXIgKi99XHJcbiAgICAvLyAgICAgICAgIDxkaXYgcmVmPXtjb250YWluZXJSZWZ9IGNsYXNzTmFtZT1cInctZnVsbCBoLWZ1bGxcIj48L2Rpdj5cclxuICAgIC8vXHJcbiAgICAvLyAgICAgICAgIHsvKiDinIUgQ29udHJvbHMgU2VjdGlvbiAqL31cclxuICAgIC8vICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhYnNvbHV0ZSB0b3AtMiByaWdodC0yIGJnLXdoaXRlIHAtMiByb3VuZGVkIHNoYWRvdyBmbGV4IHNwYWNlLXgtMlwiPlxyXG4gICAgLy8gICAgICAgICAgICAgPGJ1dHRvblxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInB4LTQgcHktMiBiZy1ncmF5LTIwMCByb3VuZGVkIGhvdmVyOmJnLWdyYXktMzAwXCJcclxuICAgIC8vICAgICAgICAgICAgICAgICBkaXNhYmxlZD17Y2x1c3RlcnMubGVuZ3RoID09PSAwIHx8IGN1cnJlbnRDbHVzdGVySW5kZXggPT09IDB9XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4gcHJldkNsdXN0ZXIoKX1cclxuICAgIC8vICAgICAgICAgICAgID5cclxuICAgIC8vICAgICAgICAgICAgICAgICBQcmV2aW91cyBDbHVzdGVyXHJcbiAgICAvLyAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgIC8vXHJcbiAgICAvLyAgICAgICAgICAgICA8YnV0dG9uXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwicHgtNCBweS0yIGJnLWdyYXktMjAwIHJvdW5kZWQgaG92ZXI6YmctZ3JheS0zMDBcIlxyXG4gICAgLy8gICAgICAgICAgICAgICAgIGRpc2FibGVkPXtjbHVzdGVycy5sZW5ndGggPT09IDAgfHwgY3VycmVudENsdXN0ZXJJbmRleCA+PSBjbHVzdGVycy5sZW5ndGggLSAxfVxyXG4gICAgLy8gICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IG5leHRDbHVzdGVyKCl9XHJcbiAgICAvLyAgICAgICAgICAgICA+XHJcbiAgICAvLyAgICAgICAgICAgICAgICAgTmV4dCBDbHVzdGVyXHJcbiAgICAvLyAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgIC8vXHJcbiAgICAvLyAgICAgICAgICAgICA8YnV0dG9uXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwicHgtNCBweS0yIGJnLWdyYXktMjAwIHJvdW5kZWQgaG92ZXI6YmctZ3JheS0zMDBcIlxyXG4gICAgLy8gICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGF1dG9zY2FsZSgpfVxyXG4gICAgLy8gICAgICAgICAgICAgPlxyXG4gICAgLy8gICAgICAgICAgICAgICAgIEF1dG9zY2FsZVxyXG4gICAgLy8gICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAvL1xyXG4gICAgLy8gICAgICAgICAgICAgey8qIOKchSBTd2l0Y2ggYnV0dG9uIHRvIGdvIHRvIFRyZW5kQW5hVGltZS5qcyAqL31cclxuICAgIC8vICAgICAgICAgICAgIDxidXR0b25cclxuICAgIC8vICAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJweC00IHB5LTIgYmctYmx1ZS01MDAgdGV4dC13aGl0ZSByb3VuZGVkIGhvdmVyOmJnLWJsdWUtNzAwXCJcclxuICAgIC8vICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBzZXRTaG93SW5kZXhWaWV3KHRydWUpfVxyXG4gICAgLy8gICAgICAgICAgICAgPlxyXG4gICAgLy8gICAgICAgICAgICAgICAgIFN3aXRjaCB0byBUaW1lIFZpZXdcclxuICAgIC8vICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgLy8gICAgICAgICA8L2Rpdj5cclxuICAgIC8vICAgICA8L2Rpdj5cclxuICAgIC8vICk7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2XHJcbiAgICAgICAgICAgIHJlZj17Y29udGFpbmVyUmVmfVxyXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJ3LXNjcmVlbiBoLVtjYWxjKDEwMHZoLTEwMHB4KV0gYmctd2hpdGUgcmVsYXRpdmVcIlxyXG4gICAgICAgID48L2Rpdj5cclxuICAgICk7XHJcbn0iXSwibmFtZXMiOlsidXNlRWZmZWN0IiwidXNlUmVmIiwidXNlU3RhdGUiLCJUcmVuZEFuYUluZGV4IiwiZDMiLCJTb2x2ZVRpbWVUcmVuZCIsInNvbHZlcyIsImNvbnRhaW5lclJlZiIsImN1cnJlbnRDbHVzdGVySW5kZXgiLCJzZXRDdXJyZW50Q2x1c3RlckluZGV4IiwiY2x1c3RlcnMiLCJzZXRDbHVzdGVycyIsInhEb21haW4iLCJzZXRYRG9tYWluIiwieERvbWFpblJlZiIsInNob3dJbmRleFZpZXciLCJzZXRTaG93SW5kZXhWaWV3IiwiY29uc29sZSIsImxvZyIsImxlbmd0aCIsIndhcm4iLCJjb250YWluZXIiLCJjdXJyZW50IiwiZHJhd1NvbHZlVGltZVRyZW5kIiwiQXJyYXkiLCJpc0FycmF5IiwiZGV0ZWN0ZWRDbHVzdGVycyIsImZpbmRDbHVzdGVycyIsImZpcnN0Q2x1c3RlciIsIm5ld0RvbWFpbiIsIkRhdGUiLCJ0aW1lc3RhbXAiLCJzbGljZSIsIndpbmRvdyIsImFkZEV2ZW50TGlzdGVuZXIiLCJoYW5kbGVSZXNpemUiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicHJldkNsdXN0ZXJJbmRleCIsInByZXZYRG9tYWluIiwic2V0VGltZW91dCIsImRhdGEiLCJjdXJyZW50Q2x1c3RlciIsImkiLCJ1bmlxdWVYVmFsdWVzIiwiU2V0IiwibWFwIiwiZCIsInNpemUiLCJwdXNoIiwiY29tcHV0ZVJvbGxpbmdBdmVyYWdlIiwid2luZG93U2l6ZSIsIl8iLCJhcnIiLCJzdWJzZXQiLCJyZWR1Y2UiLCJzdW0iLCJ2YWwiLCJzZWxlY3QiLCJzZWxlY3RBbGwiLCJyZW1vdmUiLCJ3aWR0aCIsImNsaWVudFdpZHRoIiwiaGVpZ2h0IiwiY2xpZW50SGVpZ2h0Iiwic3ZnIiwiYXBwZW5kIiwiYXR0ciIsInByb2Nlc3NlZERhdGEiLCJzb2x2ZSIsInRpbWUiLCJmaWx0ZXIiLCJ0aW1lc3RhbXBzIiwidGltZXMiLCJjbHVzdGVyU3RhcnRJbmRleCIsImNsdXN0ZXJFbmRJbmRleCIsImluaXRpYWxYRG9tYWluIiwiYW81IiwiYW8xMiIsImFvNURhdGEiLCJ2YWx1ZSIsImFvMTJEYXRhIiwieFNjYWxlIiwic2NhbGVUaW1lIiwiZG9tYWluIiwicmFuZ2UiLCJ5U2NhbGUiLCJzY2FsZUxpbmVhciIsIm1heCIsIm1pbiIsInhBeGlzIiwiY2FsbCIsImF4aXNCb3R0b20iLCJ0aWNrRm9ybWF0IiwidGltZUZvcm1hdCIsImxhc3REYXRlIiwiZWFjaCIsIm5vZGVzIiwiY3VycmVudFRleHQiLCJkYXRlU3RyIiwidGV4dCIsInlBeGlzIiwiYXhpc0xlZnQiLCJncmlkR3JvdXAiLCJkcmF3R3JpZCIsInRpY2tzIiwiZW50ZXIiLCJ6b29tIiwib24iLCJldmVudCIsInRyYW5zZm9ybSIsIm5ld1hTY2FsZSIsInJlc2NhbGVYIiwibmV3WVNjYWxlIiwicmVzY2FsZVkiLCJ1cGRhdGVQbG90IiwibGFzdFpvb21EYXRlIiwibGVnZW5kIiwibGVnZW5kSXRlbXMiLCJjb2xvciIsImxhYmVsIiwiZm9yRWFjaCIsIml0ZW0iLCJhdXRvc2NhbGUiLCJhbzVTZWxlY3Rpb24iLCJqb2luIiwic2hvd1Rvb2x0aXAiLCJ0b29sdGlwIiwic3R5bGUiLCJhbzEyU2VsZWN0aW9uIiwieCIsInkiLCJsaW5lIiwiY3VydmUiLCJjdXJ2ZU1vbm90b25lWCIsImRhdHVtIiwiZGVmaW5lZCIsInNpbmdsZURhdGEiLCJmaW5kIiwiZ2V0VGltZSIsImFvNURhdGFQb2ludCIsImFvMTJEYXRhUG9pbnQiLCJzaW5nbGVUaW1lIiwidG9GaXhlZCIsImFvNVRpbWUiLCJhbzEyVGltZSIsImh0bWwiLCJwYWdlWCIsInBhZ2VZIiwiaGlkZVRvb2x0aXAiLCJhZGRQb2ludHMiLCJjbGFzc05hbWUiLCJ2YWx1ZUFjY2Vzc29yIiwibWluSW5kZXgiLCJ2YWxpZFBvaW50cyIsInBvaW50IiwiY29udHJvbHMiLCJwcmV2Q2x1c3RlciIsIm5leHRDbHVzdGVyIiwibmV4dEluZGV4IiwicHJldkluZGV4IiwiZGl2IiwicmVmIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/app/dataVis/TrendAnaTime.js\n"));

/***/ })

});